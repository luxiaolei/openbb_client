# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPEquityOwnershipData(BaseModel):
    """
    FMP Equity Ownership Data.
    """ # noqa: E501
    var_date: date = Field(description="The date of the data.", alias="date")
    cik: StrictInt = Field(description="Central Index Key (CIK) for the requested entity.")
    filing_date: date = Field(description="Filing date of the stock ownership.")
    investor_name: StrictStr = Field(description="Investor name of the stock ownership.")
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    security_name: StrictStr = Field(description="Security name of the stock ownership.")
    type_of_security: StrictStr = Field(description="Type of security of the stock ownership.")
    security_cusip: StrictStr = Field(description="Security cusip of the stock ownership.")
    shares_type: StrictStr = Field(description="Shares type of the stock ownership.")
    put_call_share: StrictStr = Field(description="Put call share of the stock ownership.")
    investment_discretion: StrictStr = Field(description="Investment discretion of the stock ownership.")
    industry_title: StrictStr = Field(description="Industry title of the stock ownership.")
    weight: Union[StrictFloat, StrictInt] = Field(description="Weight of the stock ownership.")
    last_weight: Union[StrictFloat, StrictInt] = Field(description="Last weight of the stock ownership.")
    change_in_weight: Union[StrictFloat, StrictInt] = Field(description="Change in weight of the stock ownership.")
    change_in_weight_percentage: Union[StrictFloat, StrictInt] = Field(description="Change in weight percentage of the stock ownership.")
    market_value: StrictInt = Field(description="Market value of the stock ownership.")
    last_market_value: StrictInt = Field(description="Last market value of the stock ownership.")
    change_in_market_value: StrictInt = Field(description="Change in market value of the stock ownership.")
    change_in_market_value_percentage: Union[StrictFloat, StrictInt] = Field(description="Change in market value percentage of the stock ownership.")
    shares_number: StrictInt = Field(description="Shares number of the stock ownership.")
    last_shares_number: StrictInt = Field(description="Last shares number of the stock ownership.")
    change_in_shares_number: Union[StrictFloat, StrictInt] = Field(description="Change in shares number of the stock ownership.")
    change_in_shares_number_percentage: Union[StrictFloat, StrictInt] = Field(description="Change in shares number percentage of the stock ownership.")
    quarter_end_price: Union[StrictFloat, StrictInt] = Field(description="Quarter end price of the stock ownership.")
    avg_price_paid: Union[StrictFloat, StrictInt] = Field(description="Average price paid of the stock ownership.")
    is_new: StrictBool = Field(description="Is the stock ownership new.")
    is_sold_out: StrictBool = Field(description="Is the stock ownership sold out.")
    ownership: Union[StrictFloat, StrictInt] = Field(description="How much is the ownership.")
    last_ownership: Union[StrictFloat, StrictInt] = Field(description="Last ownership amount.")
    change_in_ownership: Union[StrictFloat, StrictInt] = Field(description="Change in ownership amount.")
    change_in_ownership_percentage: Union[StrictFloat, StrictInt] = Field(description="Change in ownership percentage.")
    holding_period: StrictInt = Field(description="Holding period of the stock ownership.")
    first_added: date = Field(description="First added date of the stock ownership.")
    performance: Union[StrictFloat, StrictInt] = Field(description="Performance of the stock ownership.")
    performance_percentage: Union[StrictFloat, StrictInt] = Field(description="Performance percentage of the stock ownership.")
    last_performance: Union[StrictFloat, StrictInt] = Field(description="Last performance of the stock ownership.")
    change_in_performance: Union[StrictFloat, StrictInt] = Field(description="Change in performance of the stock ownership.")
    is_counted_for_performance: StrictBool = Field(description="Is the stock ownership counted for performance.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "cik", "filing_date", "investor_name", "symbol", "security_name", "type_of_security", "security_cusip", "shares_type", "put_call_share", "investment_discretion", "industry_title", "weight", "last_weight", "change_in_weight", "change_in_weight_percentage", "market_value", "last_market_value", "change_in_market_value", "change_in_market_value_percentage", "shares_number", "last_shares_number", "change_in_shares_number", "change_in_shares_number_percentage", "quarter_end_price", "avg_price_paid", "is_new", "is_sold_out", "ownership", "last_ownership", "change_in_ownership", "change_in_ownership_percentage", "holding_period", "first_added", "performance", "performance_percentage", "last_performance", "change_in_performance", "is_counted_for_performance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPEquityOwnershipData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPEquityOwnershipData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "cik": obj.get("cik"),
            "filing_date": obj.get("filing_date"),
            "investor_name": obj.get("investor_name"),
            "symbol": obj.get("symbol"),
            "security_name": obj.get("security_name"),
            "type_of_security": obj.get("type_of_security"),
            "security_cusip": obj.get("security_cusip"),
            "shares_type": obj.get("shares_type"),
            "put_call_share": obj.get("put_call_share"),
            "investment_discretion": obj.get("investment_discretion"),
            "industry_title": obj.get("industry_title"),
            "weight": obj.get("weight"),
            "last_weight": obj.get("last_weight"),
            "change_in_weight": obj.get("change_in_weight"),
            "change_in_weight_percentage": obj.get("change_in_weight_percentage"),
            "market_value": obj.get("market_value"),
            "last_market_value": obj.get("last_market_value"),
            "change_in_market_value": obj.get("change_in_market_value"),
            "change_in_market_value_percentage": obj.get("change_in_market_value_percentage"),
            "shares_number": obj.get("shares_number"),
            "last_shares_number": obj.get("last_shares_number"),
            "change_in_shares_number": obj.get("change_in_shares_number"),
            "change_in_shares_number_percentage": obj.get("change_in_shares_number_percentage"),
            "quarter_end_price": obj.get("quarter_end_price"),
            "avg_price_paid": obj.get("avg_price_paid"),
            "is_new": obj.get("is_new"),
            "is_sold_out": obj.get("is_sold_out"),
            "ownership": obj.get("ownership"),
            "last_ownership": obj.get("last_ownership"),
            "change_in_ownership": obj.get("change_in_ownership"),
            "change_in_ownership_percentage": obj.get("change_in_ownership_percentage"),
            "holding_period": obj.get("holding_period"),
            "first_added": obj.get("first_added"),
            "performance": obj.get("performance"),
            "performance_percentage": obj.get("performance_percentage"),
            "last_performance": obj.get("last_performance"),
            "change_in_performance": obj.get("change_in_performance"),
            "is_counted_for_performance": obj.get("is_counted_for_performance")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


