# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FederalReserveCentralBankHoldingsData(BaseModel):
    """
    Federal Reserve Central Bank Holdings Data.
    """ # noqa: E501
    var_date: date = Field(description="The date of the data.", alias="date")
    security_type: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    is_aggreated: Optional[StrictStr] = None
    cusip: Optional[StrictStr] = None
    issuer: Optional[StrictStr] = None
    maturity_date: Optional[date] = None
    term: Optional[StrictStr] = None
    face_value: Optional[Union[StrictFloat, StrictInt]] = None
    par_value: Optional[Union[StrictFloat, StrictInt]] = None
    coupon: Optional[Union[StrictFloat, StrictInt]] = None
    spread: Optional[Union[StrictFloat, StrictInt]] = None
    percent_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    bills: Optional[Union[StrictFloat, StrictInt]] = None
    frn: Optional[Union[StrictFloat, StrictInt]] = None
    notes_and_bonds: Optional[Union[StrictFloat, StrictInt]] = None
    tips: Optional[Union[StrictFloat, StrictInt]] = None
    mbs: Optional[Union[StrictFloat, StrictInt]] = None
    cmbs: Optional[Union[StrictFloat, StrictInt]] = None
    agencies: Optional[Union[StrictFloat, StrictInt]] = None
    total: Optional[Union[StrictFloat, StrictInt]] = None
    inflation_compensation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="inflationCompensation")
    change_prior_week: Optional[Union[StrictFloat, StrictInt]] = None
    change_prior_year: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "security_type", "description", "is_aggreated", "cusip", "issuer", "maturity_date", "term", "face_value", "par_value", "coupon", "spread", "percent_outstanding", "bills", "frn", "notes_and_bonds", "tips", "mbs", "cmbs", "agencies", "total", "inflationCompensation", "change_prior_week", "change_prior_year"]

    @field_validator('is_aggreated')
    def is_aggreated_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Y']):
            raise ValueError("must be one of enum values ('Y')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FederalReserveCentralBankHoldingsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if security_type (nullable) is None
        # and model_fields_set contains the field
        if self.security_type is None and "security_type" in self.model_fields_set:
            _dict['security_type'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if is_aggreated (nullable) is None
        # and model_fields_set contains the field
        if self.is_aggreated is None and "is_aggreated" in self.model_fields_set:
            _dict['is_aggreated'] = None

        # set to None if cusip (nullable) is None
        # and model_fields_set contains the field
        if self.cusip is None and "cusip" in self.model_fields_set:
            _dict['cusip'] = None

        # set to None if issuer (nullable) is None
        # and model_fields_set contains the field
        if self.issuer is None and "issuer" in self.model_fields_set:
            _dict['issuer'] = None

        # set to None if maturity_date (nullable) is None
        # and model_fields_set contains the field
        if self.maturity_date is None and "maturity_date" in self.model_fields_set:
            _dict['maturity_date'] = None

        # set to None if term (nullable) is None
        # and model_fields_set contains the field
        if self.term is None and "term" in self.model_fields_set:
            _dict['term'] = None

        # set to None if face_value (nullable) is None
        # and model_fields_set contains the field
        if self.face_value is None and "face_value" in self.model_fields_set:
            _dict['face_value'] = None

        # set to None if par_value (nullable) is None
        # and model_fields_set contains the field
        if self.par_value is None and "par_value" in self.model_fields_set:
            _dict['par_value'] = None

        # set to None if coupon (nullable) is None
        # and model_fields_set contains the field
        if self.coupon is None and "coupon" in self.model_fields_set:
            _dict['coupon'] = None

        # set to None if spread (nullable) is None
        # and model_fields_set contains the field
        if self.spread is None and "spread" in self.model_fields_set:
            _dict['spread'] = None

        # set to None if percent_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.percent_outstanding is None and "percent_outstanding" in self.model_fields_set:
            _dict['percent_outstanding'] = None

        # set to None if bills (nullable) is None
        # and model_fields_set contains the field
        if self.bills is None and "bills" in self.model_fields_set:
            _dict['bills'] = None

        # set to None if frn (nullable) is None
        # and model_fields_set contains the field
        if self.frn is None and "frn" in self.model_fields_set:
            _dict['frn'] = None

        # set to None if notes_and_bonds (nullable) is None
        # and model_fields_set contains the field
        if self.notes_and_bonds is None and "notes_and_bonds" in self.model_fields_set:
            _dict['notes_and_bonds'] = None

        # set to None if tips (nullable) is None
        # and model_fields_set contains the field
        if self.tips is None and "tips" in self.model_fields_set:
            _dict['tips'] = None

        # set to None if mbs (nullable) is None
        # and model_fields_set contains the field
        if self.mbs is None and "mbs" in self.model_fields_set:
            _dict['mbs'] = None

        # set to None if cmbs (nullable) is None
        # and model_fields_set contains the field
        if self.cmbs is None and "cmbs" in self.model_fields_set:
            _dict['cmbs'] = None

        # set to None if agencies (nullable) is None
        # and model_fields_set contains the field
        if self.agencies is None and "agencies" in self.model_fields_set:
            _dict['agencies'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if inflation_compensation (nullable) is None
        # and model_fields_set contains the field
        if self.inflation_compensation is None and "inflation_compensation" in self.model_fields_set:
            _dict['inflationCompensation'] = None

        # set to None if change_prior_week (nullable) is None
        # and model_fields_set contains the field
        if self.change_prior_week is None and "change_prior_week" in self.model_fields_set:
            _dict['change_prior_week'] = None

        # set to None if change_prior_year (nullable) is None
        # and model_fields_set contains the field
        if self.change_prior_year is None and "change_prior_year" in self.model_fields_set:
            _dict['change_prior_year'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FederalReserveCentralBankHoldingsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "security_type": obj.get("security_type"),
            "description": obj.get("description"),
            "is_aggreated": obj.get("is_aggreated"),
            "cusip": obj.get("cusip"),
            "issuer": obj.get("issuer"),
            "maturity_date": obj.get("maturity_date"),
            "term": obj.get("term"),
            "face_value": obj.get("face_value"),
            "par_value": obj.get("par_value"),
            "coupon": obj.get("coupon"),
            "spread": obj.get("spread"),
            "percent_outstanding": obj.get("percent_outstanding"),
            "bills": obj.get("bills"),
            "frn": obj.get("frn"),
            "notes_and_bonds": obj.get("notes_and_bonds"),
            "tips": obj.get("tips"),
            "mbs": obj.get("mbs"),
            "cmbs": obj.get("cmbs"),
            "agencies": obj.get("agencies"),
            "total": obj.get("total"),
            "inflationCompensation": obj.get("inflationCompensation"),
            "change_prior_week": obj.get("change_prior_week"),
            "change_prior_year": obj.get("change_prior_year")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


