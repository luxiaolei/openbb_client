# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPBalanceSheetData(BaseModel):
    """
    FMP Balance Sheet Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end date of the reporting period.")
    fiscal_period: Optional[StrictStr] = None
    fiscal_year: Optional[StrictInt] = None
    filing_date: Optional[date] = None
    accepted_date: Optional[datetime] = None
    reported_currency: Optional[StrictStr] = None
    cash_and_cash_equivalents: Optional[Union[StrictFloat, StrictInt]] = None
    short_term_investments: Optional[Union[StrictFloat, StrictInt]] = None
    cash_and_short_term_investments: Optional[Union[StrictFloat, StrictInt]] = None
    net_receivables: Optional[Union[StrictFloat, StrictInt]] = None
    inventory: Optional[Union[StrictFloat, StrictInt]] = None
    other_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    total_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    plant_property_equipment_net: Optional[Union[StrictFloat, StrictInt]] = None
    goodwill: Optional[Union[StrictFloat, StrictInt]] = None
    intangible_assets: Optional[Union[StrictFloat, StrictInt]] = None
    goodwill_and_intangible_assets: Optional[Union[StrictFloat, StrictInt]] = None
    long_term_investments: Optional[Union[StrictFloat, StrictInt]] = None
    tax_assets: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    non_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    other_assets: Optional[Union[StrictFloat, StrictInt]] = None
    total_assets: Optional[Union[StrictFloat, StrictInt]] = None
    accounts_payable: Optional[Union[StrictFloat, StrictInt]] = None
    short_term_debt: Optional[Union[StrictFloat, StrictInt]] = None
    tax_payables: Optional[Union[StrictFloat, StrictInt]] = None
    current_deferred_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    other_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    total_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    long_term_debt: Optional[Union[StrictFloat, StrictInt]] = None
    deferred_revenue_non_current: Optional[Union[StrictFloat, StrictInt]] = None
    deferred_tax_liabilities_non_current: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    total_non_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    other_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    capital_lease_obligations: Optional[Union[StrictFloat, StrictInt]] = None
    total_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    preferred_stock: Optional[Union[StrictFloat, StrictInt]] = None
    common_stock: Optional[Union[StrictFloat, StrictInt]] = None
    retained_earnings: Optional[Union[StrictFloat, StrictInt]] = None
    accumulated_other_comprehensive_income: Optional[Union[StrictFloat, StrictInt]] = None
    other_shareholders_equity: Optional[Union[StrictFloat, StrictInt]] = None
    other_total_shareholders_equity: Optional[Union[StrictFloat, StrictInt]] = None
    total_common_equity: Optional[Union[StrictFloat, StrictInt]] = None
    total_equity_non_controlling_interests: Optional[Union[StrictFloat, StrictInt]] = None
    total_liabilities_and_shareholders_equity: Optional[Union[StrictFloat, StrictInt]] = None
    minority_interest: Optional[Union[StrictFloat, StrictInt]] = None
    total_liabilities_and_total_equity: Optional[Union[StrictFloat, StrictInt]] = None
    total_investments: Optional[Union[StrictFloat, StrictInt]] = None
    total_debt: Optional[Union[StrictFloat, StrictInt]] = None
    net_debt: Optional[Union[StrictFloat, StrictInt]] = None
    link: Optional[StrictStr] = None
    final_link: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "filing_date", "accepted_date", "reported_currency", "cash_and_cash_equivalents", "short_term_investments", "cash_and_short_term_investments", "net_receivables", "inventory", "other_current_assets", "total_current_assets", "plant_property_equipment_net", "goodwill", "intangible_assets", "goodwill_and_intangible_assets", "long_term_investments", "tax_assets", "other_non_current_assets", "non_current_assets", "other_assets", "total_assets", "accounts_payable", "short_term_debt", "tax_payables", "current_deferred_revenue", "other_current_liabilities", "total_current_liabilities", "long_term_debt", "deferred_revenue_non_current", "deferred_tax_liabilities_non_current", "other_non_current_liabilities", "total_non_current_liabilities", "other_liabilities", "capital_lease_obligations", "total_liabilities", "preferred_stock", "common_stock", "retained_earnings", "accumulated_other_comprehensive_income", "other_shareholders_equity", "other_total_shareholders_equity", "total_common_equity", "total_equity_non_controlling_interests", "total_liabilities_and_shareholders_equity", "minority_interest", "total_liabilities_and_total_equity", "total_investments", "total_debt", "net_debt", "link", "final_link"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPBalanceSheetData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if filing_date (nullable) is None
        # and model_fields_set contains the field
        if self.filing_date is None and "filing_date" in self.model_fields_set:
            _dict['filing_date'] = None

        # set to None if accepted_date (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_date is None and "accepted_date" in self.model_fields_set:
            _dict['accepted_date'] = None

        # set to None if reported_currency (nullable) is None
        # and model_fields_set contains the field
        if self.reported_currency is None and "reported_currency" in self.model_fields_set:
            _dict['reported_currency'] = None

        # set to None if cash_and_cash_equivalents (nullable) is None
        # and model_fields_set contains the field
        if self.cash_and_cash_equivalents is None and "cash_and_cash_equivalents" in self.model_fields_set:
            _dict['cash_and_cash_equivalents'] = None

        # set to None if short_term_investments (nullable) is None
        # and model_fields_set contains the field
        if self.short_term_investments is None and "short_term_investments" in self.model_fields_set:
            _dict['short_term_investments'] = None

        # set to None if cash_and_short_term_investments (nullable) is None
        # and model_fields_set contains the field
        if self.cash_and_short_term_investments is None and "cash_and_short_term_investments" in self.model_fields_set:
            _dict['cash_and_short_term_investments'] = None

        # set to None if net_receivables (nullable) is None
        # and model_fields_set contains the field
        if self.net_receivables is None and "net_receivables" in self.model_fields_set:
            _dict['net_receivables'] = None

        # set to None if inventory (nullable) is None
        # and model_fields_set contains the field
        if self.inventory is None and "inventory" in self.model_fields_set:
            _dict['inventory'] = None

        # set to None if other_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_current_assets is None and "other_current_assets" in self.model_fields_set:
            _dict['other_current_assets'] = None

        # set to None if total_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_current_assets is None and "total_current_assets" in self.model_fields_set:
            _dict['total_current_assets'] = None

        # set to None if plant_property_equipment_net (nullable) is None
        # and model_fields_set contains the field
        if self.plant_property_equipment_net is None and "plant_property_equipment_net" in self.model_fields_set:
            _dict['plant_property_equipment_net'] = None

        # set to None if goodwill (nullable) is None
        # and model_fields_set contains the field
        if self.goodwill is None and "goodwill" in self.model_fields_set:
            _dict['goodwill'] = None

        # set to None if intangible_assets (nullable) is None
        # and model_fields_set contains the field
        if self.intangible_assets is None and "intangible_assets" in self.model_fields_set:
            _dict['intangible_assets'] = None

        # set to None if goodwill_and_intangible_assets (nullable) is None
        # and model_fields_set contains the field
        if self.goodwill_and_intangible_assets is None and "goodwill_and_intangible_assets" in self.model_fields_set:
            _dict['goodwill_and_intangible_assets'] = None

        # set to None if long_term_investments (nullable) is None
        # and model_fields_set contains the field
        if self.long_term_investments is None and "long_term_investments" in self.model_fields_set:
            _dict['long_term_investments'] = None

        # set to None if tax_assets (nullable) is None
        # and model_fields_set contains the field
        if self.tax_assets is None and "tax_assets" in self.model_fields_set:
            _dict['tax_assets'] = None

        # set to None if other_non_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_current_assets is None and "other_non_current_assets" in self.model_fields_set:
            _dict['other_non_current_assets'] = None

        # set to None if non_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.non_current_assets is None and "non_current_assets" in self.model_fields_set:
            _dict['non_current_assets'] = None

        # set to None if other_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_assets is None and "other_assets" in self.model_fields_set:
            _dict['other_assets'] = None

        # set to None if total_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_assets is None and "total_assets" in self.model_fields_set:
            _dict['total_assets'] = None

        # set to None if accounts_payable (nullable) is None
        # and model_fields_set contains the field
        if self.accounts_payable is None and "accounts_payable" in self.model_fields_set:
            _dict['accounts_payable'] = None

        # set to None if short_term_debt (nullable) is None
        # and model_fields_set contains the field
        if self.short_term_debt is None and "short_term_debt" in self.model_fields_set:
            _dict['short_term_debt'] = None

        # set to None if tax_payables (nullable) is None
        # and model_fields_set contains the field
        if self.tax_payables is None and "tax_payables" in self.model_fields_set:
            _dict['tax_payables'] = None

        # set to None if current_deferred_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.current_deferred_revenue is None and "current_deferred_revenue" in self.model_fields_set:
            _dict['current_deferred_revenue'] = None

        # set to None if other_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_current_liabilities is None and "other_current_liabilities" in self.model_fields_set:
            _dict['other_current_liabilities'] = None

        # set to None if total_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_current_liabilities is None and "total_current_liabilities" in self.model_fields_set:
            _dict['total_current_liabilities'] = None

        # set to None if long_term_debt (nullable) is None
        # and model_fields_set contains the field
        if self.long_term_debt is None and "long_term_debt" in self.model_fields_set:
            _dict['long_term_debt'] = None

        # set to None if deferred_revenue_non_current (nullable) is None
        # and model_fields_set contains the field
        if self.deferred_revenue_non_current is None and "deferred_revenue_non_current" in self.model_fields_set:
            _dict['deferred_revenue_non_current'] = None

        # set to None if deferred_tax_liabilities_non_current (nullable) is None
        # and model_fields_set contains the field
        if self.deferred_tax_liabilities_non_current is None and "deferred_tax_liabilities_non_current" in self.model_fields_set:
            _dict['deferred_tax_liabilities_non_current'] = None

        # set to None if other_non_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_current_liabilities is None and "other_non_current_liabilities" in self.model_fields_set:
            _dict['other_non_current_liabilities'] = None

        # set to None if total_non_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_non_current_liabilities is None and "total_non_current_liabilities" in self.model_fields_set:
            _dict['total_non_current_liabilities'] = None

        # set to None if other_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_liabilities is None and "other_liabilities" in self.model_fields_set:
            _dict['other_liabilities'] = None

        # set to None if capital_lease_obligations (nullable) is None
        # and model_fields_set contains the field
        if self.capital_lease_obligations is None and "capital_lease_obligations" in self.model_fields_set:
            _dict['capital_lease_obligations'] = None

        # set to None if total_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities is None and "total_liabilities" in self.model_fields_set:
            _dict['total_liabilities'] = None

        # set to None if preferred_stock (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_stock is None and "preferred_stock" in self.model_fields_set:
            _dict['preferred_stock'] = None

        # set to None if common_stock (nullable) is None
        # and model_fields_set contains the field
        if self.common_stock is None and "common_stock" in self.model_fields_set:
            _dict['common_stock'] = None

        # set to None if retained_earnings (nullable) is None
        # and model_fields_set contains the field
        if self.retained_earnings is None and "retained_earnings" in self.model_fields_set:
            _dict['retained_earnings'] = None

        # set to None if accumulated_other_comprehensive_income (nullable) is None
        # and model_fields_set contains the field
        if self.accumulated_other_comprehensive_income is None and "accumulated_other_comprehensive_income" in self.model_fields_set:
            _dict['accumulated_other_comprehensive_income'] = None

        # set to None if other_shareholders_equity (nullable) is None
        # and model_fields_set contains the field
        if self.other_shareholders_equity is None and "other_shareholders_equity" in self.model_fields_set:
            _dict['other_shareholders_equity'] = None

        # set to None if other_total_shareholders_equity (nullable) is None
        # and model_fields_set contains the field
        if self.other_total_shareholders_equity is None and "other_total_shareholders_equity" in self.model_fields_set:
            _dict['other_total_shareholders_equity'] = None

        # set to None if total_common_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_common_equity is None and "total_common_equity" in self.model_fields_set:
            _dict['total_common_equity'] = None

        # set to None if total_equity_non_controlling_interests (nullable) is None
        # and model_fields_set contains the field
        if self.total_equity_non_controlling_interests is None and "total_equity_non_controlling_interests" in self.model_fields_set:
            _dict['total_equity_non_controlling_interests'] = None

        # set to None if total_liabilities_and_shareholders_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities_and_shareholders_equity is None and "total_liabilities_and_shareholders_equity" in self.model_fields_set:
            _dict['total_liabilities_and_shareholders_equity'] = None

        # set to None if minority_interest (nullable) is None
        # and model_fields_set contains the field
        if self.minority_interest is None and "minority_interest" in self.model_fields_set:
            _dict['minority_interest'] = None

        # set to None if total_liabilities_and_total_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities_and_total_equity is None and "total_liabilities_and_total_equity" in self.model_fields_set:
            _dict['total_liabilities_and_total_equity'] = None

        # set to None if total_investments (nullable) is None
        # and model_fields_set contains the field
        if self.total_investments is None and "total_investments" in self.model_fields_set:
            _dict['total_investments'] = None

        # set to None if total_debt (nullable) is None
        # and model_fields_set contains the field
        if self.total_debt is None and "total_debt" in self.model_fields_set:
            _dict['total_debt'] = None

        # set to None if net_debt (nullable) is None
        # and model_fields_set contains the field
        if self.net_debt is None and "net_debt" in self.model_fields_set:
            _dict['net_debt'] = None

        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        # set to None if final_link (nullable) is None
        # and model_fields_set contains the field
        if self.final_link is None and "final_link" in self.model_fields_set:
            _dict['final_link'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPBalanceSheetData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "filing_date": obj.get("filing_date"),
            "accepted_date": obj.get("accepted_date"),
            "reported_currency": obj.get("reported_currency"),
            "cash_and_cash_equivalents": obj.get("cash_and_cash_equivalents"),
            "short_term_investments": obj.get("short_term_investments"),
            "cash_and_short_term_investments": obj.get("cash_and_short_term_investments"),
            "net_receivables": obj.get("net_receivables"),
            "inventory": obj.get("inventory"),
            "other_current_assets": obj.get("other_current_assets"),
            "total_current_assets": obj.get("total_current_assets"),
            "plant_property_equipment_net": obj.get("plant_property_equipment_net"),
            "goodwill": obj.get("goodwill"),
            "intangible_assets": obj.get("intangible_assets"),
            "goodwill_and_intangible_assets": obj.get("goodwill_and_intangible_assets"),
            "long_term_investments": obj.get("long_term_investments"),
            "tax_assets": obj.get("tax_assets"),
            "other_non_current_assets": obj.get("other_non_current_assets"),
            "non_current_assets": obj.get("non_current_assets"),
            "other_assets": obj.get("other_assets"),
            "total_assets": obj.get("total_assets"),
            "accounts_payable": obj.get("accounts_payable"),
            "short_term_debt": obj.get("short_term_debt"),
            "tax_payables": obj.get("tax_payables"),
            "current_deferred_revenue": obj.get("current_deferred_revenue"),
            "other_current_liabilities": obj.get("other_current_liabilities"),
            "total_current_liabilities": obj.get("total_current_liabilities"),
            "long_term_debt": obj.get("long_term_debt"),
            "deferred_revenue_non_current": obj.get("deferred_revenue_non_current"),
            "deferred_tax_liabilities_non_current": obj.get("deferred_tax_liabilities_non_current"),
            "other_non_current_liabilities": obj.get("other_non_current_liabilities"),
            "total_non_current_liabilities": obj.get("total_non_current_liabilities"),
            "other_liabilities": obj.get("other_liabilities"),
            "capital_lease_obligations": obj.get("capital_lease_obligations"),
            "total_liabilities": obj.get("total_liabilities"),
            "preferred_stock": obj.get("preferred_stock"),
            "common_stock": obj.get("common_stock"),
            "retained_earnings": obj.get("retained_earnings"),
            "accumulated_other_comprehensive_income": obj.get("accumulated_other_comprehensive_income"),
            "other_shareholders_equity": obj.get("other_shareholders_equity"),
            "other_total_shareholders_equity": obj.get("other_total_shareholders_equity"),
            "total_common_equity": obj.get("total_common_equity"),
            "total_equity_non_controlling_interests": obj.get("total_equity_non_controlling_interests"),
            "total_liabilities_and_shareholders_equity": obj.get("total_liabilities_and_shareholders_equity"),
            "minority_interest": obj.get("minority_interest"),
            "total_liabilities_and_total_equity": obj.get("total_liabilities_and_total_equity"),
            "total_investments": obj.get("total_investments"),
            "total_debt": obj.get("total_debt"),
            "net_debt": obj.get("net_debt"),
            "link": obj.get("link"),
            "final_link": obj.get("final_link")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


