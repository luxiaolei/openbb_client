# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openbb_client.models.calendar_period import CalendarPeriod
from typing import Optional, Set
from typing_extensions import Self

class IntrinioForwardEbitdaEstimatesData(BaseModel):
    """
    Intrinio Forward EBITDA Estimates Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    name: Optional[StrictStr] = None
    last_updated: Optional[date] = None
    period_ending: Optional[date] = None
    fiscal_year: Optional[StrictInt] = None
    fiscal_period: Optional[StrictStr] = None
    calendar_year: Optional[StrictInt] = None
    calendar_period: Optional[CalendarPeriod] = None
    low_estimate: Optional[StrictInt] = None
    high_estimate: Optional[StrictInt] = None
    mean: Optional[StrictInt] = None
    median: Optional[StrictInt] = None
    standard_deviation: Optional[StrictInt] = None
    number_of_analysts: Optional[StrictInt] = None
    conensus_type: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "last_updated", "period_ending", "fiscal_year", "fiscal_period", "calendar_year", "calendar_period", "low_estimate", "high_estimate", "mean", "median", "standard_deviation", "number_of_analysts", "conensus_type"]

    @field_validator('conensus_type')
    def conensus_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ebitda', 'ebit', 'enterprise_value', 'cash_flow_per_share', 'pretax_income']):
            raise ValueError("must be one of enum values ('ebitda', 'ebit', 'enterprise_value', 'cash_flow_per_share', 'pretax_income')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioForwardEbitdaEstimatesData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calendar_period
        if self.calendar_period:
            _dict['calendar_period'] = self.calendar_period.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if period_ending (nullable) is None
        # and model_fields_set contains the field
        if self.period_ending is None and "period_ending" in self.model_fields_set:
            _dict['period_ending'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if calendar_year (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_year is None and "calendar_year" in self.model_fields_set:
            _dict['calendar_year'] = None

        # set to None if calendar_period (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_period is None and "calendar_period" in self.model_fields_set:
            _dict['calendar_period'] = None

        # set to None if low_estimate (nullable) is None
        # and model_fields_set contains the field
        if self.low_estimate is None and "low_estimate" in self.model_fields_set:
            _dict['low_estimate'] = None

        # set to None if high_estimate (nullable) is None
        # and model_fields_set contains the field
        if self.high_estimate is None and "high_estimate" in self.model_fields_set:
            _dict['high_estimate'] = None

        # set to None if mean (nullable) is None
        # and model_fields_set contains the field
        if self.mean is None and "mean" in self.model_fields_set:
            _dict['mean'] = None

        # set to None if median (nullable) is None
        # and model_fields_set contains the field
        if self.median is None and "median" in self.model_fields_set:
            _dict['median'] = None

        # set to None if standard_deviation (nullable) is None
        # and model_fields_set contains the field
        if self.standard_deviation is None and "standard_deviation" in self.model_fields_set:
            _dict['standard_deviation'] = None

        # set to None if number_of_analysts (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_analysts is None and "number_of_analysts" in self.model_fields_set:
            _dict['number_of_analysts'] = None

        # set to None if conensus_type (nullable) is None
        # and model_fields_set contains the field
        if self.conensus_type is None and "conensus_type" in self.model_fields_set:
            _dict['conensus_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioForwardEbitdaEstimatesData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "last_updated": obj.get("last_updated"),
            "period_ending": obj.get("period_ending"),
            "fiscal_year": obj.get("fiscal_year"),
            "fiscal_period": obj.get("fiscal_period"),
            "calendar_year": obj.get("calendar_year"),
            "calendar_period": CalendarPeriod.from_dict(obj["calendar_period"]) if obj.get("calendar_period") is not None else None,
            "low_estimate": obj.get("low_estimate"),
            "high_estimate": obj.get("high_estimate"),
            "mean": obj.get("mean"),
            "median": obj.get("median"),
            "standard_deviation": obj.get("standard_deviation"),
            "number_of_analysts": obj.get("number_of_analysts"),
            "conensus_type": obj.get("conensus_type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


