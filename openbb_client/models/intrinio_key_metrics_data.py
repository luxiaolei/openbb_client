# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IntrinioKeyMetricsData(BaseModel):
    """
    Intrinio Key Metrics Data.
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    market_cap: Optional[Union[StrictFloat, StrictInt]] = None
    pe_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_book: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_tangible_book: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    quick_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    gross_margin: Optional[Union[StrictFloat, StrictInt]] = None
    ebit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    profit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    eps: Optional[Union[StrictFloat, StrictInt]] = None
    eps_growth: Optional[Union[StrictFloat, StrictInt]] = None
    revenue_growth: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda_growth: Optional[Union[StrictFloat, StrictInt]] = None
    ebit_growth: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_growth: Optional[Union[StrictFloat, StrictInt]] = None
    free_cash_flow_to_firm_growth: Optional[Union[StrictFloat, StrictInt]] = None
    invested_capital_growth: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_assets: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_equity: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_invested_capital: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda: Optional[StrictInt] = None
    ebit: Optional[StrictInt] = None
    long_term_debt: Optional[StrictInt] = None
    total_debt: Optional[StrictInt] = None
    total_capital: Optional[StrictInt] = None
    enterprise_value: Optional[StrictInt] = None
    free_cash_flow_to_firm: Optional[StrictInt] = None
    altman_z_score: Optional[Union[StrictFloat, StrictInt]] = None
    beta: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_yield: Optional[Union[StrictFloat, StrictInt]] = None
    earnings_yield: Optional[Union[StrictFloat, StrictInt]] = None
    last_price: Optional[Union[StrictFloat, StrictInt]] = None
    year_high: Optional[Union[StrictFloat, StrictInt]] = None
    year_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="52 week low")
    volume_avg: Optional[StrictInt] = None
    short_interest: Optional[StrictInt] = None
    shares_outstanding: Optional[StrictInt] = None
    days_to_cover: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "market_cap", "pe_ratio", "price_to_book", "price_to_tangible_book", "price_to_revenue", "quick_ratio", "gross_margin", "ebit_margin", "profit_margin", "eps", "eps_growth", "revenue_growth", "ebitda_growth", "ebit_growth", "net_income_growth", "free_cash_flow_to_firm_growth", "invested_capital_growth", "return_on_assets", "return_on_equity", "return_on_invested_capital", "ebitda", "ebit", "long_term_debt", "total_debt", "total_capital", "enterprise_value", "free_cash_flow_to_firm", "altman_z_score", "beta", "dividend_yield", "earnings_yield", "last_price", "year_high", "year_low", "volume_avg", "short_interest", "shares_outstanding", "days_to_cover"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioKeyMetricsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if market_cap (nullable) is None
        # and model_fields_set contains the field
        if self.market_cap is None and "market_cap" in self.model_fields_set:
            _dict['market_cap'] = None

        # set to None if pe_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.pe_ratio is None and "pe_ratio" in self.model_fields_set:
            _dict['pe_ratio'] = None

        # set to None if price_to_book (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_book is None and "price_to_book" in self.model_fields_set:
            _dict['price_to_book'] = None

        # set to None if price_to_tangible_book (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_tangible_book is None and "price_to_tangible_book" in self.model_fields_set:
            _dict['price_to_tangible_book'] = None

        # set to None if price_to_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_revenue is None and "price_to_revenue" in self.model_fields_set:
            _dict['price_to_revenue'] = None

        # set to None if quick_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.quick_ratio is None and "quick_ratio" in self.model_fields_set:
            _dict['quick_ratio'] = None

        # set to None if gross_margin (nullable) is None
        # and model_fields_set contains the field
        if self.gross_margin is None and "gross_margin" in self.model_fields_set:
            _dict['gross_margin'] = None

        # set to None if ebit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.ebit_margin is None and "ebit_margin" in self.model_fields_set:
            _dict['ebit_margin'] = None

        # set to None if profit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.profit_margin is None and "profit_margin" in self.model_fields_set:
            _dict['profit_margin'] = None

        # set to None if eps (nullable) is None
        # and model_fields_set contains the field
        if self.eps is None and "eps" in self.model_fields_set:
            _dict['eps'] = None

        # set to None if eps_growth (nullable) is None
        # and model_fields_set contains the field
        if self.eps_growth is None and "eps_growth" in self.model_fields_set:
            _dict['eps_growth'] = None

        # set to None if revenue_growth (nullable) is None
        # and model_fields_set contains the field
        if self.revenue_growth is None and "revenue_growth" in self.model_fields_set:
            _dict['revenue_growth'] = None

        # set to None if ebitda_growth (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda_growth is None and "ebitda_growth" in self.model_fields_set:
            _dict['ebitda_growth'] = None

        # set to None if ebit_growth (nullable) is None
        # and model_fields_set contains the field
        if self.ebit_growth is None and "ebit_growth" in self.model_fields_set:
            _dict['ebit_growth'] = None

        # set to None if net_income_growth (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_growth is None and "net_income_growth" in self.model_fields_set:
            _dict['net_income_growth'] = None

        # set to None if free_cash_flow_to_firm_growth (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow_to_firm_growth is None and "free_cash_flow_to_firm_growth" in self.model_fields_set:
            _dict['free_cash_flow_to_firm_growth'] = None

        # set to None if invested_capital_growth (nullable) is None
        # and model_fields_set contains the field
        if self.invested_capital_growth is None and "invested_capital_growth" in self.model_fields_set:
            _dict['invested_capital_growth'] = None

        # set to None if return_on_assets (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_assets is None and "return_on_assets" in self.model_fields_set:
            _dict['return_on_assets'] = None

        # set to None if return_on_equity (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_equity is None and "return_on_equity" in self.model_fields_set:
            _dict['return_on_equity'] = None

        # set to None if return_on_invested_capital (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_invested_capital is None and "return_on_invested_capital" in self.model_fields_set:
            _dict['return_on_invested_capital'] = None

        # set to None if ebitda (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda is None and "ebitda" in self.model_fields_set:
            _dict['ebitda'] = None

        # set to None if ebit (nullable) is None
        # and model_fields_set contains the field
        if self.ebit is None and "ebit" in self.model_fields_set:
            _dict['ebit'] = None

        # set to None if long_term_debt (nullable) is None
        # and model_fields_set contains the field
        if self.long_term_debt is None and "long_term_debt" in self.model_fields_set:
            _dict['long_term_debt'] = None

        # set to None if total_debt (nullable) is None
        # and model_fields_set contains the field
        if self.total_debt is None and "total_debt" in self.model_fields_set:
            _dict['total_debt'] = None

        # set to None if total_capital (nullable) is None
        # and model_fields_set contains the field
        if self.total_capital is None and "total_capital" in self.model_fields_set:
            _dict['total_capital'] = None

        # set to None if enterprise_value (nullable) is None
        # and model_fields_set contains the field
        if self.enterprise_value is None and "enterprise_value" in self.model_fields_set:
            _dict['enterprise_value'] = None

        # set to None if free_cash_flow_to_firm (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow_to_firm is None and "free_cash_flow_to_firm" in self.model_fields_set:
            _dict['free_cash_flow_to_firm'] = None

        # set to None if altman_z_score (nullable) is None
        # and model_fields_set contains the field
        if self.altman_z_score is None and "altman_z_score" in self.model_fields_set:
            _dict['altman_z_score'] = None

        # set to None if beta (nullable) is None
        # and model_fields_set contains the field
        if self.beta is None and "beta" in self.model_fields_set:
            _dict['beta'] = None

        # set to None if dividend_yield (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_yield is None and "dividend_yield" in self.model_fields_set:
            _dict['dividend_yield'] = None

        # set to None if earnings_yield (nullable) is None
        # and model_fields_set contains the field
        if self.earnings_yield is None and "earnings_yield" in self.model_fields_set:
            _dict['earnings_yield'] = None

        # set to None if last_price (nullable) is None
        # and model_fields_set contains the field
        if self.last_price is None and "last_price" in self.model_fields_set:
            _dict['last_price'] = None

        # set to None if year_high (nullable) is None
        # and model_fields_set contains the field
        if self.year_high is None and "year_high" in self.model_fields_set:
            _dict['year_high'] = None

        # set to None if volume_avg (nullable) is None
        # and model_fields_set contains the field
        if self.volume_avg is None and "volume_avg" in self.model_fields_set:
            _dict['volume_avg'] = None

        # set to None if short_interest (nullable) is None
        # and model_fields_set contains the field
        if self.short_interest is None and "short_interest" in self.model_fields_set:
            _dict['short_interest'] = None

        # set to None if shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.shares_outstanding is None and "shares_outstanding" in self.model_fields_set:
            _dict['shares_outstanding'] = None

        # set to None if days_to_cover (nullable) is None
        # and model_fields_set contains the field
        if self.days_to_cover is None and "days_to_cover" in self.model_fields_set:
            _dict['days_to_cover'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioKeyMetricsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "market_cap": obj.get("market_cap"),
            "pe_ratio": obj.get("pe_ratio"),
            "price_to_book": obj.get("price_to_book"),
            "price_to_tangible_book": obj.get("price_to_tangible_book"),
            "price_to_revenue": obj.get("price_to_revenue"),
            "quick_ratio": obj.get("quick_ratio"),
            "gross_margin": obj.get("gross_margin"),
            "ebit_margin": obj.get("ebit_margin"),
            "profit_margin": obj.get("profit_margin"),
            "eps": obj.get("eps"),
            "eps_growth": obj.get("eps_growth"),
            "revenue_growth": obj.get("revenue_growth"),
            "ebitda_growth": obj.get("ebitda_growth"),
            "ebit_growth": obj.get("ebit_growth"),
            "net_income_growth": obj.get("net_income_growth"),
            "free_cash_flow_to_firm_growth": obj.get("free_cash_flow_to_firm_growth"),
            "invested_capital_growth": obj.get("invested_capital_growth"),
            "return_on_assets": obj.get("return_on_assets"),
            "return_on_equity": obj.get("return_on_equity"),
            "return_on_invested_capital": obj.get("return_on_invested_capital"),
            "ebitda": obj.get("ebitda"),
            "ebit": obj.get("ebit"),
            "long_term_debt": obj.get("long_term_debt"),
            "total_debt": obj.get("total_debt"),
            "total_capital": obj.get("total_capital"),
            "enterprise_value": obj.get("enterprise_value"),
            "free_cash_flow_to_firm": obj.get("free_cash_flow_to_firm"),
            "altman_z_score": obj.get("altman_z_score"),
            "beta": obj.get("beta"),
            "dividend_yield": obj.get("dividend_yield"),
            "earnings_yield": obj.get("earnings_yield"),
            "last_price": obj.get("last_price"),
            "year_high": obj.get("year_high"),
            "year_low": obj.get("year_low"),
            "volume_avg": obj.get("volume_avg"),
            "short_interest": obj.get("short_interest"),
            "shares_outstanding": obj.get("shares_outstanding"),
            "days_to_cover": obj.get("days_to_cover")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


