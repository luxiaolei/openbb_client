# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class YFinanceEtfInfoData(BaseModel):
    """
    YFinance ETF Info Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data. (ETF)")
    name: Optional[StrictStr]
    description: Optional[StrictStr] = None
    inception_date: Optional[StrictStr]
    fund_type: Optional[StrictStr] = None
    fund_family: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    exchange: Optional[StrictStr] = None
    exchange_timezone: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    nav_price: Optional[Union[StrictFloat, StrictInt]] = None
    total_assets: Optional[StrictInt] = None
    trailing_pe: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_yield: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_rate_ttm: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_yield_ttm: Optional[Union[StrictFloat, StrictInt]] = None
    year_high: Optional[Union[StrictFloat, StrictInt]] = None
    year_low: Optional[Union[StrictFloat, StrictInt]] = None
    ma_50d: Optional[Union[StrictFloat, StrictInt]] = None
    ma_200d: Optional[Union[StrictFloat, StrictInt]] = None
    return_ytd: Optional[Union[StrictFloat, StrictInt]] = None
    return_3y_avg: Optional[Union[StrictFloat, StrictInt]] = None
    return_5y_avg: Optional[Union[StrictFloat, StrictInt]] = None
    beta_3y_avg: Optional[Union[StrictFloat, StrictInt]] = None
    volume_avg: Optional[Union[StrictFloat, StrictInt]] = None
    volume_avg_10d: Optional[Union[StrictFloat, StrictInt]] = None
    bid: Optional[Union[StrictFloat, StrictInt]] = None
    bid_size: Optional[Union[StrictFloat, StrictInt]] = None
    ask: Optional[Union[StrictFloat, StrictInt]] = None
    ask_size: Optional[Union[StrictFloat, StrictInt]] = None
    open: Optional[Union[StrictFloat, StrictInt]] = None
    high: Optional[Union[StrictFloat, StrictInt]] = None
    low: Optional[Union[StrictFloat, StrictInt]] = None
    volume: Optional[StrictInt] = None
    prev_close: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "description", "inception_date", "fund_type", "fund_family", "category", "exchange", "exchange_timezone", "currency", "nav_price", "total_assets", "trailing_pe", "dividend_yield", "dividend_rate_ttm", "dividend_yield_ttm", "year_high", "year_low", "ma_50d", "ma_200d", "return_ytd", "return_3y_avg", "return_5y_avg", "beta_3y_avg", "volume_avg", "volume_avg_10d", "bid", "bid_size", "ask", "ask_size", "open", "high", "low", "volume", "prev_close"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of YFinanceEtfInfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if inception_date (nullable) is None
        # and model_fields_set contains the field
        if self.inception_date is None and "inception_date" in self.model_fields_set:
            _dict['inception_date'] = None

        # set to None if fund_type (nullable) is None
        # and model_fields_set contains the field
        if self.fund_type is None and "fund_type" in self.model_fields_set:
            _dict['fund_type'] = None

        # set to None if fund_family (nullable) is None
        # and model_fields_set contains the field
        if self.fund_family is None and "fund_family" in self.model_fields_set:
            _dict['fund_family'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        # set to None if exchange_timezone (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_timezone is None and "exchange_timezone" in self.model_fields_set:
            _dict['exchange_timezone'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if nav_price (nullable) is None
        # and model_fields_set contains the field
        if self.nav_price is None and "nav_price" in self.model_fields_set:
            _dict['nav_price'] = None

        # set to None if total_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_assets is None and "total_assets" in self.model_fields_set:
            _dict['total_assets'] = None

        # set to None if trailing_pe (nullable) is None
        # and model_fields_set contains the field
        if self.trailing_pe is None and "trailing_pe" in self.model_fields_set:
            _dict['trailing_pe'] = None

        # set to None if dividend_yield (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_yield is None and "dividend_yield" in self.model_fields_set:
            _dict['dividend_yield'] = None

        # set to None if dividend_rate_ttm (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_rate_ttm is None and "dividend_rate_ttm" in self.model_fields_set:
            _dict['dividend_rate_ttm'] = None

        # set to None if dividend_yield_ttm (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_yield_ttm is None and "dividend_yield_ttm" in self.model_fields_set:
            _dict['dividend_yield_ttm'] = None

        # set to None if year_high (nullable) is None
        # and model_fields_set contains the field
        if self.year_high is None and "year_high" in self.model_fields_set:
            _dict['year_high'] = None

        # set to None if year_low (nullable) is None
        # and model_fields_set contains the field
        if self.year_low is None and "year_low" in self.model_fields_set:
            _dict['year_low'] = None

        # set to None if ma_50d (nullable) is None
        # and model_fields_set contains the field
        if self.ma_50d is None and "ma_50d" in self.model_fields_set:
            _dict['ma_50d'] = None

        # set to None if ma_200d (nullable) is None
        # and model_fields_set contains the field
        if self.ma_200d is None and "ma_200d" in self.model_fields_set:
            _dict['ma_200d'] = None

        # set to None if return_ytd (nullable) is None
        # and model_fields_set contains the field
        if self.return_ytd is None and "return_ytd" in self.model_fields_set:
            _dict['return_ytd'] = None

        # set to None if return_3y_avg (nullable) is None
        # and model_fields_set contains the field
        if self.return_3y_avg is None and "return_3y_avg" in self.model_fields_set:
            _dict['return_3y_avg'] = None

        # set to None if return_5y_avg (nullable) is None
        # and model_fields_set contains the field
        if self.return_5y_avg is None and "return_5y_avg" in self.model_fields_set:
            _dict['return_5y_avg'] = None

        # set to None if beta_3y_avg (nullable) is None
        # and model_fields_set contains the field
        if self.beta_3y_avg is None and "beta_3y_avg" in self.model_fields_set:
            _dict['beta_3y_avg'] = None

        # set to None if volume_avg (nullable) is None
        # and model_fields_set contains the field
        if self.volume_avg is None and "volume_avg" in self.model_fields_set:
            _dict['volume_avg'] = None

        # set to None if volume_avg_10d (nullable) is None
        # and model_fields_set contains the field
        if self.volume_avg_10d is None and "volume_avg_10d" in self.model_fields_set:
            _dict['volume_avg_10d'] = None

        # set to None if bid (nullable) is None
        # and model_fields_set contains the field
        if self.bid is None and "bid" in self.model_fields_set:
            _dict['bid'] = None

        # set to None if bid_size (nullable) is None
        # and model_fields_set contains the field
        if self.bid_size is None and "bid_size" in self.model_fields_set:
            _dict['bid_size'] = None

        # set to None if ask (nullable) is None
        # and model_fields_set contains the field
        if self.ask is None and "ask" in self.model_fields_set:
            _dict['ask'] = None

        # set to None if ask_size (nullable) is None
        # and model_fields_set contains the field
        if self.ask_size is None and "ask_size" in self.model_fields_set:
            _dict['ask_size'] = None

        # set to None if open (nullable) is None
        # and model_fields_set contains the field
        if self.open is None and "open" in self.model_fields_set:
            _dict['open'] = None

        # set to None if high (nullable) is None
        # and model_fields_set contains the field
        if self.high is None and "high" in self.model_fields_set:
            _dict['high'] = None

        # set to None if low (nullable) is None
        # and model_fields_set contains the field
        if self.low is None and "low" in self.model_fields_set:
            _dict['low'] = None

        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if prev_close (nullable) is None
        # and model_fields_set contains the field
        if self.prev_close is None and "prev_close" in self.model_fields_set:
            _dict['prev_close'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of YFinanceEtfInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "inception_date": obj.get("inception_date"),
            "fund_type": obj.get("fund_type"),
            "fund_family": obj.get("fund_family"),
            "category": obj.get("category"),
            "exchange": obj.get("exchange"),
            "exchange_timezone": obj.get("exchange_timezone"),
            "currency": obj.get("currency"),
            "nav_price": obj.get("nav_price"),
            "total_assets": obj.get("total_assets"),
            "trailing_pe": obj.get("trailing_pe"),
            "dividend_yield": obj.get("dividend_yield"),
            "dividend_rate_ttm": obj.get("dividend_rate_ttm"),
            "dividend_yield_ttm": obj.get("dividend_yield_ttm"),
            "year_high": obj.get("year_high"),
            "year_low": obj.get("year_low"),
            "ma_50d": obj.get("ma_50d"),
            "ma_200d": obj.get("ma_200d"),
            "return_ytd": obj.get("return_ytd"),
            "return_3y_avg": obj.get("return_3y_avg"),
            "return_5y_avg": obj.get("return_5y_avg"),
            "beta_3y_avg": obj.get("beta_3y_avg"),
            "volume_avg": obj.get("volume_avg"),
            "volume_avg_10d": obj.get("volume_avg_10d"),
            "bid": obj.get("bid"),
            "bid_size": obj.get("bid_size"),
            "ask": obj.get("ask"),
            "ask_size": obj.get("ask_size"),
            "open": obj.get("open"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "volume": obj.get("volume"),
            "prev_close": obj.get("prev_close")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


