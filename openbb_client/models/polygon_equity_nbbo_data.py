# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.conditions import Conditions
from typing import Optional, Set
from typing_extensions import Self

class PolygonEquityNBBOData(BaseModel):
    """
    Polygon Equity NBBO data.
    """ # noqa: E501
    ask_exchange: StrictStr = Field(description="The exchange ID for the ask.")
    ask: Union[StrictFloat, StrictInt] = Field(description="The last ask price.")
    ask_size: StrictInt = Field(description="         The ask size. This represents the number of round lot orders at the given ask price.         The normal round lot size is 100 shares.         An ask size of 2 means there are 200 shares available to purchase at the given ask price.         ")
    bid_size: StrictInt = Field(description="The bid size in round lots.")
    bid: Union[StrictFloat, StrictInt] = Field(description="The last bid price.")
    bid_exchange: StrictStr = Field(description="The exchange ID for the bid.")
    tape: Optional[StrictStr] = None
    conditions: Optional[Conditions] = None
    indicators: Optional[List[StrictInt]] = None
    sequence_num: Optional[StrictInt] = None
    participant_timestamp: Optional[datetime] = None
    sip_timestamp: Optional[datetime] = None
    trf_timestamp: Optional[datetime] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["ask_exchange", "ask", "ask_size", "bid_size", "bid", "bid_exchange", "tape", "conditions", "indicators", "sequence_num", "participant_timestamp", "sip_timestamp", "trf_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolygonEquityNBBOData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if tape (nullable) is None
        # and model_fields_set contains the field
        if self.tape is None and "tape" in self.model_fields_set:
            _dict['tape'] = None

        # set to None if conditions (nullable) is None
        # and model_fields_set contains the field
        if self.conditions is None and "conditions" in self.model_fields_set:
            _dict['conditions'] = None

        # set to None if indicators (nullable) is None
        # and model_fields_set contains the field
        if self.indicators is None and "indicators" in self.model_fields_set:
            _dict['indicators'] = None

        # set to None if sequence_num (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_num is None and "sequence_num" in self.model_fields_set:
            _dict['sequence_num'] = None

        # set to None if participant_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.participant_timestamp is None and "participant_timestamp" in self.model_fields_set:
            _dict['participant_timestamp'] = None

        # set to None if sip_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.sip_timestamp is None and "sip_timestamp" in self.model_fields_set:
            _dict['sip_timestamp'] = None

        # set to None if trf_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.trf_timestamp is None and "trf_timestamp" in self.model_fields_set:
            _dict['trf_timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolygonEquityNBBOData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ask_exchange": obj.get("ask_exchange"),
            "ask": obj.get("ask"),
            "ask_size": obj.get("ask_size"),
            "bid_size": obj.get("bid_size"),
            "bid": obj.get("bid"),
            "bid_exchange": obj.get("bid_exchange"),
            "tape": obj.get("tape"),
            "conditions": Conditions.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None,
            "indicators": obj.get("indicators"),
            "sequence_num": obj.get("sequence_num"),
            "participant_timestamp": obj.get("participant_timestamp"),
            "sip_timestamp": obj.get("sip_timestamp"),
            "trf_timestamp": obj.get("trf_timestamp")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


