# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BenzingaCompanyNewsData(BaseModel):
    """
    Benzinga Company News Data.
    """ # noqa: E501
    var_date: datetime = Field(description="The date of the data. Here it is the published date of the article.", alias="date")
    title: StrictStr = Field(description="Title of the article.")
    text: Optional[StrictStr] = None
    images: Optional[List[Dict[str, StrictStr]]] = None
    url: StrictStr = Field(description="URL to the article.")
    symbols: Optional[StrictStr] = None
    id: StrictStr = Field(description="Article ID.")
    author: Optional[StrictStr] = None
    teaser: Optional[StrictStr] = None
    channels: Optional[StrictStr] = None
    stocks: Optional[StrictStr] = None
    tags: Optional[StrictStr] = None
    updated: Optional[datetime] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "title", "text", "images", "url", "symbols", "id", "author", "teaser", "channels", "stocks", "tags", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BenzingaCompanyNewsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if images (nullable) is None
        # and model_fields_set contains the field
        if self.images is None and "images" in self.model_fields_set:
            _dict['images'] = None

        # set to None if symbols (nullable) is None
        # and model_fields_set contains the field
        if self.symbols is None and "symbols" in self.model_fields_set:
            _dict['symbols'] = None

        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        # set to None if teaser (nullable) is None
        # and model_fields_set contains the field
        if self.teaser is None and "teaser" in self.model_fields_set:
            _dict['teaser'] = None

        # set to None if channels (nullable) is None
        # and model_fields_set contains the field
        if self.channels is None and "channels" in self.model_fields_set:
            _dict['channels'] = None

        # set to None if stocks (nullable) is None
        # and model_fields_set contains the field
        if self.stocks is None and "stocks" in self.model_fields_set:
            _dict['stocks'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BenzingaCompanyNewsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "title": obj.get("title"),
            "text": obj.get("text"),
            "images": obj.get("images"),
            "url": obj.get("url"),
            "symbols": obj.get("symbols"),
            "id": obj.get("id"),
            "author": obj.get("author"),
            "teaser": obj.get("teaser"),
            "channels": obj.get("channels"),
            "stocks": obj.get("stocks"),
            "tags": obj.get("tags"),
            "updated": obj.get("updated")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


