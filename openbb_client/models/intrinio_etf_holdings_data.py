# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.balance import Balance
from typing import Optional, Set
from typing_extensions import Self

class IntrinioEtfHoldingsData(BaseModel):
    """
    Intrinio ETF Holdings Data.
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    security_type: Optional[StrictStr] = None
    isin: Optional[StrictStr] = None
    ric: Optional[StrictStr] = None
    sedol: Optional[StrictStr] = None
    share_class_figi: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    maturity_date: Optional[date] = None
    contract_expiry_date: Optional[date] = None
    coupon: Optional[Union[StrictFloat, StrictInt]] = None
    balance: Optional[Balance] = None
    unit: Optional[StrictStr] = None
    units_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    face_value: Optional[Union[StrictFloat, StrictInt]] = None
    derivatives_value: Optional[Union[StrictFloat, StrictInt]] = None
    value: Optional[Union[StrictFloat, StrictInt]] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    updated: Optional[date] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "security_type", "isin", "ric", "sedol", "share_class_figi", "country", "maturity_date", "contract_expiry_date", "coupon", "balance", "unit", "units_per_share", "face_value", "derivatives_value", "value", "weight", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioEtfHoldingsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of balance
        if self.balance:
            _dict['balance'] = self.balance.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if security_type (nullable) is None
        # and model_fields_set contains the field
        if self.security_type is None and "security_type" in self.model_fields_set:
            _dict['security_type'] = None

        # set to None if isin (nullable) is None
        # and model_fields_set contains the field
        if self.isin is None and "isin" in self.model_fields_set:
            _dict['isin'] = None

        # set to None if ric (nullable) is None
        # and model_fields_set contains the field
        if self.ric is None and "ric" in self.model_fields_set:
            _dict['ric'] = None

        # set to None if sedol (nullable) is None
        # and model_fields_set contains the field
        if self.sedol is None and "sedol" in self.model_fields_set:
            _dict['sedol'] = None

        # set to None if share_class_figi (nullable) is None
        # and model_fields_set contains the field
        if self.share_class_figi is None and "share_class_figi" in self.model_fields_set:
            _dict['share_class_figi'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if maturity_date (nullable) is None
        # and model_fields_set contains the field
        if self.maturity_date is None and "maturity_date" in self.model_fields_set:
            _dict['maturity_date'] = None

        # set to None if contract_expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.contract_expiry_date is None and "contract_expiry_date" in self.model_fields_set:
            _dict['contract_expiry_date'] = None

        # set to None if coupon (nullable) is None
        # and model_fields_set contains the field
        if self.coupon is None and "coupon" in self.model_fields_set:
            _dict['coupon'] = None

        # set to None if balance (nullable) is None
        # and model_fields_set contains the field
        if self.balance is None and "balance" in self.model_fields_set:
            _dict['balance'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if units_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.units_per_share is None and "units_per_share" in self.model_fields_set:
            _dict['units_per_share'] = None

        # set to None if face_value (nullable) is None
        # and model_fields_set contains the field
        if self.face_value is None and "face_value" in self.model_fields_set:
            _dict['face_value'] = None

        # set to None if derivatives_value (nullable) is None
        # and model_fields_set contains the field
        if self.derivatives_value is None and "derivatives_value" in self.model_fields_set:
            _dict['derivatives_value'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioEtfHoldingsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "security_type": obj.get("security_type"),
            "isin": obj.get("isin"),
            "ric": obj.get("ric"),
            "sedol": obj.get("sedol"),
            "share_class_figi": obj.get("share_class_figi"),
            "country": obj.get("country"),
            "maturity_date": obj.get("maturity_date"),
            "contract_expiry_date": obj.get("contract_expiry_date"),
            "coupon": obj.get("coupon"),
            "balance": Balance.from_dict(obj["balance"]) if obj.get("balance") is not None else None,
            "unit": obj.get("unit"),
            "units_per_share": obj.get("units_per_share"),
            "face_value": obj.get("face_value"),
            "derivatives_value": obj.get("derivatives_value"),
            "value": obj.get("value"),
            "weight": obj.get("weight"),
            "updated": obj.get("updated")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


