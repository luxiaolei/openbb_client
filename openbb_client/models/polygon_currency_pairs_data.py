# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PolygonCurrencyPairsData(BaseModel):
    """
    Polygon Currency Available Pairs Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    name: Optional[StrictStr] = None
    currency_symbol: Optional[StrictStr] = None
    base_currency_symbol: Optional[StrictStr] = None
    base_currency_name: Optional[StrictStr] = None
    market: StrictStr = Field(description="Name of the trading market. Always 'fx'.")
    locale: StrictStr = Field(description="Locale of the currency pair.")
    last_updated: Optional[date] = None
    delisted: Optional[date] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "currency_symbol", "base_currency_symbol", "base_currency_name", "market", "locale", "last_updated", "delisted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolygonCurrencyPairsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if currency_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.currency_symbol is None and "currency_symbol" in self.model_fields_set:
            _dict['currency_symbol'] = None

        # set to None if base_currency_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.base_currency_symbol is None and "base_currency_symbol" in self.model_fields_set:
            _dict['base_currency_symbol'] = None

        # set to None if base_currency_name (nullable) is None
        # and model_fields_set contains the field
        if self.base_currency_name is None and "base_currency_name" in self.model_fields_set:
            _dict['base_currency_name'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if delisted (nullable) is None
        # and model_fields_set contains the field
        if self.delisted is None and "delisted" in self.model_fields_set:
            _dict['delisted'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolygonCurrencyPairsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "currency_symbol": obj.get("currency_symbol"),
            "base_currency_symbol": obj.get("base_currency_symbol"),
            "base_currency_name": obj.get("base_currency_name"),
            "market": obj.get("market"),
            "locale": obj.get("locale"),
            "last_updated": obj.get("last_updated"),
            "delisted": obj.get("delisted")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


