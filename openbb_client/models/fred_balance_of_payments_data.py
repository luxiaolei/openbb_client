# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FredBalanceOfPaymentsData(BaseModel):
    """
    FRED Balance Of Payments Data.
    """ # noqa: E501
    period: Optional[date] = Field(default=None, description="The date representing the beginning of the reporting period.")
    balance_percent_of_gdp: Optional[Union[StrictFloat, StrictInt]] = None
    balance_total: Optional[Union[StrictFloat, StrictInt]] = None
    balance_total_services: Optional[Union[StrictFloat, StrictInt]] = None
    balance_total_secondary_income: Optional[Union[StrictFloat, StrictInt]] = None
    balance_total_goods: Optional[Union[StrictFloat, StrictInt]] = None
    balance_total_primary_income: Optional[Union[StrictFloat, StrictInt]] = None
    credits_services_percent_of_goods_and_services: Optional[Union[StrictFloat, StrictInt]] = None
    credits_services_percent_of_current_account: Optional[Union[StrictFloat, StrictInt]] = None
    credits_total_services: Optional[Union[StrictFloat, StrictInt]] = None
    credits_total_goods: Optional[Union[StrictFloat, StrictInt]] = None
    credits_total_primary_income: Optional[Union[StrictFloat, StrictInt]] = None
    credits_total_secondary_income: Optional[Union[StrictFloat, StrictInt]] = None
    credits_total: Optional[Union[StrictFloat, StrictInt]] = None
    debits_services_percent_of_goods_and_services: Optional[Union[StrictFloat, StrictInt]] = None
    debits_services_percent_of_current_account: Optional[Union[StrictFloat, StrictInt]] = None
    debits_total_services: Optional[Union[StrictFloat, StrictInt]] = None
    debits_total_goods: Optional[Union[StrictFloat, StrictInt]] = None
    debits_total_primary_income: Optional[Union[StrictFloat, StrictInt]] = None
    debits_total: Optional[Union[StrictFloat, StrictInt]] = None
    debits_total_secondary_income: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period", "balance_percent_of_gdp", "balance_total", "balance_total_services", "balance_total_secondary_income", "balance_total_goods", "balance_total_primary_income", "credits_services_percent_of_goods_and_services", "credits_services_percent_of_current_account", "credits_total_services", "credits_total_goods", "credits_total_primary_income", "credits_total_secondary_income", "credits_total", "debits_services_percent_of_goods_and_services", "debits_services_percent_of_current_account", "debits_total_services", "debits_total_goods", "debits_total_primary_income", "debits_total", "debits_total_secondary_income"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FredBalanceOfPaymentsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if balance_percent_of_gdp (nullable) is None
        # and model_fields_set contains the field
        if self.balance_percent_of_gdp is None and "balance_percent_of_gdp" in self.model_fields_set:
            _dict['balance_percent_of_gdp'] = None

        # set to None if balance_total (nullable) is None
        # and model_fields_set contains the field
        if self.balance_total is None and "balance_total" in self.model_fields_set:
            _dict['balance_total'] = None

        # set to None if balance_total_services (nullable) is None
        # and model_fields_set contains the field
        if self.balance_total_services is None and "balance_total_services" in self.model_fields_set:
            _dict['balance_total_services'] = None

        # set to None if balance_total_secondary_income (nullable) is None
        # and model_fields_set contains the field
        if self.balance_total_secondary_income is None and "balance_total_secondary_income" in self.model_fields_set:
            _dict['balance_total_secondary_income'] = None

        # set to None if balance_total_goods (nullable) is None
        # and model_fields_set contains the field
        if self.balance_total_goods is None and "balance_total_goods" in self.model_fields_set:
            _dict['balance_total_goods'] = None

        # set to None if balance_total_primary_income (nullable) is None
        # and model_fields_set contains the field
        if self.balance_total_primary_income is None and "balance_total_primary_income" in self.model_fields_set:
            _dict['balance_total_primary_income'] = None

        # set to None if credits_services_percent_of_goods_and_services (nullable) is None
        # and model_fields_set contains the field
        if self.credits_services_percent_of_goods_and_services is None and "credits_services_percent_of_goods_and_services" in self.model_fields_set:
            _dict['credits_services_percent_of_goods_and_services'] = None

        # set to None if credits_services_percent_of_current_account (nullable) is None
        # and model_fields_set contains the field
        if self.credits_services_percent_of_current_account is None and "credits_services_percent_of_current_account" in self.model_fields_set:
            _dict['credits_services_percent_of_current_account'] = None

        # set to None if credits_total_services (nullable) is None
        # and model_fields_set contains the field
        if self.credits_total_services is None and "credits_total_services" in self.model_fields_set:
            _dict['credits_total_services'] = None

        # set to None if credits_total_goods (nullable) is None
        # and model_fields_set contains the field
        if self.credits_total_goods is None and "credits_total_goods" in self.model_fields_set:
            _dict['credits_total_goods'] = None

        # set to None if credits_total_primary_income (nullable) is None
        # and model_fields_set contains the field
        if self.credits_total_primary_income is None and "credits_total_primary_income" in self.model_fields_set:
            _dict['credits_total_primary_income'] = None

        # set to None if credits_total_secondary_income (nullable) is None
        # and model_fields_set contains the field
        if self.credits_total_secondary_income is None and "credits_total_secondary_income" in self.model_fields_set:
            _dict['credits_total_secondary_income'] = None

        # set to None if credits_total (nullable) is None
        # and model_fields_set contains the field
        if self.credits_total is None and "credits_total" in self.model_fields_set:
            _dict['credits_total'] = None

        # set to None if debits_services_percent_of_goods_and_services (nullable) is None
        # and model_fields_set contains the field
        if self.debits_services_percent_of_goods_and_services is None and "debits_services_percent_of_goods_and_services" in self.model_fields_set:
            _dict['debits_services_percent_of_goods_and_services'] = None

        # set to None if debits_services_percent_of_current_account (nullable) is None
        # and model_fields_set contains the field
        if self.debits_services_percent_of_current_account is None and "debits_services_percent_of_current_account" in self.model_fields_set:
            _dict['debits_services_percent_of_current_account'] = None

        # set to None if debits_total_services (nullable) is None
        # and model_fields_set contains the field
        if self.debits_total_services is None and "debits_total_services" in self.model_fields_set:
            _dict['debits_total_services'] = None

        # set to None if debits_total_goods (nullable) is None
        # and model_fields_set contains the field
        if self.debits_total_goods is None and "debits_total_goods" in self.model_fields_set:
            _dict['debits_total_goods'] = None

        # set to None if debits_total_primary_income (nullable) is None
        # and model_fields_set contains the field
        if self.debits_total_primary_income is None and "debits_total_primary_income" in self.model_fields_set:
            _dict['debits_total_primary_income'] = None

        # set to None if debits_total (nullable) is None
        # and model_fields_set contains the field
        if self.debits_total is None and "debits_total" in self.model_fields_set:
            _dict['debits_total'] = None

        # set to None if debits_total_secondary_income (nullable) is None
        # and model_fields_set contains the field
        if self.debits_total_secondary_income is None and "debits_total_secondary_income" in self.model_fields_set:
            _dict['debits_total_secondary_income'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FredBalanceOfPaymentsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period": obj.get("period"),
            "balance_percent_of_gdp": obj.get("balance_percent_of_gdp"),
            "balance_total": obj.get("balance_total"),
            "balance_total_services": obj.get("balance_total_services"),
            "balance_total_secondary_income": obj.get("balance_total_secondary_income"),
            "balance_total_goods": obj.get("balance_total_goods"),
            "balance_total_primary_income": obj.get("balance_total_primary_income"),
            "credits_services_percent_of_goods_and_services": obj.get("credits_services_percent_of_goods_and_services"),
            "credits_services_percent_of_current_account": obj.get("credits_services_percent_of_current_account"),
            "credits_total_services": obj.get("credits_total_services"),
            "credits_total_goods": obj.get("credits_total_goods"),
            "credits_total_primary_income": obj.get("credits_total_primary_income"),
            "credits_total_secondary_income": obj.get("credits_total_secondary_income"),
            "credits_total": obj.get("credits_total"),
            "debits_services_percent_of_goods_and_services": obj.get("debits_services_percent_of_goods_and_services"),
            "debits_services_percent_of_current_account": obj.get("debits_services_percent_of_current_account"),
            "debits_total_services": obj.get("debits_total_services"),
            "debits_total_goods": obj.get("debits_total_goods"),
            "debits_total_primary_income": obj.get("debits_total_primary_income"),
            "debits_total": obj.get("debits_total"),
            "debits_total_secondary_income": obj.get("debits_total_secondary_income")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


