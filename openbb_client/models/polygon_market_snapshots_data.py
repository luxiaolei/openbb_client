# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PolygonMarketSnapshotsData(BaseModel):
    """
    Polygon Market Snapshots Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    open: Optional[Union[StrictFloat, StrictInt]] = None
    high: Optional[Union[StrictFloat, StrictInt]] = None
    low: Optional[Union[StrictFloat, StrictInt]] = None
    close: Optional[Union[StrictFloat, StrictInt]] = None
    volume: Optional[StrictInt] = None
    prev_close: Optional[Union[StrictFloat, StrictInt]] = None
    change: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent: Optional[Union[StrictFloat, StrictInt]] = None
    vwap: Optional[Union[StrictFloat, StrictInt]] = None
    prev_open: Optional[Union[StrictFloat, StrictInt]] = None
    prev_high: Optional[Union[StrictFloat, StrictInt]] = None
    prev_low: Optional[Union[StrictFloat, StrictInt]] = None
    prev_volume: Optional[Union[StrictFloat, StrictInt]] = None
    prev_vwap: Optional[Union[StrictFloat, StrictInt]] = None
    last_updated: Optional[datetime]
    bid: Optional[Union[StrictFloat, StrictInt]] = None
    bid_size: Optional[StrictInt] = None
    ask_size: Optional[StrictInt] = None
    ask: Optional[Union[StrictFloat, StrictInt]] = None
    quote_timestamp: Optional[datetime] = None
    last_trade_price: Optional[Union[StrictFloat, StrictInt]] = None
    last_trade_size: Optional[StrictInt] = None
    last_trade_conditions: Optional[List[StrictInt]] = None
    last_trade_exchange: Optional[StrictInt] = None
    last_trade_timestamp: Optional[datetime] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "open", "high", "low", "close", "volume", "prev_close", "change", "change_percent", "vwap", "prev_open", "prev_high", "prev_low", "prev_volume", "prev_vwap", "last_updated", "bid", "bid_size", "ask_size", "ask", "quote_timestamp", "last_trade_price", "last_trade_size", "last_trade_conditions", "last_trade_exchange", "last_trade_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolygonMarketSnapshotsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if open (nullable) is None
        # and model_fields_set contains the field
        if self.open is None and "open" in self.model_fields_set:
            _dict['open'] = None

        # set to None if high (nullable) is None
        # and model_fields_set contains the field
        if self.high is None and "high" in self.model_fields_set:
            _dict['high'] = None

        # set to None if low (nullable) is None
        # and model_fields_set contains the field
        if self.low is None and "low" in self.model_fields_set:
            _dict['low'] = None

        # set to None if close (nullable) is None
        # and model_fields_set contains the field
        if self.close is None and "close" in self.model_fields_set:
            _dict['close'] = None

        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if prev_close (nullable) is None
        # and model_fields_set contains the field
        if self.prev_close is None and "prev_close" in self.model_fields_set:
            _dict['prev_close'] = None

        # set to None if change (nullable) is None
        # and model_fields_set contains the field
        if self.change is None and "change" in self.model_fields_set:
            _dict['change'] = None

        # set to None if change_percent (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent is None and "change_percent" in self.model_fields_set:
            _dict['change_percent'] = None

        # set to None if vwap (nullable) is None
        # and model_fields_set contains the field
        if self.vwap is None and "vwap" in self.model_fields_set:
            _dict['vwap'] = None

        # set to None if prev_open (nullable) is None
        # and model_fields_set contains the field
        if self.prev_open is None and "prev_open" in self.model_fields_set:
            _dict['prev_open'] = None

        # set to None if prev_high (nullable) is None
        # and model_fields_set contains the field
        if self.prev_high is None and "prev_high" in self.model_fields_set:
            _dict['prev_high'] = None

        # set to None if prev_low (nullable) is None
        # and model_fields_set contains the field
        if self.prev_low is None and "prev_low" in self.model_fields_set:
            _dict['prev_low'] = None

        # set to None if prev_volume (nullable) is None
        # and model_fields_set contains the field
        if self.prev_volume is None and "prev_volume" in self.model_fields_set:
            _dict['prev_volume'] = None

        # set to None if prev_vwap (nullable) is None
        # and model_fields_set contains the field
        if self.prev_vwap is None and "prev_vwap" in self.model_fields_set:
            _dict['prev_vwap'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if bid (nullable) is None
        # and model_fields_set contains the field
        if self.bid is None and "bid" in self.model_fields_set:
            _dict['bid'] = None

        # set to None if bid_size (nullable) is None
        # and model_fields_set contains the field
        if self.bid_size is None and "bid_size" in self.model_fields_set:
            _dict['bid_size'] = None

        # set to None if ask_size (nullable) is None
        # and model_fields_set contains the field
        if self.ask_size is None and "ask_size" in self.model_fields_set:
            _dict['ask_size'] = None

        # set to None if ask (nullable) is None
        # and model_fields_set contains the field
        if self.ask is None and "ask" in self.model_fields_set:
            _dict['ask'] = None

        # set to None if quote_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.quote_timestamp is None and "quote_timestamp" in self.model_fields_set:
            _dict['quote_timestamp'] = None

        # set to None if last_trade_price (nullable) is None
        # and model_fields_set contains the field
        if self.last_trade_price is None and "last_trade_price" in self.model_fields_set:
            _dict['last_trade_price'] = None

        # set to None if last_trade_size (nullable) is None
        # and model_fields_set contains the field
        if self.last_trade_size is None and "last_trade_size" in self.model_fields_set:
            _dict['last_trade_size'] = None

        # set to None if last_trade_conditions (nullable) is None
        # and model_fields_set contains the field
        if self.last_trade_conditions is None and "last_trade_conditions" in self.model_fields_set:
            _dict['last_trade_conditions'] = None

        # set to None if last_trade_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.last_trade_exchange is None and "last_trade_exchange" in self.model_fields_set:
            _dict['last_trade_exchange'] = None

        # set to None if last_trade_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_trade_timestamp is None and "last_trade_timestamp" in self.model_fields_set:
            _dict['last_trade_timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolygonMarketSnapshotsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "open": obj.get("open"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "close": obj.get("close"),
            "volume": obj.get("volume"),
            "prev_close": obj.get("prev_close"),
            "change": obj.get("change"),
            "change_percent": obj.get("change_percent"),
            "vwap": obj.get("vwap"),
            "prev_open": obj.get("prev_open"),
            "prev_high": obj.get("prev_high"),
            "prev_low": obj.get("prev_low"),
            "prev_volume": obj.get("prev_volume"),
            "prev_vwap": obj.get("prev_vwap"),
            "last_updated": obj.get("last_updated"),
            "bid": obj.get("bid"),
            "bid_size": obj.get("bid_size"),
            "ask_size": obj.get("ask_size"),
            "ask": obj.get("ask"),
            "quote_timestamp": obj.get("quote_timestamp"),
            "last_trade_price": obj.get("last_trade_price"),
            "last_trade_size": obj.get("last_trade_size"),
            "last_trade_conditions": obj.get("last_trade_conditions"),
            "last_trade_exchange": obj.get("last_trade_exchange"),
            "last_trade_timestamp": obj.get("last_trade_timestamp")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


