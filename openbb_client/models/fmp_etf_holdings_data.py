# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.units import Units
from openbb_client.models.updated import Updated
from typing import Optional, Set
from typing_extensions import Self

class FMPEtfHoldingsData(BaseModel):
    """
    FMP ETF Holdings Data.
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    lei: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    cusip: Optional[StrictStr] = None
    isin: Optional[StrictStr] = None
    balance: Optional[StrictInt] = None
    units: Optional[Units] = None
    currency: Optional[StrictStr] = None
    value: Optional[Union[StrictFloat, StrictInt]] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    payoff_profile: Optional[StrictStr] = None
    asset_category: Optional[StrictStr] = None
    issuer_category: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    is_restricted: Optional[StrictStr] = None
    fair_value_level: Optional[StrictInt] = None
    is_cash_collateral: Optional[StrictStr] = None
    is_non_cash_collateral: Optional[StrictStr] = None
    is_loan_by_fund: Optional[StrictStr] = None
    cik: Optional[StrictStr] = None
    acceptance_datetime: Optional[StrictStr] = None
    updated: Optional[Updated] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "lei", "title", "cusip", "isin", "balance", "units", "currency", "value", "weight", "payoff_profile", "asset_category", "issuer_category", "country", "is_restricted", "fair_value_level", "is_cash_collateral", "is_non_cash_collateral", "is_loan_by_fund", "cik", "acceptance_datetime", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPEtfHoldingsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of units
        if self.units:
            _dict['units'] = self.units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated
        if self.updated:
            _dict['updated'] = self.updated.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if lei (nullable) is None
        # and model_fields_set contains the field
        if self.lei is None and "lei" in self.model_fields_set:
            _dict['lei'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if cusip (nullable) is None
        # and model_fields_set contains the field
        if self.cusip is None and "cusip" in self.model_fields_set:
            _dict['cusip'] = None

        # set to None if isin (nullable) is None
        # and model_fields_set contains the field
        if self.isin is None and "isin" in self.model_fields_set:
            _dict['isin'] = None

        # set to None if balance (nullable) is None
        # and model_fields_set contains the field
        if self.balance is None and "balance" in self.model_fields_set:
            _dict['balance'] = None

        # set to None if units (nullable) is None
        # and model_fields_set contains the field
        if self.units is None and "units" in self.model_fields_set:
            _dict['units'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        # set to None if payoff_profile (nullable) is None
        # and model_fields_set contains the field
        if self.payoff_profile is None and "payoff_profile" in self.model_fields_set:
            _dict['payoff_profile'] = None

        # set to None if asset_category (nullable) is None
        # and model_fields_set contains the field
        if self.asset_category is None and "asset_category" in self.model_fields_set:
            _dict['asset_category'] = None

        # set to None if issuer_category (nullable) is None
        # and model_fields_set contains the field
        if self.issuer_category is None and "issuer_category" in self.model_fields_set:
            _dict['issuer_category'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if is_restricted (nullable) is None
        # and model_fields_set contains the field
        if self.is_restricted is None and "is_restricted" in self.model_fields_set:
            _dict['is_restricted'] = None

        # set to None if fair_value_level (nullable) is None
        # and model_fields_set contains the field
        if self.fair_value_level is None and "fair_value_level" in self.model_fields_set:
            _dict['fair_value_level'] = None

        # set to None if is_cash_collateral (nullable) is None
        # and model_fields_set contains the field
        if self.is_cash_collateral is None and "is_cash_collateral" in self.model_fields_set:
            _dict['is_cash_collateral'] = None

        # set to None if is_non_cash_collateral (nullable) is None
        # and model_fields_set contains the field
        if self.is_non_cash_collateral is None and "is_non_cash_collateral" in self.model_fields_set:
            _dict['is_non_cash_collateral'] = None

        # set to None if is_loan_by_fund (nullable) is None
        # and model_fields_set contains the field
        if self.is_loan_by_fund is None and "is_loan_by_fund" in self.model_fields_set:
            _dict['is_loan_by_fund'] = None

        # set to None if cik (nullable) is None
        # and model_fields_set contains the field
        if self.cik is None and "cik" in self.model_fields_set:
            _dict['cik'] = None

        # set to None if acceptance_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.acceptance_datetime is None and "acceptance_datetime" in self.model_fields_set:
            _dict['acceptance_datetime'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPEtfHoldingsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "lei": obj.get("lei"),
            "title": obj.get("title"),
            "cusip": obj.get("cusip"),
            "isin": obj.get("isin"),
            "balance": obj.get("balance"),
            "units": Units.from_dict(obj["units"]) if obj.get("units") is not None else None,
            "currency": obj.get("currency"),
            "value": obj.get("value"),
            "weight": obj.get("weight"),
            "payoff_profile": obj.get("payoff_profile"),
            "asset_category": obj.get("asset_category"),
            "issuer_category": obj.get("issuer_category"),
            "country": obj.get("country"),
            "is_restricted": obj.get("is_restricted"),
            "fair_value_level": obj.get("fair_value_level"),
            "is_cash_collateral": obj.get("is_cash_collateral"),
            "is_non_cash_collateral": obj.get("is_non_cash_collateral"),
            "is_loan_by_fund": obj.get("is_loan_by_fund"),
            "cik": obj.get("cik"),
            "acceptance_datetime": obj.get("acceptance_datetime"),
            "updated": Updated.from_dict(obj["updated"]) if obj.get("updated") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


