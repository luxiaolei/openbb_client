# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.intrinio_company import IntrinioCompany
from openbb_client.models.intrinio_security import IntrinioSecurity
from typing import Optional, Set
from typing_extensions import Self

class IntrinioCalendarIpoData(BaseModel):
    """
    Intrinio IPO Calendar Data.
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    ipo_date: Optional[date] = None
    status: Optional[StrictStr] = None
    exchange: Optional[StrictStr] = None
    offer_amount: Optional[Union[StrictFloat, StrictInt]] = None
    share_price: Optional[Union[StrictFloat, StrictInt]] = None
    share_price_lowest: Optional[Union[StrictFloat, StrictInt]] = None
    share_price_highest: Optional[Union[StrictFloat, StrictInt]] = None
    share_count: Optional[StrictInt] = None
    share_count_lowest: Optional[StrictInt] = None
    share_count_highest: Optional[StrictInt] = None
    announcement_url: Optional[StrictStr] = None
    sec_report_url: Optional[StrictStr] = None
    open_price: Optional[Union[StrictFloat, StrictInt]] = None
    close_price: Optional[Union[StrictFloat, StrictInt]] = None
    volume: Optional[StrictInt] = None
    day_change: Optional[Union[StrictFloat, StrictInt]] = None
    week_change: Optional[Union[StrictFloat, StrictInt]] = None
    month_change: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictStr] = None
    company: Optional[IntrinioCompany] = None
    security: Optional[IntrinioSecurity] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "ipo_date", "status", "exchange", "offer_amount", "share_price", "share_price_lowest", "share_price_highest", "share_count", "share_count_lowest", "share_count_highest", "announcement_url", "sec_report_url", "open_price", "close_price", "volume", "day_change", "week_change", "month_change", "id", "company", "security"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['upcoming', 'priced', 'withdrawn']):
            raise ValueError("must be one of enum values ('upcoming', 'priced', 'withdrawn')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioCalendarIpoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security
        if self.security:
            _dict['security'] = self.security.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if ipo_date (nullable) is None
        # and model_fields_set contains the field
        if self.ipo_date is None and "ipo_date" in self.model_fields_set:
            _dict['ipo_date'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        # set to None if offer_amount (nullable) is None
        # and model_fields_set contains the field
        if self.offer_amount is None and "offer_amount" in self.model_fields_set:
            _dict['offer_amount'] = None

        # set to None if share_price (nullable) is None
        # and model_fields_set contains the field
        if self.share_price is None and "share_price" in self.model_fields_set:
            _dict['share_price'] = None

        # set to None if share_price_lowest (nullable) is None
        # and model_fields_set contains the field
        if self.share_price_lowest is None and "share_price_lowest" in self.model_fields_set:
            _dict['share_price_lowest'] = None

        # set to None if share_price_highest (nullable) is None
        # and model_fields_set contains the field
        if self.share_price_highest is None and "share_price_highest" in self.model_fields_set:
            _dict['share_price_highest'] = None

        # set to None if share_count (nullable) is None
        # and model_fields_set contains the field
        if self.share_count is None and "share_count" in self.model_fields_set:
            _dict['share_count'] = None

        # set to None if share_count_lowest (nullable) is None
        # and model_fields_set contains the field
        if self.share_count_lowest is None and "share_count_lowest" in self.model_fields_set:
            _dict['share_count_lowest'] = None

        # set to None if share_count_highest (nullable) is None
        # and model_fields_set contains the field
        if self.share_count_highest is None and "share_count_highest" in self.model_fields_set:
            _dict['share_count_highest'] = None

        # set to None if announcement_url (nullable) is None
        # and model_fields_set contains the field
        if self.announcement_url is None and "announcement_url" in self.model_fields_set:
            _dict['announcement_url'] = None

        # set to None if sec_report_url (nullable) is None
        # and model_fields_set contains the field
        if self.sec_report_url is None and "sec_report_url" in self.model_fields_set:
            _dict['sec_report_url'] = None

        # set to None if open_price (nullable) is None
        # and model_fields_set contains the field
        if self.open_price is None and "open_price" in self.model_fields_set:
            _dict['open_price'] = None

        # set to None if close_price (nullable) is None
        # and model_fields_set contains the field
        if self.close_price is None and "close_price" in self.model_fields_set:
            _dict['close_price'] = None

        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if day_change (nullable) is None
        # and model_fields_set contains the field
        if self.day_change is None and "day_change" in self.model_fields_set:
            _dict['day_change'] = None

        # set to None if week_change (nullable) is None
        # and model_fields_set contains the field
        if self.week_change is None and "week_change" in self.model_fields_set:
            _dict['week_change'] = None

        # set to None if month_change (nullable) is None
        # and model_fields_set contains the field
        if self.month_change is None and "month_change" in self.model_fields_set:
            _dict['month_change'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if company (nullable) is None
        # and model_fields_set contains the field
        if self.company is None and "company" in self.model_fields_set:
            _dict['company'] = None

        # set to None if security (nullable) is None
        # and model_fields_set contains the field
        if self.security is None and "security" in self.model_fields_set:
            _dict['security'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioCalendarIpoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "ipo_date": obj.get("ipo_date"),
            "status": obj.get("status"),
            "exchange": obj.get("exchange"),
            "offer_amount": obj.get("offer_amount"),
            "share_price": obj.get("share_price"),
            "share_price_lowest": obj.get("share_price_lowest"),
            "share_price_highest": obj.get("share_price_highest"),
            "share_count": obj.get("share_count"),
            "share_count_lowest": obj.get("share_count_lowest"),
            "share_count_highest": obj.get("share_count_highest"),
            "announcement_url": obj.get("announcement_url"),
            "sec_report_url": obj.get("sec_report_url"),
            "open_price": obj.get("open_price"),
            "close_price": obj.get("close_price"),
            "volume": obj.get("volume"),
            "day_change": obj.get("day_change"),
            "week_change": obj.get("week_change"),
            "month_change": obj.get("month_change"),
            "id": obj.get("id"),
            "company": IntrinioCompany.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "security": IntrinioSecurity.from_dict(obj["security"]) if obj.get("security") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


