# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.delta import Delta
from openbb_client.models.rate_tenor_unit_pmnt import RateTenorUnitPmnt
from openbb_client.models.rate_tenor_unit_rec import RateTenorUnitRec
from openbb_client.models.reset_date_unit_pmnt import ResetDateUnitPmnt
from openbb_client.models.reset_date_unit_rec import ResetDateUnitRec
from openbb_client.models.units1 import Units1
from typing import Optional, Set
from typing_extensions import Self

class SecEtfHoldingsData(BaseModel):
    """
    SEC ETF Holdings Data.
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    lei: Optional[StrictStr] = None
    cusip: Optional[StrictStr] = None
    isin: Optional[StrictStr] = None
    other_id: Optional[StrictStr] = None
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    value: Optional[Union[StrictFloat, StrictInt]] = None
    payoff_profile: Optional[StrictStr] = None
    units: Optional[Units1] = None
    currency: Optional[StrictStr] = None
    asset_category: Optional[StrictStr] = None
    issuer_category: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    is_restricted: Optional[StrictStr] = None
    fair_value_level: Optional[StrictInt] = None
    is_cash_collateral: Optional[StrictStr] = None
    is_non_cash_collateral: Optional[StrictStr] = None
    is_loan_by_fund: Optional[StrictStr] = None
    loan_value: Optional[Union[StrictFloat, StrictInt]] = None
    issuer_conditional: Optional[StrictStr] = None
    asset_conditional: Optional[StrictStr] = None
    maturity_date: Optional[date] = None
    coupon_kind: Optional[StrictStr] = None
    rate_type: Optional[StrictStr] = None
    annualized_return: Optional[Union[StrictFloat, StrictInt]] = None
    is_default: Optional[StrictStr] = None
    in_arrears: Optional[StrictStr] = None
    is_paid_kind: Optional[StrictStr] = None
    derivative_category: Optional[StrictStr] = None
    counterparty: Optional[StrictStr] = None
    underlying_name: Optional[StrictStr] = None
    option_type: Optional[StrictStr] = None
    derivative_payoff: Optional[StrictStr] = None
    expiry_date: Optional[date] = None
    exercise_price: Optional[Union[StrictFloat, StrictInt]] = None
    exercise_currency: Optional[StrictStr] = None
    shares_per_contract: Optional[Union[StrictFloat, StrictInt]] = None
    delta: Optional[Delta] = None
    rate_type_rec: Optional[StrictStr] = None
    receive_currency: Optional[StrictStr] = None
    upfront_receive: Optional[Union[StrictFloat, StrictInt]] = None
    floating_rate_index_rec: Optional[StrictStr] = None
    floating_rate_spread_rec: Optional[Union[StrictFloat, StrictInt]] = None
    rate_tenor_rec: Optional[StrictStr] = None
    rate_tenor_unit_rec: Optional[RateTenorUnitRec] = None
    reset_date_rec: Optional[StrictStr] = None
    reset_date_unit_rec: Optional[ResetDateUnitRec] = None
    rate_type_pmnt: Optional[StrictStr] = None
    payment_currency: Optional[StrictStr] = None
    upfront_payment: Optional[Union[StrictFloat, StrictInt]] = None
    floating_rate_index_pmnt: Optional[StrictStr] = None
    floating_rate_spread_pmnt: Optional[Union[StrictFloat, StrictInt]] = None
    rate_tenor_pmnt: Optional[StrictStr] = None
    rate_tenor_unit_pmnt: Optional[RateTenorUnitPmnt] = None
    reset_date_pmnt: Optional[StrictStr] = None
    reset_date_unit_pmnt: Optional[ResetDateUnitPmnt] = None
    repo_type: Optional[StrictStr] = None
    is_cleared: Optional[StrictStr] = None
    is_tri_party: Optional[StrictStr] = None
    principal_amount: Optional[Union[StrictFloat, StrictInt]] = None
    principal_currency: Optional[StrictStr] = None
    collateral_type: Optional[StrictStr] = None
    collateral_amount: Optional[Union[StrictFloat, StrictInt]] = None
    collateral_currency: Optional[StrictStr] = None
    exchange_currency: Optional[StrictStr] = None
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = None
    currency_sold: Optional[StrictStr] = None
    currency_amount_sold: Optional[Union[StrictFloat, StrictInt]] = None
    currency_bought: Optional[StrictStr] = None
    currency_amount_bought: Optional[Union[StrictFloat, StrictInt]] = None
    notional_amount: Optional[Union[StrictFloat, StrictInt]] = None
    notional_currency: Optional[StrictStr] = None
    unrealized_gain: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "lei", "cusip", "isin", "other_id", "balance", "weight", "value", "payoff_profile", "units", "currency", "asset_category", "issuer_category", "country", "is_restricted", "fair_value_level", "is_cash_collateral", "is_non_cash_collateral", "is_loan_by_fund", "loan_value", "issuer_conditional", "asset_conditional", "maturity_date", "coupon_kind", "rate_type", "annualized_return", "is_default", "in_arrears", "is_paid_kind", "derivative_category", "counterparty", "underlying_name", "option_type", "derivative_payoff", "expiry_date", "exercise_price", "exercise_currency", "shares_per_contract", "delta", "rate_type_rec", "receive_currency", "upfront_receive", "floating_rate_index_rec", "floating_rate_spread_rec", "rate_tenor_rec", "rate_tenor_unit_rec", "reset_date_rec", "reset_date_unit_rec", "rate_type_pmnt", "payment_currency", "upfront_payment", "floating_rate_index_pmnt", "floating_rate_spread_pmnt", "rate_tenor_pmnt", "rate_tenor_unit_pmnt", "reset_date_pmnt", "reset_date_unit_pmnt", "repo_type", "is_cleared", "is_tri_party", "principal_amount", "principal_currency", "collateral_type", "collateral_amount", "collateral_currency", "exchange_currency", "exchange_rate", "currency_sold", "currency_amount_sold", "currency_bought", "currency_amount_bought", "notional_amount", "notional_currency", "unrealized_gain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecEtfHoldingsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of units
        if self.units:
            _dict['units'] = self.units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delta
        if self.delta:
            _dict['delta'] = self.delta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rate_tenor_unit_rec
        if self.rate_tenor_unit_rec:
            _dict['rate_tenor_unit_rec'] = self.rate_tenor_unit_rec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reset_date_unit_rec
        if self.reset_date_unit_rec:
            _dict['reset_date_unit_rec'] = self.reset_date_unit_rec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rate_tenor_unit_pmnt
        if self.rate_tenor_unit_pmnt:
            _dict['rate_tenor_unit_pmnt'] = self.rate_tenor_unit_pmnt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reset_date_unit_pmnt
        if self.reset_date_unit_pmnt:
            _dict['reset_date_unit_pmnt'] = self.reset_date_unit_pmnt.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if lei (nullable) is None
        # and model_fields_set contains the field
        if self.lei is None and "lei" in self.model_fields_set:
            _dict['lei'] = None

        # set to None if cusip (nullable) is None
        # and model_fields_set contains the field
        if self.cusip is None and "cusip" in self.model_fields_set:
            _dict['cusip'] = None

        # set to None if isin (nullable) is None
        # and model_fields_set contains the field
        if self.isin is None and "isin" in self.model_fields_set:
            _dict['isin'] = None

        # set to None if other_id (nullable) is None
        # and model_fields_set contains the field
        if self.other_id is None and "other_id" in self.model_fields_set:
            _dict['other_id'] = None

        # set to None if balance (nullable) is None
        # and model_fields_set contains the field
        if self.balance is None and "balance" in self.model_fields_set:
            _dict['balance'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if payoff_profile (nullable) is None
        # and model_fields_set contains the field
        if self.payoff_profile is None and "payoff_profile" in self.model_fields_set:
            _dict['payoff_profile'] = None

        # set to None if units (nullable) is None
        # and model_fields_set contains the field
        if self.units is None and "units" in self.model_fields_set:
            _dict['units'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if asset_category (nullable) is None
        # and model_fields_set contains the field
        if self.asset_category is None and "asset_category" in self.model_fields_set:
            _dict['asset_category'] = None

        # set to None if issuer_category (nullable) is None
        # and model_fields_set contains the field
        if self.issuer_category is None and "issuer_category" in self.model_fields_set:
            _dict['issuer_category'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if is_restricted (nullable) is None
        # and model_fields_set contains the field
        if self.is_restricted is None and "is_restricted" in self.model_fields_set:
            _dict['is_restricted'] = None

        # set to None if fair_value_level (nullable) is None
        # and model_fields_set contains the field
        if self.fair_value_level is None and "fair_value_level" in self.model_fields_set:
            _dict['fair_value_level'] = None

        # set to None if is_cash_collateral (nullable) is None
        # and model_fields_set contains the field
        if self.is_cash_collateral is None and "is_cash_collateral" in self.model_fields_set:
            _dict['is_cash_collateral'] = None

        # set to None if is_non_cash_collateral (nullable) is None
        # and model_fields_set contains the field
        if self.is_non_cash_collateral is None and "is_non_cash_collateral" in self.model_fields_set:
            _dict['is_non_cash_collateral'] = None

        # set to None if is_loan_by_fund (nullable) is None
        # and model_fields_set contains the field
        if self.is_loan_by_fund is None and "is_loan_by_fund" in self.model_fields_set:
            _dict['is_loan_by_fund'] = None

        # set to None if loan_value (nullable) is None
        # and model_fields_set contains the field
        if self.loan_value is None and "loan_value" in self.model_fields_set:
            _dict['loan_value'] = None

        # set to None if issuer_conditional (nullable) is None
        # and model_fields_set contains the field
        if self.issuer_conditional is None and "issuer_conditional" in self.model_fields_set:
            _dict['issuer_conditional'] = None

        # set to None if asset_conditional (nullable) is None
        # and model_fields_set contains the field
        if self.asset_conditional is None and "asset_conditional" in self.model_fields_set:
            _dict['asset_conditional'] = None

        # set to None if maturity_date (nullable) is None
        # and model_fields_set contains the field
        if self.maturity_date is None and "maturity_date" in self.model_fields_set:
            _dict['maturity_date'] = None

        # set to None if coupon_kind (nullable) is None
        # and model_fields_set contains the field
        if self.coupon_kind is None and "coupon_kind" in self.model_fields_set:
            _dict['coupon_kind'] = None

        # set to None if rate_type (nullable) is None
        # and model_fields_set contains the field
        if self.rate_type is None and "rate_type" in self.model_fields_set:
            _dict['rate_type'] = None

        # set to None if annualized_return (nullable) is None
        # and model_fields_set contains the field
        if self.annualized_return is None and "annualized_return" in self.model_fields_set:
            _dict['annualized_return'] = None

        # set to None if is_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_default is None and "is_default" in self.model_fields_set:
            _dict['is_default'] = None

        # set to None if in_arrears (nullable) is None
        # and model_fields_set contains the field
        if self.in_arrears is None and "in_arrears" in self.model_fields_set:
            _dict['in_arrears'] = None

        # set to None if is_paid_kind (nullable) is None
        # and model_fields_set contains the field
        if self.is_paid_kind is None and "is_paid_kind" in self.model_fields_set:
            _dict['is_paid_kind'] = None

        # set to None if derivative_category (nullable) is None
        # and model_fields_set contains the field
        if self.derivative_category is None and "derivative_category" in self.model_fields_set:
            _dict['derivative_category'] = None

        # set to None if counterparty (nullable) is None
        # and model_fields_set contains the field
        if self.counterparty is None and "counterparty" in self.model_fields_set:
            _dict['counterparty'] = None

        # set to None if underlying_name (nullable) is None
        # and model_fields_set contains the field
        if self.underlying_name is None and "underlying_name" in self.model_fields_set:
            _dict['underlying_name'] = None

        # set to None if option_type (nullable) is None
        # and model_fields_set contains the field
        if self.option_type is None and "option_type" in self.model_fields_set:
            _dict['option_type'] = None

        # set to None if derivative_payoff (nullable) is None
        # and model_fields_set contains the field
        if self.derivative_payoff is None and "derivative_payoff" in self.model_fields_set:
            _dict['derivative_payoff'] = None

        # set to None if expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_date is None and "expiry_date" in self.model_fields_set:
            _dict['expiry_date'] = None

        # set to None if exercise_price (nullable) is None
        # and model_fields_set contains the field
        if self.exercise_price is None and "exercise_price" in self.model_fields_set:
            _dict['exercise_price'] = None

        # set to None if exercise_currency (nullable) is None
        # and model_fields_set contains the field
        if self.exercise_currency is None and "exercise_currency" in self.model_fields_set:
            _dict['exercise_currency'] = None

        # set to None if shares_per_contract (nullable) is None
        # and model_fields_set contains the field
        if self.shares_per_contract is None and "shares_per_contract" in self.model_fields_set:
            _dict['shares_per_contract'] = None

        # set to None if delta (nullable) is None
        # and model_fields_set contains the field
        if self.delta is None and "delta" in self.model_fields_set:
            _dict['delta'] = None

        # set to None if rate_type_rec (nullable) is None
        # and model_fields_set contains the field
        if self.rate_type_rec is None and "rate_type_rec" in self.model_fields_set:
            _dict['rate_type_rec'] = None

        # set to None if receive_currency (nullable) is None
        # and model_fields_set contains the field
        if self.receive_currency is None and "receive_currency" in self.model_fields_set:
            _dict['receive_currency'] = None

        # set to None if upfront_receive (nullable) is None
        # and model_fields_set contains the field
        if self.upfront_receive is None and "upfront_receive" in self.model_fields_set:
            _dict['upfront_receive'] = None

        # set to None if floating_rate_index_rec (nullable) is None
        # and model_fields_set contains the field
        if self.floating_rate_index_rec is None and "floating_rate_index_rec" in self.model_fields_set:
            _dict['floating_rate_index_rec'] = None

        # set to None if floating_rate_spread_rec (nullable) is None
        # and model_fields_set contains the field
        if self.floating_rate_spread_rec is None and "floating_rate_spread_rec" in self.model_fields_set:
            _dict['floating_rate_spread_rec'] = None

        # set to None if rate_tenor_rec (nullable) is None
        # and model_fields_set contains the field
        if self.rate_tenor_rec is None and "rate_tenor_rec" in self.model_fields_set:
            _dict['rate_tenor_rec'] = None

        # set to None if rate_tenor_unit_rec (nullable) is None
        # and model_fields_set contains the field
        if self.rate_tenor_unit_rec is None and "rate_tenor_unit_rec" in self.model_fields_set:
            _dict['rate_tenor_unit_rec'] = None

        # set to None if reset_date_rec (nullable) is None
        # and model_fields_set contains the field
        if self.reset_date_rec is None and "reset_date_rec" in self.model_fields_set:
            _dict['reset_date_rec'] = None

        # set to None if reset_date_unit_rec (nullable) is None
        # and model_fields_set contains the field
        if self.reset_date_unit_rec is None and "reset_date_unit_rec" in self.model_fields_set:
            _dict['reset_date_unit_rec'] = None

        # set to None if rate_type_pmnt (nullable) is None
        # and model_fields_set contains the field
        if self.rate_type_pmnt is None and "rate_type_pmnt" in self.model_fields_set:
            _dict['rate_type_pmnt'] = None

        # set to None if payment_currency (nullable) is None
        # and model_fields_set contains the field
        if self.payment_currency is None and "payment_currency" in self.model_fields_set:
            _dict['payment_currency'] = None

        # set to None if upfront_payment (nullable) is None
        # and model_fields_set contains the field
        if self.upfront_payment is None and "upfront_payment" in self.model_fields_set:
            _dict['upfront_payment'] = None

        # set to None if floating_rate_index_pmnt (nullable) is None
        # and model_fields_set contains the field
        if self.floating_rate_index_pmnt is None and "floating_rate_index_pmnt" in self.model_fields_set:
            _dict['floating_rate_index_pmnt'] = None

        # set to None if floating_rate_spread_pmnt (nullable) is None
        # and model_fields_set contains the field
        if self.floating_rate_spread_pmnt is None and "floating_rate_spread_pmnt" in self.model_fields_set:
            _dict['floating_rate_spread_pmnt'] = None

        # set to None if rate_tenor_pmnt (nullable) is None
        # and model_fields_set contains the field
        if self.rate_tenor_pmnt is None and "rate_tenor_pmnt" in self.model_fields_set:
            _dict['rate_tenor_pmnt'] = None

        # set to None if rate_tenor_unit_pmnt (nullable) is None
        # and model_fields_set contains the field
        if self.rate_tenor_unit_pmnt is None and "rate_tenor_unit_pmnt" in self.model_fields_set:
            _dict['rate_tenor_unit_pmnt'] = None

        # set to None if reset_date_pmnt (nullable) is None
        # and model_fields_set contains the field
        if self.reset_date_pmnt is None and "reset_date_pmnt" in self.model_fields_set:
            _dict['reset_date_pmnt'] = None

        # set to None if reset_date_unit_pmnt (nullable) is None
        # and model_fields_set contains the field
        if self.reset_date_unit_pmnt is None and "reset_date_unit_pmnt" in self.model_fields_set:
            _dict['reset_date_unit_pmnt'] = None

        # set to None if repo_type (nullable) is None
        # and model_fields_set contains the field
        if self.repo_type is None and "repo_type" in self.model_fields_set:
            _dict['repo_type'] = None

        # set to None if is_cleared (nullable) is None
        # and model_fields_set contains the field
        if self.is_cleared is None and "is_cleared" in self.model_fields_set:
            _dict['is_cleared'] = None

        # set to None if is_tri_party (nullable) is None
        # and model_fields_set contains the field
        if self.is_tri_party is None and "is_tri_party" in self.model_fields_set:
            _dict['is_tri_party'] = None

        # set to None if principal_amount (nullable) is None
        # and model_fields_set contains the field
        if self.principal_amount is None and "principal_amount" in self.model_fields_set:
            _dict['principal_amount'] = None

        # set to None if principal_currency (nullable) is None
        # and model_fields_set contains the field
        if self.principal_currency is None and "principal_currency" in self.model_fields_set:
            _dict['principal_currency'] = None

        # set to None if collateral_type (nullable) is None
        # and model_fields_set contains the field
        if self.collateral_type is None and "collateral_type" in self.model_fields_set:
            _dict['collateral_type'] = None

        # set to None if collateral_amount (nullable) is None
        # and model_fields_set contains the field
        if self.collateral_amount is None and "collateral_amount" in self.model_fields_set:
            _dict['collateral_amount'] = None

        # set to None if collateral_currency (nullable) is None
        # and model_fields_set contains the field
        if self.collateral_currency is None and "collateral_currency" in self.model_fields_set:
            _dict['collateral_currency'] = None

        # set to None if exchange_currency (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_currency is None and "exchange_currency" in self.model_fields_set:
            _dict['exchange_currency'] = None

        # set to None if exchange_rate (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_rate is None and "exchange_rate" in self.model_fields_set:
            _dict['exchange_rate'] = None

        # set to None if currency_sold (nullable) is None
        # and model_fields_set contains the field
        if self.currency_sold is None and "currency_sold" in self.model_fields_set:
            _dict['currency_sold'] = None

        # set to None if currency_amount_sold (nullable) is None
        # and model_fields_set contains the field
        if self.currency_amount_sold is None and "currency_amount_sold" in self.model_fields_set:
            _dict['currency_amount_sold'] = None

        # set to None if currency_bought (nullable) is None
        # and model_fields_set contains the field
        if self.currency_bought is None and "currency_bought" in self.model_fields_set:
            _dict['currency_bought'] = None

        # set to None if currency_amount_bought (nullable) is None
        # and model_fields_set contains the field
        if self.currency_amount_bought is None and "currency_amount_bought" in self.model_fields_set:
            _dict['currency_amount_bought'] = None

        # set to None if notional_amount (nullable) is None
        # and model_fields_set contains the field
        if self.notional_amount is None and "notional_amount" in self.model_fields_set:
            _dict['notional_amount'] = None

        # set to None if notional_currency (nullable) is None
        # and model_fields_set contains the field
        if self.notional_currency is None and "notional_currency" in self.model_fields_set:
            _dict['notional_currency'] = None

        # set to None if unrealized_gain (nullable) is None
        # and model_fields_set contains the field
        if self.unrealized_gain is None and "unrealized_gain" in self.model_fields_set:
            _dict['unrealized_gain'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecEtfHoldingsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "lei": obj.get("lei"),
            "cusip": obj.get("cusip"),
            "isin": obj.get("isin"),
            "other_id": obj.get("other_id"),
            "balance": obj.get("balance"),
            "weight": obj.get("weight"),
            "value": obj.get("value"),
            "payoff_profile": obj.get("payoff_profile"),
            "units": Units1.from_dict(obj["units"]) if obj.get("units") is not None else None,
            "currency": obj.get("currency"),
            "asset_category": obj.get("asset_category"),
            "issuer_category": obj.get("issuer_category"),
            "country": obj.get("country"),
            "is_restricted": obj.get("is_restricted"),
            "fair_value_level": obj.get("fair_value_level"),
            "is_cash_collateral": obj.get("is_cash_collateral"),
            "is_non_cash_collateral": obj.get("is_non_cash_collateral"),
            "is_loan_by_fund": obj.get("is_loan_by_fund"),
            "loan_value": obj.get("loan_value"),
            "issuer_conditional": obj.get("issuer_conditional"),
            "asset_conditional": obj.get("asset_conditional"),
            "maturity_date": obj.get("maturity_date"),
            "coupon_kind": obj.get("coupon_kind"),
            "rate_type": obj.get("rate_type"),
            "annualized_return": obj.get("annualized_return"),
            "is_default": obj.get("is_default"),
            "in_arrears": obj.get("in_arrears"),
            "is_paid_kind": obj.get("is_paid_kind"),
            "derivative_category": obj.get("derivative_category"),
            "counterparty": obj.get("counterparty"),
            "underlying_name": obj.get("underlying_name"),
            "option_type": obj.get("option_type"),
            "derivative_payoff": obj.get("derivative_payoff"),
            "expiry_date": obj.get("expiry_date"),
            "exercise_price": obj.get("exercise_price"),
            "exercise_currency": obj.get("exercise_currency"),
            "shares_per_contract": obj.get("shares_per_contract"),
            "delta": Delta.from_dict(obj["delta"]) if obj.get("delta") is not None else None,
            "rate_type_rec": obj.get("rate_type_rec"),
            "receive_currency": obj.get("receive_currency"),
            "upfront_receive": obj.get("upfront_receive"),
            "floating_rate_index_rec": obj.get("floating_rate_index_rec"),
            "floating_rate_spread_rec": obj.get("floating_rate_spread_rec"),
            "rate_tenor_rec": obj.get("rate_tenor_rec"),
            "rate_tenor_unit_rec": RateTenorUnitRec.from_dict(obj["rate_tenor_unit_rec"]) if obj.get("rate_tenor_unit_rec") is not None else None,
            "reset_date_rec": obj.get("reset_date_rec"),
            "reset_date_unit_rec": ResetDateUnitRec.from_dict(obj["reset_date_unit_rec"]) if obj.get("reset_date_unit_rec") is not None else None,
            "rate_type_pmnt": obj.get("rate_type_pmnt"),
            "payment_currency": obj.get("payment_currency"),
            "upfront_payment": obj.get("upfront_payment"),
            "floating_rate_index_pmnt": obj.get("floating_rate_index_pmnt"),
            "floating_rate_spread_pmnt": obj.get("floating_rate_spread_pmnt"),
            "rate_tenor_pmnt": obj.get("rate_tenor_pmnt"),
            "rate_tenor_unit_pmnt": RateTenorUnitPmnt.from_dict(obj["rate_tenor_unit_pmnt"]) if obj.get("rate_tenor_unit_pmnt") is not None else None,
            "reset_date_pmnt": obj.get("reset_date_pmnt"),
            "reset_date_unit_pmnt": ResetDateUnitPmnt.from_dict(obj["reset_date_unit_pmnt"]) if obj.get("reset_date_unit_pmnt") is not None else None,
            "repo_type": obj.get("repo_type"),
            "is_cleared": obj.get("is_cleared"),
            "is_tri_party": obj.get("is_tri_party"),
            "principal_amount": obj.get("principal_amount"),
            "principal_currency": obj.get("principal_currency"),
            "collateral_type": obj.get("collateral_type"),
            "collateral_amount": obj.get("collateral_amount"),
            "collateral_currency": obj.get("collateral_currency"),
            "exchange_currency": obj.get("exchange_currency"),
            "exchange_rate": obj.get("exchange_rate"),
            "currency_sold": obj.get("currency_sold"),
            "currency_amount_sold": obj.get("currency_amount_sold"),
            "currency_bought": obj.get("currency_bought"),
            "currency_amount_bought": obj.get("currency_amount_bought"),
            "notional_amount": obj.get("notional_amount"),
            "notional_currency": obj.get("notional_currency"),
            "unrealized_gain": obj.get("unrealized_gain")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


