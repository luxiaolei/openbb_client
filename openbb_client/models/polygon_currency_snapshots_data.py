# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PolygonCurrencySnapshotsData(BaseModel):
    """
    Polygon Currency Snapshots Data.
    """ # noqa: E501
    base_currency: StrictStr = Field(description="The base, or domestic, currency.")
    counter_currency: StrictStr = Field(description="The counter, or foreign, currency.")
    last_rate: Union[StrictFloat, StrictInt] = Field(description="The exchange rate, relative to the base currency. Rates are expressed as the amount of foreign currency received from selling one unit of the base currency, or the quantity of foreign currency required to purchase one unit of the domestic currency. To inverse the perspective, set the 'quote_type' parameter as 'direct'.")
    open: Optional[Union[StrictFloat, StrictInt]] = None
    high: Optional[Union[StrictFloat, StrictInt]] = None
    low: Optional[Union[StrictFloat, StrictInt]] = None
    close: Optional[Union[StrictFloat, StrictInt]] = None
    volume: Optional[StrictInt] = None
    prev_close: Optional[Union[StrictFloat, StrictInt]] = None
    vwap: Optional[Union[StrictFloat, StrictInt]] = None
    change: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent: Optional[Union[StrictFloat, StrictInt]] = None
    prev_open: Optional[Union[StrictFloat, StrictInt]] = None
    prev_high: Optional[Union[StrictFloat, StrictInt]] = None
    prev_low: Optional[Union[StrictFloat, StrictInt]] = None
    prev_volume: Optional[Union[StrictFloat, StrictInt]] = None
    prev_vwap: Optional[Union[StrictFloat, StrictInt]] = None
    bid: Optional[Union[StrictFloat, StrictInt]] = None
    ask: Optional[Union[StrictFloat, StrictInt]] = None
    minute_open: Optional[Union[StrictFloat, StrictInt]] = None
    minute_high: Optional[Union[StrictFloat, StrictInt]] = None
    minute_low: Optional[Union[StrictFloat, StrictInt]] = None
    minute_close: Optional[Union[StrictFloat, StrictInt]] = None
    minute_volume: Optional[Union[StrictFloat, StrictInt]] = None
    minute_vwap: Optional[Union[StrictFloat, StrictInt]] = None
    minute_transactions: Optional[Union[StrictFloat, StrictInt]] = None
    quote_timestamp: Optional[datetime] = None
    minute_timestamp: Optional[datetime] = None
    last_updated: Optional[datetime]
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["base_currency", "counter_currency", "last_rate", "open", "high", "low", "close", "volume", "prev_close", "vwap", "change", "change_percent", "prev_open", "prev_high", "prev_low", "prev_volume", "prev_vwap", "bid", "ask", "minute_open", "minute_high", "minute_low", "minute_close", "minute_volume", "minute_vwap", "minute_transactions", "quote_timestamp", "minute_timestamp", "last_updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolygonCurrencySnapshotsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if open (nullable) is None
        # and model_fields_set contains the field
        if self.open is None and "open" in self.model_fields_set:
            _dict['open'] = None

        # set to None if high (nullable) is None
        # and model_fields_set contains the field
        if self.high is None and "high" in self.model_fields_set:
            _dict['high'] = None

        # set to None if low (nullable) is None
        # and model_fields_set contains the field
        if self.low is None and "low" in self.model_fields_set:
            _dict['low'] = None

        # set to None if close (nullable) is None
        # and model_fields_set contains the field
        if self.close is None and "close" in self.model_fields_set:
            _dict['close'] = None

        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if prev_close (nullable) is None
        # and model_fields_set contains the field
        if self.prev_close is None and "prev_close" in self.model_fields_set:
            _dict['prev_close'] = None

        # set to None if vwap (nullable) is None
        # and model_fields_set contains the field
        if self.vwap is None and "vwap" in self.model_fields_set:
            _dict['vwap'] = None

        # set to None if change (nullable) is None
        # and model_fields_set contains the field
        if self.change is None and "change" in self.model_fields_set:
            _dict['change'] = None

        # set to None if change_percent (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent is None and "change_percent" in self.model_fields_set:
            _dict['change_percent'] = None

        # set to None if prev_open (nullable) is None
        # and model_fields_set contains the field
        if self.prev_open is None and "prev_open" in self.model_fields_set:
            _dict['prev_open'] = None

        # set to None if prev_high (nullable) is None
        # and model_fields_set contains the field
        if self.prev_high is None and "prev_high" in self.model_fields_set:
            _dict['prev_high'] = None

        # set to None if prev_low (nullable) is None
        # and model_fields_set contains the field
        if self.prev_low is None and "prev_low" in self.model_fields_set:
            _dict['prev_low'] = None

        # set to None if prev_volume (nullable) is None
        # and model_fields_set contains the field
        if self.prev_volume is None and "prev_volume" in self.model_fields_set:
            _dict['prev_volume'] = None

        # set to None if prev_vwap (nullable) is None
        # and model_fields_set contains the field
        if self.prev_vwap is None and "prev_vwap" in self.model_fields_set:
            _dict['prev_vwap'] = None

        # set to None if bid (nullable) is None
        # and model_fields_set contains the field
        if self.bid is None and "bid" in self.model_fields_set:
            _dict['bid'] = None

        # set to None if ask (nullable) is None
        # and model_fields_set contains the field
        if self.ask is None and "ask" in self.model_fields_set:
            _dict['ask'] = None

        # set to None if minute_open (nullable) is None
        # and model_fields_set contains the field
        if self.minute_open is None and "minute_open" in self.model_fields_set:
            _dict['minute_open'] = None

        # set to None if minute_high (nullable) is None
        # and model_fields_set contains the field
        if self.minute_high is None and "minute_high" in self.model_fields_set:
            _dict['minute_high'] = None

        # set to None if minute_low (nullable) is None
        # and model_fields_set contains the field
        if self.minute_low is None and "minute_low" in self.model_fields_set:
            _dict['minute_low'] = None

        # set to None if minute_close (nullable) is None
        # and model_fields_set contains the field
        if self.minute_close is None and "minute_close" in self.model_fields_set:
            _dict['minute_close'] = None

        # set to None if minute_volume (nullable) is None
        # and model_fields_set contains the field
        if self.minute_volume is None and "minute_volume" in self.model_fields_set:
            _dict['minute_volume'] = None

        # set to None if minute_vwap (nullable) is None
        # and model_fields_set contains the field
        if self.minute_vwap is None and "minute_vwap" in self.model_fields_set:
            _dict['minute_vwap'] = None

        # set to None if minute_transactions (nullable) is None
        # and model_fields_set contains the field
        if self.minute_transactions is None and "minute_transactions" in self.model_fields_set:
            _dict['minute_transactions'] = None

        # set to None if quote_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.quote_timestamp is None and "quote_timestamp" in self.model_fields_set:
            _dict['quote_timestamp'] = None

        # set to None if minute_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.minute_timestamp is None and "minute_timestamp" in self.model_fields_set:
            _dict['minute_timestamp'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolygonCurrencySnapshotsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_currency": obj.get("base_currency"),
            "counter_currency": obj.get("counter_currency"),
            "last_rate": obj.get("last_rate"),
            "open": obj.get("open"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "close": obj.get("close"),
            "volume": obj.get("volume"),
            "prev_close": obj.get("prev_close"),
            "vwap": obj.get("vwap"),
            "change": obj.get("change"),
            "change_percent": obj.get("change_percent"),
            "prev_open": obj.get("prev_open"),
            "prev_high": obj.get("prev_high"),
            "prev_low": obj.get("prev_low"),
            "prev_volume": obj.get("prev_volume"),
            "prev_vwap": obj.get("prev_vwap"),
            "bid": obj.get("bid"),
            "ask": obj.get("ask"),
            "minute_open": obj.get("minute_open"),
            "minute_high": obj.get("minute_high"),
            "minute_low": obj.get("minute_low"),
            "minute_close": obj.get("minute_close"),
            "minute_volume": obj.get("minute_volume"),
            "minute_vwap": obj.get("minute_vwap"),
            "minute_transactions": obj.get("minute_transactions"),
            "quote_timestamp": obj.get("quote_timestamp"),
            "minute_timestamp": obj.get("minute_timestamp"),
            "last_updated": obj.get("last_updated")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


