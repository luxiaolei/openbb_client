# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.published_date import PublishedDate
from typing import Optional, Set
from typing_extensions import Self

class FMPPriceTargetData(BaseModel):
    """
    FMP Price Target Data.
    """ # noqa: E501
    published_date: PublishedDate
    published_time: Optional[StrictStr] = None
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    exchange: Optional[StrictStr] = None
    company_name: Optional[StrictStr] = None
    analyst_name: Optional[StrictStr] = None
    analyst_firm: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    price_target: Optional[Union[StrictFloat, StrictInt]] = None
    adj_price_target: Optional[Union[StrictFloat, StrictInt]] = None
    price_target_previous: Optional[Union[StrictFloat, StrictInt]] = None
    previous_adj_price_target: Optional[Union[StrictFloat, StrictInt]] = None
    price_when_posted: Optional[Union[StrictFloat, StrictInt]] = None
    rating_current: Optional[StrictStr] = None
    rating_previous: Optional[StrictStr] = None
    action: Optional[StrictStr] = None
    news_url: Optional[StrictStr] = None
    news_title: Optional[StrictStr] = None
    news_publisher: Optional[StrictStr] = None
    news_base_url: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["published_date", "published_time", "symbol", "exchange", "company_name", "analyst_name", "analyst_firm", "currency", "price_target", "adj_price_target", "price_target_previous", "previous_adj_price_target", "price_when_posted", "rating_current", "rating_previous", "action", "news_url", "news_title", "news_publisher", "news_base_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPPriceTargetData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of published_date
        if self.published_date:
            _dict['published_date'] = self.published_date.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if published_time (nullable) is None
        # and model_fields_set contains the field
        if self.published_time is None and "published_time" in self.model_fields_set:
            _dict['published_time'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['company_name'] = None

        # set to None if analyst_name (nullable) is None
        # and model_fields_set contains the field
        if self.analyst_name is None and "analyst_name" in self.model_fields_set:
            _dict['analyst_name'] = None

        # set to None if analyst_firm (nullable) is None
        # and model_fields_set contains the field
        if self.analyst_firm is None and "analyst_firm" in self.model_fields_set:
            _dict['analyst_firm'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if price_target (nullable) is None
        # and model_fields_set contains the field
        if self.price_target is None and "price_target" in self.model_fields_set:
            _dict['price_target'] = None

        # set to None if adj_price_target (nullable) is None
        # and model_fields_set contains the field
        if self.adj_price_target is None and "adj_price_target" in self.model_fields_set:
            _dict['adj_price_target'] = None

        # set to None if price_target_previous (nullable) is None
        # and model_fields_set contains the field
        if self.price_target_previous is None and "price_target_previous" in self.model_fields_set:
            _dict['price_target_previous'] = None

        # set to None if previous_adj_price_target (nullable) is None
        # and model_fields_set contains the field
        if self.previous_adj_price_target is None and "previous_adj_price_target" in self.model_fields_set:
            _dict['previous_adj_price_target'] = None

        # set to None if price_when_posted (nullable) is None
        # and model_fields_set contains the field
        if self.price_when_posted is None and "price_when_posted" in self.model_fields_set:
            _dict['price_when_posted'] = None

        # set to None if rating_current (nullable) is None
        # and model_fields_set contains the field
        if self.rating_current is None and "rating_current" in self.model_fields_set:
            _dict['rating_current'] = None

        # set to None if rating_previous (nullable) is None
        # and model_fields_set contains the field
        if self.rating_previous is None and "rating_previous" in self.model_fields_set:
            _dict['rating_previous'] = None

        # set to None if action (nullable) is None
        # and model_fields_set contains the field
        if self.action is None and "action" in self.model_fields_set:
            _dict['action'] = None

        # set to None if news_url (nullable) is None
        # and model_fields_set contains the field
        if self.news_url is None and "news_url" in self.model_fields_set:
            _dict['news_url'] = None

        # set to None if news_title (nullable) is None
        # and model_fields_set contains the field
        if self.news_title is None and "news_title" in self.model_fields_set:
            _dict['news_title'] = None

        # set to None if news_publisher (nullable) is None
        # and model_fields_set contains the field
        if self.news_publisher is None and "news_publisher" in self.model_fields_set:
            _dict['news_publisher'] = None

        # set to None if news_base_url (nullable) is None
        # and model_fields_set contains the field
        if self.news_base_url is None and "news_base_url" in self.model_fields_set:
            _dict['news_base_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPPriceTargetData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "published_date": PublishedDate.from_dict(obj["published_date"]) if obj.get("published_date") is not None else None,
            "published_time": obj.get("published_time"),
            "symbol": obj.get("symbol"),
            "exchange": obj.get("exchange"),
            "company_name": obj.get("company_name"),
            "analyst_name": obj.get("analyst_name"),
            "analyst_firm": obj.get("analyst_firm"),
            "currency": obj.get("currency"),
            "price_target": obj.get("price_target"),
            "adj_price_target": obj.get("adj_price_target"),
            "price_target_previous": obj.get("price_target_previous"),
            "previous_adj_price_target": obj.get("previous_adj_price_target"),
            "price_when_posted": obj.get("price_when_posted"),
            "rating_current": obj.get("rating_current"),
            "rating_previous": obj.get("rating_previous"),
            "action": obj.get("action"),
            "news_url": obj.get("news_url"),
            "news_title": obj.get("news_title"),
            "news_publisher": obj.get("news_publisher"),
            "news_base_url": obj.get("news_base_url")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


