# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openbb_client.models.date_first_added import DateFirstAdded
from openbb_client.models.founded import Founded
from typing import Optional, Set
from typing_extensions import Self

class FMPIndexConstituentsData(BaseModel):
    """
    FMP Index Constituents Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    name: Optional[StrictStr] = None
    sector: StrictStr = Field(description="Sector the constituent company in the index belongs to.")
    sub_sector: Optional[StrictStr] = None
    headquarter: Optional[StrictStr] = None
    date_first_added: Optional[DateFirstAdded] = None
    cik: Optional[StrictInt] = None
    founded: Optional[Founded] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "sector", "sub_sector", "headquarter", "date_first_added", "cik", "founded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPIndexConstituentsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_first_added
        if self.date_first_added:
            _dict['date_first_added'] = self.date_first_added.to_dict()
        # override the default output from pydantic by calling `to_dict()` of founded
        if self.founded:
            _dict['founded'] = self.founded.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if sub_sector (nullable) is None
        # and model_fields_set contains the field
        if self.sub_sector is None and "sub_sector" in self.model_fields_set:
            _dict['sub_sector'] = None

        # set to None if headquarter (nullable) is None
        # and model_fields_set contains the field
        if self.headquarter is None and "headquarter" in self.model_fields_set:
            _dict['headquarter'] = None

        # set to None if date_first_added (nullable) is None
        # and model_fields_set contains the field
        if self.date_first_added is None and "date_first_added" in self.model_fields_set:
            _dict['date_first_added'] = None

        # set to None if cik (nullable) is None
        # and model_fields_set contains the field
        if self.cik is None and "cik" in self.model_fields_set:
            _dict['cik'] = None

        # set to None if founded (nullable) is None
        # and model_fields_set contains the field
        if self.founded is None and "founded" in self.model_fields_set:
            _dict['founded'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPIndexConstituentsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "sector": obj.get("sector"),
            "sub_sector": obj.get("sub_sector"),
            "headquarter": obj.get("headquarter"),
            "date_first_added": DateFirstAdded.from_dict(obj["date_first_added"]) if obj.get("date_first_added") is not None else None,
            "cik": obj.get("cik"),
            "founded": Founded.from_dict(obj["founded"]) if obj.get("founded") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


