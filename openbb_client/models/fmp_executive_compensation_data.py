# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FMPExecutiveCompensationData(BaseModel):
    """
    FMP Executive Compensation Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    cik: Optional[StrictStr] = None
    company_name: Optional[StrictStr] = None
    industry: Optional[StrictStr] = None
    year: Optional[StrictInt] = None
    name_and_position: Optional[StrictStr] = None
    salary: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    bonus: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    stock_award: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    incentive_plan_compensation: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    all_other_compensation: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    total: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    filing_date: Optional[date] = None
    accepted_date: Optional[datetime] = None
    url: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "cik", "company_name", "industry", "year", "name_and_position", "salary", "bonus", "stock_award", "incentive_plan_compensation", "all_other_compensation", "total", "filing_date", "accepted_date", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPExecutiveCompensationData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if cik (nullable) is None
        # and model_fields_set contains the field
        if self.cik is None and "cik" in self.model_fields_set:
            _dict['cik'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['company_name'] = None

        # set to None if industry (nullable) is None
        # and model_fields_set contains the field
        if self.industry is None and "industry" in self.model_fields_set:
            _dict['industry'] = None

        # set to None if year (nullable) is None
        # and model_fields_set contains the field
        if self.year is None and "year" in self.model_fields_set:
            _dict['year'] = None

        # set to None if name_and_position (nullable) is None
        # and model_fields_set contains the field
        if self.name_and_position is None and "name_and_position" in self.model_fields_set:
            _dict['name_and_position'] = None

        # set to None if salary (nullable) is None
        # and model_fields_set contains the field
        if self.salary is None and "salary" in self.model_fields_set:
            _dict['salary'] = None

        # set to None if bonus (nullable) is None
        # and model_fields_set contains the field
        if self.bonus is None and "bonus" in self.model_fields_set:
            _dict['bonus'] = None

        # set to None if stock_award (nullable) is None
        # and model_fields_set contains the field
        if self.stock_award is None and "stock_award" in self.model_fields_set:
            _dict['stock_award'] = None

        # set to None if incentive_plan_compensation (nullable) is None
        # and model_fields_set contains the field
        if self.incentive_plan_compensation is None and "incentive_plan_compensation" in self.model_fields_set:
            _dict['incentive_plan_compensation'] = None

        # set to None if all_other_compensation (nullable) is None
        # and model_fields_set contains the field
        if self.all_other_compensation is None and "all_other_compensation" in self.model_fields_set:
            _dict['all_other_compensation'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if filing_date (nullable) is None
        # and model_fields_set contains the field
        if self.filing_date is None and "filing_date" in self.model_fields_set:
            _dict['filing_date'] = None

        # set to None if accepted_date (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_date is None and "accepted_date" in self.model_fields_set:
            _dict['accepted_date'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPExecutiveCompensationData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "cik": obj.get("cik"),
            "company_name": obj.get("company_name"),
            "industry": obj.get("industry"),
            "year": obj.get("year"),
            "name_and_position": obj.get("name_and_position"),
            "salary": obj.get("salary"),
            "bonus": obj.get("bonus"),
            "stock_award": obj.get("stock_award"),
            "incentive_plan_compensation": obj.get("incentive_plan_compensation"),
            "all_other_compensation": obj.get("all_other_compensation"),
            "total": obj.get("total"),
            "filing_date": obj.get("filing_date"),
            "accepted_date": obj.get("accepted_date"),
            "url": obj.get("url")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


