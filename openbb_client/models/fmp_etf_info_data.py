# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPEtfInfoData(BaseModel):
    """
    FMP ETF Info Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data. (ETF)")
    name: Optional[StrictStr]
    description: Optional[StrictStr] = None
    inception_date: Optional[StrictStr]
    issuer: Optional[StrictStr] = None
    cusip: Optional[StrictStr] = None
    isin: Optional[StrictStr] = None
    domicile: Optional[StrictStr] = None
    asset_class: Optional[StrictStr] = None
    aum: Optional[Union[StrictFloat, StrictInt]] = None
    nav: Optional[Union[StrictFloat, StrictInt]] = None
    nav_currency: Optional[StrictStr] = None
    expense_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    holdings_count: Optional[StrictInt] = None
    avg_volume: Optional[Union[StrictFloat, StrictInt]] = None
    website: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "description", "inception_date", "issuer", "cusip", "isin", "domicile", "asset_class", "aum", "nav", "nav_currency", "expense_ratio", "holdings_count", "avg_volume", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPEtfInfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if inception_date (nullable) is None
        # and model_fields_set contains the field
        if self.inception_date is None and "inception_date" in self.model_fields_set:
            _dict['inception_date'] = None

        # set to None if issuer (nullable) is None
        # and model_fields_set contains the field
        if self.issuer is None and "issuer" in self.model_fields_set:
            _dict['issuer'] = None

        # set to None if cusip (nullable) is None
        # and model_fields_set contains the field
        if self.cusip is None and "cusip" in self.model_fields_set:
            _dict['cusip'] = None

        # set to None if isin (nullable) is None
        # and model_fields_set contains the field
        if self.isin is None and "isin" in self.model_fields_set:
            _dict['isin'] = None

        # set to None if domicile (nullable) is None
        # and model_fields_set contains the field
        if self.domicile is None and "domicile" in self.model_fields_set:
            _dict['domicile'] = None

        # set to None if asset_class (nullable) is None
        # and model_fields_set contains the field
        if self.asset_class is None and "asset_class" in self.model_fields_set:
            _dict['asset_class'] = None

        # set to None if aum (nullable) is None
        # and model_fields_set contains the field
        if self.aum is None and "aum" in self.model_fields_set:
            _dict['aum'] = None

        # set to None if nav (nullable) is None
        # and model_fields_set contains the field
        if self.nav is None and "nav" in self.model_fields_set:
            _dict['nav'] = None

        # set to None if nav_currency (nullable) is None
        # and model_fields_set contains the field
        if self.nav_currency is None and "nav_currency" in self.model_fields_set:
            _dict['nav_currency'] = None

        # set to None if expense_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.expense_ratio is None and "expense_ratio" in self.model_fields_set:
            _dict['expense_ratio'] = None

        # set to None if holdings_count (nullable) is None
        # and model_fields_set contains the field
        if self.holdings_count is None and "holdings_count" in self.model_fields_set:
            _dict['holdings_count'] = None

        # set to None if avg_volume (nullable) is None
        # and model_fields_set contains the field
        if self.avg_volume is None and "avg_volume" in self.model_fields_set:
            _dict['avg_volume'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPEtfInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "inception_date": obj.get("inception_date"),
            "issuer": obj.get("issuer"),
            "cusip": obj.get("cusip"),
            "isin": obj.get("isin"),
            "domicile": obj.get("domicile"),
            "asset_class": obj.get("asset_class"),
            "aum": obj.get("aum"),
            "nav": obj.get("nav"),
            "nav_currency": obj.get("nav_currency"),
            "expense_ratio": obj.get("expense_ratio"),
            "holdings_count": obj.get("holdings_count"),
            "avg_volume": obj.get("avg_volume"),
            "website": obj.get("website")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


