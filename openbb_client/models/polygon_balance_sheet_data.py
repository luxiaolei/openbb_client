# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PolygonBalanceSheetData(BaseModel):
    """
    Polygon Balance Sheet Statement Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end date of the reporting period.")
    fiscal_period: Optional[StrictStr] = None
    fiscal_year: Optional[StrictInt] = None
    accounts_receivable: Optional[Union[StrictFloat, StrictInt]] = None
    marketable_securities: Optional[Union[StrictFloat, StrictInt]] = None
    prepaid_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    other_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    total_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    property_plant_equipment_net: Optional[Union[StrictFloat, StrictInt]] = None
    inventory: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    total_non_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    intangible_assets: Optional[Union[StrictFloat, StrictInt]] = None
    total_assets: Optional[Union[StrictFloat, StrictInt]] = None
    accounts_payable: Optional[Union[StrictFloat, StrictInt]] = None
    employee_wages: Optional[Union[StrictFloat, StrictInt]] = None
    other_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    total_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    total_non_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    long_term_debt: Optional[Union[StrictFloat, StrictInt]] = None
    total_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    minority_interest: Optional[Union[StrictFloat, StrictInt]] = None
    temporary_equity_attributable_to_parent: Optional[Union[StrictFloat, StrictInt]] = None
    equity_attributable_to_parent: Optional[Union[StrictFloat, StrictInt]] = None
    temporary_equity: Optional[Union[StrictFloat, StrictInt]] = None
    preferred_stock: Optional[Union[StrictFloat, StrictInt]] = None
    redeemable_non_controlling_interest: Optional[Union[StrictFloat, StrictInt]] = None
    redeemable_non_controlling_interest_other: Optional[Union[StrictFloat, StrictInt]] = None
    total_shareholders_equity: Optional[Union[StrictFloat, StrictInt]] = None
    total_equity: Optional[Union[StrictFloat, StrictInt]] = None
    total_liabilities_and_shareholders_equity: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "accounts_receivable", "marketable_securities", "prepaid_expenses", "other_current_assets", "total_current_assets", "property_plant_equipment_net", "inventory", "other_non_current_assets", "total_non_current_assets", "intangible_assets", "total_assets", "accounts_payable", "employee_wages", "other_current_liabilities", "total_current_liabilities", "other_non_current_liabilities", "total_non_current_liabilities", "long_term_debt", "total_liabilities", "minority_interest", "temporary_equity_attributable_to_parent", "equity_attributable_to_parent", "temporary_equity", "preferred_stock", "redeemable_non_controlling_interest", "redeemable_non_controlling_interest_other", "total_shareholders_equity", "total_equity", "total_liabilities_and_shareholders_equity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolygonBalanceSheetData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if accounts_receivable (nullable) is None
        # and model_fields_set contains the field
        if self.accounts_receivable is None and "accounts_receivable" in self.model_fields_set:
            _dict['accounts_receivable'] = None

        # set to None if marketable_securities (nullable) is None
        # and model_fields_set contains the field
        if self.marketable_securities is None and "marketable_securities" in self.model_fields_set:
            _dict['marketable_securities'] = None

        # set to None if prepaid_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.prepaid_expenses is None and "prepaid_expenses" in self.model_fields_set:
            _dict['prepaid_expenses'] = None

        # set to None if other_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_current_assets is None and "other_current_assets" in self.model_fields_set:
            _dict['other_current_assets'] = None

        # set to None if total_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_current_assets is None and "total_current_assets" in self.model_fields_set:
            _dict['total_current_assets'] = None

        # set to None if property_plant_equipment_net (nullable) is None
        # and model_fields_set contains the field
        if self.property_plant_equipment_net is None and "property_plant_equipment_net" in self.model_fields_set:
            _dict['property_plant_equipment_net'] = None

        # set to None if inventory (nullable) is None
        # and model_fields_set contains the field
        if self.inventory is None and "inventory" in self.model_fields_set:
            _dict['inventory'] = None

        # set to None if other_non_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_current_assets is None and "other_non_current_assets" in self.model_fields_set:
            _dict['other_non_current_assets'] = None

        # set to None if total_non_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_non_current_assets is None and "total_non_current_assets" in self.model_fields_set:
            _dict['total_non_current_assets'] = None

        # set to None if intangible_assets (nullable) is None
        # and model_fields_set contains the field
        if self.intangible_assets is None and "intangible_assets" in self.model_fields_set:
            _dict['intangible_assets'] = None

        # set to None if total_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_assets is None and "total_assets" in self.model_fields_set:
            _dict['total_assets'] = None

        # set to None if accounts_payable (nullable) is None
        # and model_fields_set contains the field
        if self.accounts_payable is None and "accounts_payable" in self.model_fields_set:
            _dict['accounts_payable'] = None

        # set to None if employee_wages (nullable) is None
        # and model_fields_set contains the field
        if self.employee_wages is None and "employee_wages" in self.model_fields_set:
            _dict['employee_wages'] = None

        # set to None if other_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_current_liabilities is None and "other_current_liabilities" in self.model_fields_set:
            _dict['other_current_liabilities'] = None

        # set to None if total_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_current_liabilities is None and "total_current_liabilities" in self.model_fields_set:
            _dict['total_current_liabilities'] = None

        # set to None if other_non_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_current_liabilities is None and "other_non_current_liabilities" in self.model_fields_set:
            _dict['other_non_current_liabilities'] = None

        # set to None if total_non_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_non_current_liabilities is None and "total_non_current_liabilities" in self.model_fields_set:
            _dict['total_non_current_liabilities'] = None

        # set to None if long_term_debt (nullable) is None
        # and model_fields_set contains the field
        if self.long_term_debt is None and "long_term_debt" in self.model_fields_set:
            _dict['long_term_debt'] = None

        # set to None if total_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities is None and "total_liabilities" in self.model_fields_set:
            _dict['total_liabilities'] = None

        # set to None if minority_interest (nullable) is None
        # and model_fields_set contains the field
        if self.minority_interest is None and "minority_interest" in self.model_fields_set:
            _dict['minority_interest'] = None

        # set to None if temporary_equity_attributable_to_parent (nullable) is None
        # and model_fields_set contains the field
        if self.temporary_equity_attributable_to_parent is None and "temporary_equity_attributable_to_parent" in self.model_fields_set:
            _dict['temporary_equity_attributable_to_parent'] = None

        # set to None if equity_attributable_to_parent (nullable) is None
        # and model_fields_set contains the field
        if self.equity_attributable_to_parent is None and "equity_attributable_to_parent" in self.model_fields_set:
            _dict['equity_attributable_to_parent'] = None

        # set to None if temporary_equity (nullable) is None
        # and model_fields_set contains the field
        if self.temporary_equity is None and "temporary_equity" in self.model_fields_set:
            _dict['temporary_equity'] = None

        # set to None if preferred_stock (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_stock is None and "preferred_stock" in self.model_fields_set:
            _dict['preferred_stock'] = None

        # set to None if redeemable_non_controlling_interest (nullable) is None
        # and model_fields_set contains the field
        if self.redeemable_non_controlling_interest is None and "redeemable_non_controlling_interest" in self.model_fields_set:
            _dict['redeemable_non_controlling_interest'] = None

        # set to None if redeemable_non_controlling_interest_other (nullable) is None
        # and model_fields_set contains the field
        if self.redeemable_non_controlling_interest_other is None and "redeemable_non_controlling_interest_other" in self.model_fields_set:
            _dict['redeemable_non_controlling_interest_other'] = None

        # set to None if total_shareholders_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_shareholders_equity is None and "total_shareholders_equity" in self.model_fields_set:
            _dict['total_shareholders_equity'] = None

        # set to None if total_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_equity is None and "total_equity" in self.model_fields_set:
            _dict['total_equity'] = None

        # set to None if total_liabilities_and_shareholders_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities_and_shareholders_equity is None and "total_liabilities_and_shareholders_equity" in self.model_fields_set:
            _dict['total_liabilities_and_shareholders_equity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolygonBalanceSheetData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "accounts_receivable": obj.get("accounts_receivable"),
            "marketable_securities": obj.get("marketable_securities"),
            "prepaid_expenses": obj.get("prepaid_expenses"),
            "other_current_assets": obj.get("other_current_assets"),
            "total_current_assets": obj.get("total_current_assets"),
            "property_plant_equipment_net": obj.get("property_plant_equipment_net"),
            "inventory": obj.get("inventory"),
            "other_non_current_assets": obj.get("other_non_current_assets"),
            "total_non_current_assets": obj.get("total_non_current_assets"),
            "intangible_assets": obj.get("intangible_assets"),
            "total_assets": obj.get("total_assets"),
            "accounts_payable": obj.get("accounts_payable"),
            "employee_wages": obj.get("employee_wages"),
            "other_current_liabilities": obj.get("other_current_liabilities"),
            "total_current_liabilities": obj.get("total_current_liabilities"),
            "other_non_current_liabilities": obj.get("other_non_current_liabilities"),
            "total_non_current_liabilities": obj.get("total_non_current_liabilities"),
            "long_term_debt": obj.get("long_term_debt"),
            "total_liabilities": obj.get("total_liabilities"),
            "minority_interest": obj.get("minority_interest"),
            "temporary_equity_attributable_to_parent": obj.get("temporary_equity_attributable_to_parent"),
            "equity_attributable_to_parent": obj.get("equity_attributable_to_parent"),
            "temporary_equity": obj.get("temporary_equity"),
            "preferred_stock": obj.get("preferred_stock"),
            "redeemable_non_controlling_interest": obj.get("redeemable_non_controlling_interest"),
            "redeemable_non_controlling_interest_other": obj.get("redeemable_non_controlling_interest_other"),
            "total_shareholders_equity": obj.get("total_shareholders_equity"),
            "total_equity": obj.get("total_equity"),
            "total_liabilities_and_shareholders_equity": obj.get("total_liabilities_and_shareholders_equity")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


