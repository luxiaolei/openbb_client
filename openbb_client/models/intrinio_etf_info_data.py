# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IntrinioEtfInfoData(BaseModel):
    """
    Intrinio ETF Info Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data. (ETF)")
    name: Optional[StrictStr]
    description: Optional[StrictStr] = None
    inception_date: Optional[StrictStr]
    fund_listing_date: Optional[date] = None
    data_change_date: Optional[date] = None
    etn_maturity_date: Optional[date] = None
    is_listed: Optional[StrictBool] = None
    close_date: Optional[date] = None
    exchange: Optional[StrictStr] = None
    isin: Optional[StrictStr] = None
    ric: Optional[StrictStr] = None
    sedol: Optional[StrictStr] = None
    figi_symbol: Optional[StrictStr] = None
    share_class_figi: Optional[StrictStr] = None
    firstbridge_id: Optional[StrictStr] = None
    firstbridge_parent_id: Optional[StrictStr] = None
    intrinio_id: Optional[StrictStr] = None
    intraday_nav_symbol: Optional[StrictStr] = None
    primary_symbol: Optional[StrictStr] = None
    etp_structure_type: Optional[StrictStr] = None
    legal_structure: Optional[StrictStr] = None
    issuer: Optional[StrictStr] = None
    etn_issuing_bank: Optional[StrictStr] = None
    fund_family: Optional[StrictStr] = None
    investment_style: Optional[StrictStr] = None
    derivatives_based: Optional[StrictStr] = None
    income_category: Optional[StrictStr] = None
    asset_class: Optional[StrictStr] = None
    other_asset_types: Optional[StrictStr] = None
    single_category_designation: Optional[StrictStr] = None
    beta_type: Optional[StrictStr] = None
    beta_details: Optional[StrictStr] = None
    market_cap_range: Optional[StrictStr] = None
    market_cap_weighting_type: Optional[StrictStr] = None
    index_weighting_scheme: Optional[StrictStr] = None
    index_linked: Optional[StrictStr] = None
    index_name: Optional[StrictStr] = None
    index_symbol: Optional[StrictStr] = None
    parent_index: Optional[StrictStr] = None
    index_family: Optional[StrictStr] = None
    broader_index_family: Optional[StrictStr] = None
    index_provider: Optional[StrictStr] = None
    index_provider_code: Optional[StrictStr] = None
    replication_structure: Optional[StrictStr] = None
    growth_value_tilt: Optional[StrictStr] = None
    growth_type: Optional[StrictStr] = None
    value_type: Optional[StrictStr] = None
    sector: Optional[StrictStr] = None
    industry: Optional[StrictStr] = None
    industry_group: Optional[StrictStr] = None
    cross_sector_theme: Optional[StrictStr] = None
    natural_resources_type: Optional[StrictStr] = None
    us_or_excludes_us: Optional[StrictStr] = None
    developed_emerging: Optional[StrictStr] = None
    specialized_region: Optional[StrictStr] = None
    continent: Optional[StrictStr] = None
    latin_america_sub_group: Optional[StrictStr] = None
    europe_sub_group: Optional[StrictStr] = None
    asia_sub_group: Optional[StrictStr] = None
    specific_country: Optional[StrictStr] = None
    china_listing_location: Optional[StrictStr] = None
    us_state: Optional[StrictStr] = None
    real_estate: Optional[StrictStr] = None
    fundamental_weighting_type: Optional[StrictStr] = None
    dividend_weighting_type: Optional[StrictStr] = None
    bond_type: Optional[StrictStr] = None
    government_bond_types: Optional[StrictStr] = None
    municipal_bond_region: Optional[StrictStr] = None
    municipal_vrdo: Optional[StrictBool] = None
    mortgage_bond_types: Optional[StrictStr] = None
    bond_tax_status: Optional[StrictStr] = None
    credit_quality: Optional[StrictStr] = None
    average_maturity: Optional[StrictStr] = None
    specific_maturity_year: Optional[StrictInt] = None
    commodity_types: Optional[StrictStr] = None
    energy_type: Optional[StrictStr] = None
    agricultural_type: Optional[StrictStr] = None
    livestock_type: Optional[StrictStr] = None
    metal_type: Optional[StrictStr] = None
    inverse_leveraged: Optional[StrictStr] = None
    target_date_multi_asset_type: Optional[StrictStr] = None
    currency_pair: Optional[StrictStr] = None
    social_environmental_type: Optional[StrictStr] = None
    clean_energy_type: Optional[StrictStr] = None
    dividend_type: Optional[StrictStr] = None
    regular_dividend_payor_type: Optional[StrictStr] = None
    quant_strategies_type: Optional[StrictStr] = None
    other_quant_models: Optional[StrictStr] = None
    hedge_fund_type: Optional[StrictStr] = None
    excludes_financials: Optional[StrictBool] = None
    excludes_technology: Optional[StrictBool] = None
    holds_only_nyse_stocks: Optional[StrictBool] = None
    holds_only_nasdaq_stocks: Optional[StrictBool] = None
    holds_mlp: Optional[StrictBool] = None
    holds_preferred_stock: Optional[StrictBool] = None
    holds_closed_end_funds: Optional[StrictBool] = None
    holds_adr: Optional[StrictBool] = None
    laddered: Optional[StrictBool] = None
    zero_coupon: Optional[StrictBool] = None
    floating_rate: Optional[StrictBool] = None
    build_america_bonds: Optional[StrictBool] = None
    dynamic_futures_roll: Optional[StrictBool] = None
    currency_hedged: Optional[StrictBool] = None
    includes_short_exposure: Optional[StrictBool] = None
    ucits: Optional[StrictBool] = None
    registered_countries: Optional[StrictStr] = None
    issuer_country: Optional[StrictStr] = None
    domicile: Optional[StrictStr] = None
    listing_country_code: Optional[StrictStr] = None
    listing_region: Optional[StrictStr] = None
    bond_currency_denomination: Optional[StrictStr] = None
    base_currency: Optional[StrictStr] = None
    listing_currency: Optional[StrictStr] = None
    number_of_holdings: Optional[StrictInt] = None
    month_end_assets: Optional[Union[StrictFloat, StrictInt]] = None
    net_expense_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    etf_portfolio_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "description", "inception_date", "fund_listing_date", "data_change_date", "etn_maturity_date", "is_listed", "close_date", "exchange", "isin", "ric", "sedol", "figi_symbol", "share_class_figi", "firstbridge_id", "firstbridge_parent_id", "intrinio_id", "intraday_nav_symbol", "primary_symbol", "etp_structure_type", "legal_structure", "issuer", "etn_issuing_bank", "fund_family", "investment_style", "derivatives_based", "income_category", "asset_class", "other_asset_types", "single_category_designation", "beta_type", "beta_details", "market_cap_range", "market_cap_weighting_type", "index_weighting_scheme", "index_linked", "index_name", "index_symbol", "parent_index", "index_family", "broader_index_family", "index_provider", "index_provider_code", "replication_structure", "growth_value_tilt", "growth_type", "value_type", "sector", "industry", "industry_group", "cross_sector_theme", "natural_resources_type", "us_or_excludes_us", "developed_emerging", "specialized_region", "continent", "latin_america_sub_group", "europe_sub_group", "asia_sub_group", "specific_country", "china_listing_location", "us_state", "real_estate", "fundamental_weighting_type", "dividend_weighting_type", "bond_type", "government_bond_types", "municipal_bond_region", "municipal_vrdo", "mortgage_bond_types", "bond_tax_status", "credit_quality", "average_maturity", "specific_maturity_year", "commodity_types", "energy_type", "agricultural_type", "livestock_type", "metal_type", "inverse_leveraged", "target_date_multi_asset_type", "currency_pair", "social_environmental_type", "clean_energy_type", "dividend_type", "regular_dividend_payor_type", "quant_strategies_type", "other_quant_models", "hedge_fund_type", "excludes_financials", "excludes_technology", "holds_only_nyse_stocks", "holds_only_nasdaq_stocks", "holds_mlp", "holds_preferred_stock", "holds_closed_end_funds", "holds_adr", "laddered", "zero_coupon", "floating_rate", "build_america_bonds", "dynamic_futures_roll", "currency_hedged", "includes_short_exposure", "ucits", "registered_countries", "issuer_country", "domicile", "listing_country_code", "listing_region", "bond_currency_denomination", "base_currency", "listing_currency", "number_of_holdings", "month_end_assets", "net_expense_ratio", "etf_portfolio_turnover"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioEtfInfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if inception_date (nullable) is None
        # and model_fields_set contains the field
        if self.inception_date is None and "inception_date" in self.model_fields_set:
            _dict['inception_date'] = None

        # set to None if fund_listing_date (nullable) is None
        # and model_fields_set contains the field
        if self.fund_listing_date is None and "fund_listing_date" in self.model_fields_set:
            _dict['fund_listing_date'] = None

        # set to None if data_change_date (nullable) is None
        # and model_fields_set contains the field
        if self.data_change_date is None and "data_change_date" in self.model_fields_set:
            _dict['data_change_date'] = None

        # set to None if etn_maturity_date (nullable) is None
        # and model_fields_set contains the field
        if self.etn_maturity_date is None and "etn_maturity_date" in self.model_fields_set:
            _dict['etn_maturity_date'] = None

        # set to None if is_listed (nullable) is None
        # and model_fields_set contains the field
        if self.is_listed is None and "is_listed" in self.model_fields_set:
            _dict['is_listed'] = None

        # set to None if close_date (nullable) is None
        # and model_fields_set contains the field
        if self.close_date is None and "close_date" in self.model_fields_set:
            _dict['close_date'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        # set to None if isin (nullable) is None
        # and model_fields_set contains the field
        if self.isin is None and "isin" in self.model_fields_set:
            _dict['isin'] = None

        # set to None if ric (nullable) is None
        # and model_fields_set contains the field
        if self.ric is None and "ric" in self.model_fields_set:
            _dict['ric'] = None

        # set to None if sedol (nullable) is None
        # and model_fields_set contains the field
        if self.sedol is None and "sedol" in self.model_fields_set:
            _dict['sedol'] = None

        # set to None if figi_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.figi_symbol is None and "figi_symbol" in self.model_fields_set:
            _dict['figi_symbol'] = None

        # set to None if share_class_figi (nullable) is None
        # and model_fields_set contains the field
        if self.share_class_figi is None and "share_class_figi" in self.model_fields_set:
            _dict['share_class_figi'] = None

        # set to None if firstbridge_id (nullable) is None
        # and model_fields_set contains the field
        if self.firstbridge_id is None and "firstbridge_id" in self.model_fields_set:
            _dict['firstbridge_id'] = None

        # set to None if firstbridge_parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.firstbridge_parent_id is None and "firstbridge_parent_id" in self.model_fields_set:
            _dict['firstbridge_parent_id'] = None

        # set to None if intrinio_id (nullable) is None
        # and model_fields_set contains the field
        if self.intrinio_id is None and "intrinio_id" in self.model_fields_set:
            _dict['intrinio_id'] = None

        # set to None if intraday_nav_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.intraday_nav_symbol is None and "intraday_nav_symbol" in self.model_fields_set:
            _dict['intraday_nav_symbol'] = None

        # set to None if primary_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.primary_symbol is None and "primary_symbol" in self.model_fields_set:
            _dict['primary_symbol'] = None

        # set to None if etp_structure_type (nullable) is None
        # and model_fields_set contains the field
        if self.etp_structure_type is None and "etp_structure_type" in self.model_fields_set:
            _dict['etp_structure_type'] = None

        # set to None if legal_structure (nullable) is None
        # and model_fields_set contains the field
        if self.legal_structure is None and "legal_structure" in self.model_fields_set:
            _dict['legal_structure'] = None

        # set to None if issuer (nullable) is None
        # and model_fields_set contains the field
        if self.issuer is None and "issuer" in self.model_fields_set:
            _dict['issuer'] = None

        # set to None if etn_issuing_bank (nullable) is None
        # and model_fields_set contains the field
        if self.etn_issuing_bank is None and "etn_issuing_bank" in self.model_fields_set:
            _dict['etn_issuing_bank'] = None

        # set to None if fund_family (nullable) is None
        # and model_fields_set contains the field
        if self.fund_family is None and "fund_family" in self.model_fields_set:
            _dict['fund_family'] = None

        # set to None if investment_style (nullable) is None
        # and model_fields_set contains the field
        if self.investment_style is None and "investment_style" in self.model_fields_set:
            _dict['investment_style'] = None

        # set to None if derivatives_based (nullable) is None
        # and model_fields_set contains the field
        if self.derivatives_based is None and "derivatives_based" in self.model_fields_set:
            _dict['derivatives_based'] = None

        # set to None if income_category (nullable) is None
        # and model_fields_set contains the field
        if self.income_category is None and "income_category" in self.model_fields_set:
            _dict['income_category'] = None

        # set to None if asset_class (nullable) is None
        # and model_fields_set contains the field
        if self.asset_class is None and "asset_class" in self.model_fields_set:
            _dict['asset_class'] = None

        # set to None if other_asset_types (nullable) is None
        # and model_fields_set contains the field
        if self.other_asset_types is None and "other_asset_types" in self.model_fields_set:
            _dict['other_asset_types'] = None

        # set to None if single_category_designation (nullable) is None
        # and model_fields_set contains the field
        if self.single_category_designation is None and "single_category_designation" in self.model_fields_set:
            _dict['single_category_designation'] = None

        # set to None if beta_type (nullable) is None
        # and model_fields_set contains the field
        if self.beta_type is None and "beta_type" in self.model_fields_set:
            _dict['beta_type'] = None

        # set to None if beta_details (nullable) is None
        # and model_fields_set contains the field
        if self.beta_details is None and "beta_details" in self.model_fields_set:
            _dict['beta_details'] = None

        # set to None if market_cap_range (nullable) is None
        # and model_fields_set contains the field
        if self.market_cap_range is None and "market_cap_range" in self.model_fields_set:
            _dict['market_cap_range'] = None

        # set to None if market_cap_weighting_type (nullable) is None
        # and model_fields_set contains the field
        if self.market_cap_weighting_type is None and "market_cap_weighting_type" in self.model_fields_set:
            _dict['market_cap_weighting_type'] = None

        # set to None if index_weighting_scheme (nullable) is None
        # and model_fields_set contains the field
        if self.index_weighting_scheme is None and "index_weighting_scheme" in self.model_fields_set:
            _dict['index_weighting_scheme'] = None

        # set to None if index_linked (nullable) is None
        # and model_fields_set contains the field
        if self.index_linked is None and "index_linked" in self.model_fields_set:
            _dict['index_linked'] = None

        # set to None if index_name (nullable) is None
        # and model_fields_set contains the field
        if self.index_name is None and "index_name" in self.model_fields_set:
            _dict['index_name'] = None

        # set to None if index_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.index_symbol is None and "index_symbol" in self.model_fields_set:
            _dict['index_symbol'] = None

        # set to None if parent_index (nullable) is None
        # and model_fields_set contains the field
        if self.parent_index is None and "parent_index" in self.model_fields_set:
            _dict['parent_index'] = None

        # set to None if index_family (nullable) is None
        # and model_fields_set contains the field
        if self.index_family is None and "index_family" in self.model_fields_set:
            _dict['index_family'] = None

        # set to None if broader_index_family (nullable) is None
        # and model_fields_set contains the field
        if self.broader_index_family is None and "broader_index_family" in self.model_fields_set:
            _dict['broader_index_family'] = None

        # set to None if index_provider (nullable) is None
        # and model_fields_set contains the field
        if self.index_provider is None and "index_provider" in self.model_fields_set:
            _dict['index_provider'] = None

        # set to None if index_provider_code (nullable) is None
        # and model_fields_set contains the field
        if self.index_provider_code is None and "index_provider_code" in self.model_fields_set:
            _dict['index_provider_code'] = None

        # set to None if replication_structure (nullable) is None
        # and model_fields_set contains the field
        if self.replication_structure is None and "replication_structure" in self.model_fields_set:
            _dict['replication_structure'] = None

        # set to None if growth_value_tilt (nullable) is None
        # and model_fields_set contains the field
        if self.growth_value_tilt is None and "growth_value_tilt" in self.model_fields_set:
            _dict['growth_value_tilt'] = None

        # set to None if growth_type (nullable) is None
        # and model_fields_set contains the field
        if self.growth_type is None and "growth_type" in self.model_fields_set:
            _dict['growth_type'] = None

        # set to None if value_type (nullable) is None
        # and model_fields_set contains the field
        if self.value_type is None and "value_type" in self.model_fields_set:
            _dict['value_type'] = None

        # set to None if sector (nullable) is None
        # and model_fields_set contains the field
        if self.sector is None and "sector" in self.model_fields_set:
            _dict['sector'] = None

        # set to None if industry (nullable) is None
        # and model_fields_set contains the field
        if self.industry is None and "industry" in self.model_fields_set:
            _dict['industry'] = None

        # set to None if industry_group (nullable) is None
        # and model_fields_set contains the field
        if self.industry_group is None and "industry_group" in self.model_fields_set:
            _dict['industry_group'] = None

        # set to None if cross_sector_theme (nullable) is None
        # and model_fields_set contains the field
        if self.cross_sector_theme is None and "cross_sector_theme" in self.model_fields_set:
            _dict['cross_sector_theme'] = None

        # set to None if natural_resources_type (nullable) is None
        # and model_fields_set contains the field
        if self.natural_resources_type is None and "natural_resources_type" in self.model_fields_set:
            _dict['natural_resources_type'] = None

        # set to None if us_or_excludes_us (nullable) is None
        # and model_fields_set contains the field
        if self.us_or_excludes_us is None and "us_or_excludes_us" in self.model_fields_set:
            _dict['us_or_excludes_us'] = None

        # set to None if developed_emerging (nullable) is None
        # and model_fields_set contains the field
        if self.developed_emerging is None and "developed_emerging" in self.model_fields_set:
            _dict['developed_emerging'] = None

        # set to None if specialized_region (nullable) is None
        # and model_fields_set contains the field
        if self.specialized_region is None and "specialized_region" in self.model_fields_set:
            _dict['specialized_region'] = None

        # set to None if continent (nullable) is None
        # and model_fields_set contains the field
        if self.continent is None and "continent" in self.model_fields_set:
            _dict['continent'] = None

        # set to None if latin_america_sub_group (nullable) is None
        # and model_fields_set contains the field
        if self.latin_america_sub_group is None and "latin_america_sub_group" in self.model_fields_set:
            _dict['latin_america_sub_group'] = None

        # set to None if europe_sub_group (nullable) is None
        # and model_fields_set contains the field
        if self.europe_sub_group is None and "europe_sub_group" in self.model_fields_set:
            _dict['europe_sub_group'] = None

        # set to None if asia_sub_group (nullable) is None
        # and model_fields_set contains the field
        if self.asia_sub_group is None and "asia_sub_group" in self.model_fields_set:
            _dict['asia_sub_group'] = None

        # set to None if specific_country (nullable) is None
        # and model_fields_set contains the field
        if self.specific_country is None and "specific_country" in self.model_fields_set:
            _dict['specific_country'] = None

        # set to None if china_listing_location (nullable) is None
        # and model_fields_set contains the field
        if self.china_listing_location is None and "china_listing_location" in self.model_fields_set:
            _dict['china_listing_location'] = None

        # set to None if us_state (nullable) is None
        # and model_fields_set contains the field
        if self.us_state is None and "us_state" in self.model_fields_set:
            _dict['us_state'] = None

        # set to None if real_estate (nullable) is None
        # and model_fields_set contains the field
        if self.real_estate is None and "real_estate" in self.model_fields_set:
            _dict['real_estate'] = None

        # set to None if fundamental_weighting_type (nullable) is None
        # and model_fields_set contains the field
        if self.fundamental_weighting_type is None and "fundamental_weighting_type" in self.model_fields_set:
            _dict['fundamental_weighting_type'] = None

        # set to None if dividend_weighting_type (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_weighting_type is None and "dividend_weighting_type" in self.model_fields_set:
            _dict['dividend_weighting_type'] = None

        # set to None if bond_type (nullable) is None
        # and model_fields_set contains the field
        if self.bond_type is None and "bond_type" in self.model_fields_set:
            _dict['bond_type'] = None

        # set to None if government_bond_types (nullable) is None
        # and model_fields_set contains the field
        if self.government_bond_types is None and "government_bond_types" in self.model_fields_set:
            _dict['government_bond_types'] = None

        # set to None if municipal_bond_region (nullable) is None
        # and model_fields_set contains the field
        if self.municipal_bond_region is None and "municipal_bond_region" in self.model_fields_set:
            _dict['municipal_bond_region'] = None

        # set to None if municipal_vrdo (nullable) is None
        # and model_fields_set contains the field
        if self.municipal_vrdo is None and "municipal_vrdo" in self.model_fields_set:
            _dict['municipal_vrdo'] = None

        # set to None if mortgage_bond_types (nullable) is None
        # and model_fields_set contains the field
        if self.mortgage_bond_types is None and "mortgage_bond_types" in self.model_fields_set:
            _dict['mortgage_bond_types'] = None

        # set to None if bond_tax_status (nullable) is None
        # and model_fields_set contains the field
        if self.bond_tax_status is None and "bond_tax_status" in self.model_fields_set:
            _dict['bond_tax_status'] = None

        # set to None if credit_quality (nullable) is None
        # and model_fields_set contains the field
        if self.credit_quality is None and "credit_quality" in self.model_fields_set:
            _dict['credit_quality'] = None

        # set to None if average_maturity (nullable) is None
        # and model_fields_set contains the field
        if self.average_maturity is None and "average_maturity" in self.model_fields_set:
            _dict['average_maturity'] = None

        # set to None if specific_maturity_year (nullable) is None
        # and model_fields_set contains the field
        if self.specific_maturity_year is None and "specific_maturity_year" in self.model_fields_set:
            _dict['specific_maturity_year'] = None

        # set to None if commodity_types (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_types is None and "commodity_types" in self.model_fields_set:
            _dict['commodity_types'] = None

        # set to None if energy_type (nullable) is None
        # and model_fields_set contains the field
        if self.energy_type is None and "energy_type" in self.model_fields_set:
            _dict['energy_type'] = None

        # set to None if agricultural_type (nullable) is None
        # and model_fields_set contains the field
        if self.agricultural_type is None and "agricultural_type" in self.model_fields_set:
            _dict['agricultural_type'] = None

        # set to None if livestock_type (nullable) is None
        # and model_fields_set contains the field
        if self.livestock_type is None and "livestock_type" in self.model_fields_set:
            _dict['livestock_type'] = None

        # set to None if metal_type (nullable) is None
        # and model_fields_set contains the field
        if self.metal_type is None and "metal_type" in self.model_fields_set:
            _dict['metal_type'] = None

        # set to None if inverse_leveraged (nullable) is None
        # and model_fields_set contains the field
        if self.inverse_leveraged is None and "inverse_leveraged" in self.model_fields_set:
            _dict['inverse_leveraged'] = None

        # set to None if target_date_multi_asset_type (nullable) is None
        # and model_fields_set contains the field
        if self.target_date_multi_asset_type is None and "target_date_multi_asset_type" in self.model_fields_set:
            _dict['target_date_multi_asset_type'] = None

        # set to None if currency_pair (nullable) is None
        # and model_fields_set contains the field
        if self.currency_pair is None and "currency_pair" in self.model_fields_set:
            _dict['currency_pair'] = None

        # set to None if social_environmental_type (nullable) is None
        # and model_fields_set contains the field
        if self.social_environmental_type is None and "social_environmental_type" in self.model_fields_set:
            _dict['social_environmental_type'] = None

        # set to None if clean_energy_type (nullable) is None
        # and model_fields_set contains the field
        if self.clean_energy_type is None and "clean_energy_type" in self.model_fields_set:
            _dict['clean_energy_type'] = None

        # set to None if dividend_type (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_type is None and "dividend_type" in self.model_fields_set:
            _dict['dividend_type'] = None

        # set to None if regular_dividend_payor_type (nullable) is None
        # and model_fields_set contains the field
        if self.regular_dividend_payor_type is None and "regular_dividend_payor_type" in self.model_fields_set:
            _dict['regular_dividend_payor_type'] = None

        # set to None if quant_strategies_type (nullable) is None
        # and model_fields_set contains the field
        if self.quant_strategies_type is None and "quant_strategies_type" in self.model_fields_set:
            _dict['quant_strategies_type'] = None

        # set to None if other_quant_models (nullable) is None
        # and model_fields_set contains the field
        if self.other_quant_models is None and "other_quant_models" in self.model_fields_set:
            _dict['other_quant_models'] = None

        # set to None if hedge_fund_type (nullable) is None
        # and model_fields_set contains the field
        if self.hedge_fund_type is None and "hedge_fund_type" in self.model_fields_set:
            _dict['hedge_fund_type'] = None

        # set to None if excludes_financials (nullable) is None
        # and model_fields_set contains the field
        if self.excludes_financials is None and "excludes_financials" in self.model_fields_set:
            _dict['excludes_financials'] = None

        # set to None if excludes_technology (nullable) is None
        # and model_fields_set contains the field
        if self.excludes_technology is None and "excludes_technology" in self.model_fields_set:
            _dict['excludes_technology'] = None

        # set to None if holds_only_nyse_stocks (nullable) is None
        # and model_fields_set contains the field
        if self.holds_only_nyse_stocks is None and "holds_only_nyse_stocks" in self.model_fields_set:
            _dict['holds_only_nyse_stocks'] = None

        # set to None if holds_only_nasdaq_stocks (nullable) is None
        # and model_fields_set contains the field
        if self.holds_only_nasdaq_stocks is None and "holds_only_nasdaq_stocks" in self.model_fields_set:
            _dict['holds_only_nasdaq_stocks'] = None

        # set to None if holds_mlp (nullable) is None
        # and model_fields_set contains the field
        if self.holds_mlp is None and "holds_mlp" in self.model_fields_set:
            _dict['holds_mlp'] = None

        # set to None if holds_preferred_stock (nullable) is None
        # and model_fields_set contains the field
        if self.holds_preferred_stock is None and "holds_preferred_stock" in self.model_fields_set:
            _dict['holds_preferred_stock'] = None

        # set to None if holds_closed_end_funds (nullable) is None
        # and model_fields_set contains the field
        if self.holds_closed_end_funds is None and "holds_closed_end_funds" in self.model_fields_set:
            _dict['holds_closed_end_funds'] = None

        # set to None if holds_adr (nullable) is None
        # and model_fields_set contains the field
        if self.holds_adr is None and "holds_adr" in self.model_fields_set:
            _dict['holds_adr'] = None

        # set to None if laddered (nullable) is None
        # and model_fields_set contains the field
        if self.laddered is None and "laddered" in self.model_fields_set:
            _dict['laddered'] = None

        # set to None if zero_coupon (nullable) is None
        # and model_fields_set contains the field
        if self.zero_coupon is None and "zero_coupon" in self.model_fields_set:
            _dict['zero_coupon'] = None

        # set to None if floating_rate (nullable) is None
        # and model_fields_set contains the field
        if self.floating_rate is None and "floating_rate" in self.model_fields_set:
            _dict['floating_rate'] = None

        # set to None if build_america_bonds (nullable) is None
        # and model_fields_set contains the field
        if self.build_america_bonds is None and "build_america_bonds" in self.model_fields_set:
            _dict['build_america_bonds'] = None

        # set to None if dynamic_futures_roll (nullable) is None
        # and model_fields_set contains the field
        if self.dynamic_futures_roll is None and "dynamic_futures_roll" in self.model_fields_set:
            _dict['dynamic_futures_roll'] = None

        # set to None if currency_hedged (nullable) is None
        # and model_fields_set contains the field
        if self.currency_hedged is None and "currency_hedged" in self.model_fields_set:
            _dict['currency_hedged'] = None

        # set to None if includes_short_exposure (nullable) is None
        # and model_fields_set contains the field
        if self.includes_short_exposure is None and "includes_short_exposure" in self.model_fields_set:
            _dict['includes_short_exposure'] = None

        # set to None if ucits (nullable) is None
        # and model_fields_set contains the field
        if self.ucits is None and "ucits" in self.model_fields_set:
            _dict['ucits'] = None

        # set to None if registered_countries (nullable) is None
        # and model_fields_set contains the field
        if self.registered_countries is None and "registered_countries" in self.model_fields_set:
            _dict['registered_countries'] = None

        # set to None if issuer_country (nullable) is None
        # and model_fields_set contains the field
        if self.issuer_country is None and "issuer_country" in self.model_fields_set:
            _dict['issuer_country'] = None

        # set to None if domicile (nullable) is None
        # and model_fields_set contains the field
        if self.domicile is None and "domicile" in self.model_fields_set:
            _dict['domicile'] = None

        # set to None if listing_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.listing_country_code is None and "listing_country_code" in self.model_fields_set:
            _dict['listing_country_code'] = None

        # set to None if listing_region (nullable) is None
        # and model_fields_set contains the field
        if self.listing_region is None and "listing_region" in self.model_fields_set:
            _dict['listing_region'] = None

        # set to None if bond_currency_denomination (nullable) is None
        # and model_fields_set contains the field
        if self.bond_currency_denomination is None and "bond_currency_denomination" in self.model_fields_set:
            _dict['bond_currency_denomination'] = None

        # set to None if base_currency (nullable) is None
        # and model_fields_set contains the field
        if self.base_currency is None and "base_currency" in self.model_fields_set:
            _dict['base_currency'] = None

        # set to None if listing_currency (nullable) is None
        # and model_fields_set contains the field
        if self.listing_currency is None and "listing_currency" in self.model_fields_set:
            _dict['listing_currency'] = None

        # set to None if number_of_holdings (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_holdings is None and "number_of_holdings" in self.model_fields_set:
            _dict['number_of_holdings'] = None

        # set to None if month_end_assets (nullable) is None
        # and model_fields_set contains the field
        if self.month_end_assets is None and "month_end_assets" in self.model_fields_set:
            _dict['month_end_assets'] = None

        # set to None if net_expense_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.net_expense_ratio is None and "net_expense_ratio" in self.model_fields_set:
            _dict['net_expense_ratio'] = None

        # set to None if etf_portfolio_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.etf_portfolio_turnover is None and "etf_portfolio_turnover" in self.model_fields_set:
            _dict['etf_portfolio_turnover'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioEtfInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "inception_date": obj.get("inception_date"),
            "fund_listing_date": obj.get("fund_listing_date"),
            "data_change_date": obj.get("data_change_date"),
            "etn_maturity_date": obj.get("etn_maturity_date"),
            "is_listed": obj.get("is_listed"),
            "close_date": obj.get("close_date"),
            "exchange": obj.get("exchange"),
            "isin": obj.get("isin"),
            "ric": obj.get("ric"),
            "sedol": obj.get("sedol"),
            "figi_symbol": obj.get("figi_symbol"),
            "share_class_figi": obj.get("share_class_figi"),
            "firstbridge_id": obj.get("firstbridge_id"),
            "firstbridge_parent_id": obj.get("firstbridge_parent_id"),
            "intrinio_id": obj.get("intrinio_id"),
            "intraday_nav_symbol": obj.get("intraday_nav_symbol"),
            "primary_symbol": obj.get("primary_symbol"),
            "etp_structure_type": obj.get("etp_structure_type"),
            "legal_structure": obj.get("legal_structure"),
            "issuer": obj.get("issuer"),
            "etn_issuing_bank": obj.get("etn_issuing_bank"),
            "fund_family": obj.get("fund_family"),
            "investment_style": obj.get("investment_style"),
            "derivatives_based": obj.get("derivatives_based"),
            "income_category": obj.get("income_category"),
            "asset_class": obj.get("asset_class"),
            "other_asset_types": obj.get("other_asset_types"),
            "single_category_designation": obj.get("single_category_designation"),
            "beta_type": obj.get("beta_type"),
            "beta_details": obj.get("beta_details"),
            "market_cap_range": obj.get("market_cap_range"),
            "market_cap_weighting_type": obj.get("market_cap_weighting_type"),
            "index_weighting_scheme": obj.get("index_weighting_scheme"),
            "index_linked": obj.get("index_linked"),
            "index_name": obj.get("index_name"),
            "index_symbol": obj.get("index_symbol"),
            "parent_index": obj.get("parent_index"),
            "index_family": obj.get("index_family"),
            "broader_index_family": obj.get("broader_index_family"),
            "index_provider": obj.get("index_provider"),
            "index_provider_code": obj.get("index_provider_code"),
            "replication_structure": obj.get("replication_structure"),
            "growth_value_tilt": obj.get("growth_value_tilt"),
            "growth_type": obj.get("growth_type"),
            "value_type": obj.get("value_type"),
            "sector": obj.get("sector"),
            "industry": obj.get("industry"),
            "industry_group": obj.get("industry_group"),
            "cross_sector_theme": obj.get("cross_sector_theme"),
            "natural_resources_type": obj.get("natural_resources_type"),
            "us_or_excludes_us": obj.get("us_or_excludes_us"),
            "developed_emerging": obj.get("developed_emerging"),
            "specialized_region": obj.get("specialized_region"),
            "continent": obj.get("continent"),
            "latin_america_sub_group": obj.get("latin_america_sub_group"),
            "europe_sub_group": obj.get("europe_sub_group"),
            "asia_sub_group": obj.get("asia_sub_group"),
            "specific_country": obj.get("specific_country"),
            "china_listing_location": obj.get("china_listing_location"),
            "us_state": obj.get("us_state"),
            "real_estate": obj.get("real_estate"),
            "fundamental_weighting_type": obj.get("fundamental_weighting_type"),
            "dividend_weighting_type": obj.get("dividend_weighting_type"),
            "bond_type": obj.get("bond_type"),
            "government_bond_types": obj.get("government_bond_types"),
            "municipal_bond_region": obj.get("municipal_bond_region"),
            "municipal_vrdo": obj.get("municipal_vrdo"),
            "mortgage_bond_types": obj.get("mortgage_bond_types"),
            "bond_tax_status": obj.get("bond_tax_status"),
            "credit_quality": obj.get("credit_quality"),
            "average_maturity": obj.get("average_maturity"),
            "specific_maturity_year": obj.get("specific_maturity_year"),
            "commodity_types": obj.get("commodity_types"),
            "energy_type": obj.get("energy_type"),
            "agricultural_type": obj.get("agricultural_type"),
            "livestock_type": obj.get("livestock_type"),
            "metal_type": obj.get("metal_type"),
            "inverse_leveraged": obj.get("inverse_leveraged"),
            "target_date_multi_asset_type": obj.get("target_date_multi_asset_type"),
            "currency_pair": obj.get("currency_pair"),
            "social_environmental_type": obj.get("social_environmental_type"),
            "clean_energy_type": obj.get("clean_energy_type"),
            "dividend_type": obj.get("dividend_type"),
            "regular_dividend_payor_type": obj.get("regular_dividend_payor_type"),
            "quant_strategies_type": obj.get("quant_strategies_type"),
            "other_quant_models": obj.get("other_quant_models"),
            "hedge_fund_type": obj.get("hedge_fund_type"),
            "excludes_financials": obj.get("excludes_financials"),
            "excludes_technology": obj.get("excludes_technology"),
            "holds_only_nyse_stocks": obj.get("holds_only_nyse_stocks"),
            "holds_only_nasdaq_stocks": obj.get("holds_only_nasdaq_stocks"),
            "holds_mlp": obj.get("holds_mlp"),
            "holds_preferred_stock": obj.get("holds_preferred_stock"),
            "holds_closed_end_funds": obj.get("holds_closed_end_funds"),
            "holds_adr": obj.get("holds_adr"),
            "laddered": obj.get("laddered"),
            "zero_coupon": obj.get("zero_coupon"),
            "floating_rate": obj.get("floating_rate"),
            "build_america_bonds": obj.get("build_america_bonds"),
            "dynamic_futures_roll": obj.get("dynamic_futures_roll"),
            "currency_hedged": obj.get("currency_hedged"),
            "includes_short_exposure": obj.get("includes_short_exposure"),
            "ucits": obj.get("ucits"),
            "registered_countries": obj.get("registered_countries"),
            "issuer_country": obj.get("issuer_country"),
            "domicile": obj.get("domicile"),
            "listing_country_code": obj.get("listing_country_code"),
            "listing_region": obj.get("listing_region"),
            "bond_currency_denomination": obj.get("bond_currency_denomination"),
            "base_currency": obj.get("base_currency"),
            "listing_currency": obj.get("listing_currency"),
            "number_of_holdings": obj.get("number_of_holdings"),
            "month_end_assets": obj.get("month_end_assets"),
            "net_expense_ratio": obj.get("net_expense_ratio"),
            "etf_portfolio_turnover": obj.get("etf_portfolio_turnover")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


