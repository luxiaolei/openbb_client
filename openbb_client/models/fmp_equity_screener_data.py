# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPEquityScreenerData(BaseModel):
    """
    FMP Equity Screener Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    name: Optional[StrictStr] = None
    market_cap: Optional[StrictInt] = None
    sector: Optional[StrictStr] = None
    industry: Optional[StrictStr] = None
    beta: Optional[Union[StrictFloat, StrictInt]] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    last_annual_dividend: Optional[Union[StrictFloat, StrictInt]] = None
    volume: Optional[StrictInt] = None
    exchange: Optional[StrictStr] = None
    exchange_name: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    is_etf: Optional[StrictBool] = None
    actively_trading: Optional[StrictBool] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "name", "market_cap", "sector", "industry", "beta", "price", "last_annual_dividend", "volume", "exchange", "exchange_name", "country", "is_etf", "actively_trading"]

    @field_validator('is_etf')
    def is_etf_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    @field_validator('actively_trading')
    def actively_trading_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPEquityScreenerData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if market_cap (nullable) is None
        # and model_fields_set contains the field
        if self.market_cap is None and "market_cap" in self.model_fields_set:
            _dict['market_cap'] = None

        # set to None if sector (nullable) is None
        # and model_fields_set contains the field
        if self.sector is None and "sector" in self.model_fields_set:
            _dict['sector'] = None

        # set to None if industry (nullable) is None
        # and model_fields_set contains the field
        if self.industry is None and "industry" in self.model_fields_set:
            _dict['industry'] = None

        # set to None if beta (nullable) is None
        # and model_fields_set contains the field
        if self.beta is None and "beta" in self.model_fields_set:
            _dict['beta'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if last_annual_dividend (nullable) is None
        # and model_fields_set contains the field
        if self.last_annual_dividend is None and "last_annual_dividend" in self.model_fields_set:
            _dict['last_annual_dividend'] = None

        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        # set to None if exchange_name (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_name is None and "exchange_name" in self.model_fields_set:
            _dict['exchange_name'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if is_etf (nullable) is None
        # and model_fields_set contains the field
        if self.is_etf is None and "is_etf" in self.model_fields_set:
            _dict['is_etf'] = None

        # set to None if actively_trading (nullable) is None
        # and model_fields_set contains the field
        if self.actively_trading is None and "actively_trading" in self.model_fields_set:
            _dict['actively_trading'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPEquityScreenerData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "name": obj.get("name"),
            "market_cap": obj.get("market_cap"),
            "sector": obj.get("sector"),
            "industry": obj.get("industry"),
            "beta": obj.get("beta"),
            "price": obj.get("price"),
            "last_annual_dividend": obj.get("last_annual_dividend"),
            "volume": obj.get("volume"),
            "exchange": obj.get("exchange"),
            "exchange_name": obj.get("exchange_name"),
            "country": obj.get("country"),
            "is_etf": obj.get("is_etf"),
            "actively_trading": obj.get("actively_trading")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


