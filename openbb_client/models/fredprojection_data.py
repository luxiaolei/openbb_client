# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FREDPROJECTIONData(BaseModel):
    """
    FRED PROJECTION Data.
    """ # noqa: E501
    var_date: date = Field(description="The date of the data.", alias="date")
    range_high: Optional[Union[StrictFloat, StrictInt]]
    central_tendency_high: Optional[Union[StrictFloat, StrictInt]]
    median: Optional[Union[StrictFloat, StrictInt]]
    range_midpoint: Optional[Union[StrictFloat, StrictInt]]
    central_tendency_midpoint: Optional[Union[StrictFloat, StrictInt]]
    range_low: Optional[Union[StrictFloat, StrictInt]]
    central_tendency_low: Optional[Union[StrictFloat, StrictInt]]
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "range_high", "central_tendency_high", "median", "range_midpoint", "central_tendency_midpoint", "range_low", "central_tendency_low"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FREDPROJECTIONData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if range_high (nullable) is None
        # and model_fields_set contains the field
        if self.range_high is None and "range_high" in self.model_fields_set:
            _dict['range_high'] = None

        # set to None if central_tendency_high (nullable) is None
        # and model_fields_set contains the field
        if self.central_tendency_high is None and "central_tendency_high" in self.model_fields_set:
            _dict['central_tendency_high'] = None

        # set to None if median (nullable) is None
        # and model_fields_set contains the field
        if self.median is None and "median" in self.model_fields_set:
            _dict['median'] = None

        # set to None if range_midpoint (nullable) is None
        # and model_fields_set contains the field
        if self.range_midpoint is None and "range_midpoint" in self.model_fields_set:
            _dict['range_midpoint'] = None

        # set to None if central_tendency_midpoint (nullable) is None
        # and model_fields_set contains the field
        if self.central_tendency_midpoint is None and "central_tendency_midpoint" in self.model_fields_set:
            _dict['central_tendency_midpoint'] = None

        # set to None if range_low (nullable) is None
        # and model_fields_set contains the field
        if self.range_low is None and "range_low" in self.model_fields_set:
            _dict['range_low'] = None

        # set to None if central_tendency_low (nullable) is None
        # and model_fields_set contains the field
        if self.central_tendency_low is None and "central_tendency_low" in self.model_fields_set:
            _dict['central_tendency_low'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FREDPROJECTIONData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "range_high": obj.get("range_high"),
            "central_tendency_high": obj.get("central_tendency_high"),
            "median": obj.get("median"),
            "range_midpoint": obj.get("range_midpoint"),
            "central_tendency_midpoint": obj.get("central_tendency_midpoint"),
            "range_low": obj.get("range_low"),
            "central_tendency_low": obj.get("central_tendency_low")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


