# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IntrinioBalanceSheetData(BaseModel):
    """
    Intrinio Balance Sheet Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end date of the reporting period.")
    fiscal_period: Optional[StrictStr] = None
    fiscal_year: Optional[StrictInt] = None
    reported_currency: Optional[StrictStr] = None
    cash_and_cash_equivalents: Optional[Union[StrictFloat, StrictInt]] = None
    cash_and_due_from_banks: Optional[Union[StrictFloat, StrictInt]] = None
    restricted_cash: Optional[Union[StrictFloat, StrictInt]] = None
    short_term_investments: Optional[Union[StrictFloat, StrictInt]] = None
    federal_funds_sold: Optional[Union[StrictFloat, StrictInt]] = None
    accounts_receivable: Optional[Union[StrictFloat, StrictInt]] = None
    note_and_lease_receivable: Optional[Union[StrictFloat, StrictInt]] = None
    inventories: Optional[Union[StrictFloat, StrictInt]] = None
    customer_and_other_receivables: Optional[Union[StrictFloat, StrictInt]] = None
    interest_bearing_deposits_at_other_banks: Optional[Union[StrictFloat, StrictInt]] = None
    time_deposits_placed_and_other_short_term_investments: Optional[Union[StrictFloat, StrictInt]] = None
    trading_account_securities: Optional[Union[StrictFloat, StrictInt]] = None
    loans_and_leases: Optional[Union[StrictFloat, StrictInt]] = None
    allowance_for_loan_and_lease_losses: Optional[Union[StrictFloat, StrictInt]] = None
    current_deferred_refundable_income_taxes: Optional[Union[StrictFloat, StrictInt]] = None
    other_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    loans_and_leases_net_of_allowance: Optional[Union[StrictFloat, StrictInt]] = None
    accrued_investment_income: Optional[Union[StrictFloat, StrictInt]] = None
    other_current_non_operating_assets: Optional[Union[StrictFloat, StrictInt]] = None
    loans_held_for_sale: Optional[Union[StrictFloat, StrictInt]] = None
    prepaid_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    total_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    plant_property_equipment_gross: Optional[Union[StrictFloat, StrictInt]] = None
    accumulated_depreciation: Optional[Union[StrictFloat, StrictInt]] = None
    premises_and_equipment_net: Optional[Union[StrictFloat, StrictInt]] = None
    plant_property_equipment_net: Optional[Union[StrictFloat, StrictInt]] = None
    long_term_investments: Optional[Union[StrictFloat, StrictInt]] = None
    mortgage_servicing_rights: Optional[Union[StrictFloat, StrictInt]] = None
    unearned_premiums_asset: Optional[Union[StrictFloat, StrictInt]] = None
    non_current_note_lease_receivables: Optional[Union[StrictFloat, StrictInt]] = None
    deferred_acquisition_cost: Optional[Union[StrictFloat, StrictInt]] = None
    goodwill: Optional[Union[StrictFloat, StrictInt]] = None
    separate_account_business_assets: Optional[Union[StrictFloat, StrictInt]] = None
    non_current_deferred_refundable_income_taxes: Optional[Union[StrictFloat, StrictInt]] = None
    intangible_assets: Optional[Union[StrictFloat, StrictInt]] = None
    employee_benefit_assets: Optional[Union[StrictFloat, StrictInt]] = None
    other_assets: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_current_operating_assets: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_current_non_operating_assets: Optional[Union[StrictFloat, StrictInt]] = None
    interest_bearing_deposits: Optional[Union[StrictFloat, StrictInt]] = None
    total_non_current_assets: Optional[Union[StrictFloat, StrictInt]] = None
    total_assets: Optional[Union[StrictFloat, StrictInt]] = None
    non_interest_bearing_deposits: Optional[Union[StrictFloat, StrictInt]] = None
    federal_funds_purchased_and_securities_sold: Optional[Union[StrictFloat, StrictInt]] = None
    bankers_acceptance_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    short_term_debt: Optional[Union[StrictFloat, StrictInt]] = None
    accounts_payable: Optional[Union[StrictFloat, StrictInt]] = None
    current_deferred_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    current_deferred_payable_income_tax_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    accrued_interest_payable: Optional[Union[StrictFloat, StrictInt]] = None
    accrued_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    other_short_term_payables: Optional[Union[StrictFloat, StrictInt]] = None
    customer_deposits: Optional[Union[StrictFloat, StrictInt]] = None
    dividends_payable: Optional[Union[StrictFloat, StrictInt]] = None
    claims_and_claim_expense: Optional[Union[StrictFloat, StrictInt]] = None
    future_policy_benefits: Optional[Union[StrictFloat, StrictInt]] = None
    current_employee_benefit_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    unearned_premiums_liability: Optional[Union[StrictFloat, StrictInt]] = None
    other_taxes_payable: Optional[Union[StrictFloat, StrictInt]] = None
    policy_holder_funds: Optional[Union[StrictFloat, StrictInt]] = None
    other_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    other_current_non_operating_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    separate_account_business_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    total_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    long_term_debt: Optional[Union[StrictFloat, StrictInt]] = None
    other_long_term_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    non_current_deferred_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    non_current_deferred_payable_income_tax_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    non_current_employee_benefit_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_current_operating_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_current_non_operating_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    total_non_current_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    capital_lease_obligations: Optional[Union[StrictFloat, StrictInt]] = None
    asset_retirement_reserve_litigation_obligation: Optional[Union[StrictFloat, StrictInt]] = None
    total_liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    commitments_contingencies: Optional[Union[StrictFloat, StrictInt]] = None
    redeemable_non_controlling_interest: Optional[Union[StrictFloat, StrictInt]] = None
    preferred_stock: Optional[Union[StrictFloat, StrictInt]] = None
    common_stock: Optional[Union[StrictFloat, StrictInt]] = None
    retained_earnings: Optional[Union[StrictFloat, StrictInt]] = None
    treasury_stock: Optional[Union[StrictFloat, StrictInt]] = None
    accumulated_other_comprehensive_income: Optional[Union[StrictFloat, StrictInt]] = None
    participating_policy_holder_equity: Optional[Union[StrictFloat, StrictInt]] = None
    other_equity_adjustments: Optional[Union[StrictFloat, StrictInt]] = None
    total_common_equity: Optional[Union[StrictFloat, StrictInt]] = None
    total_preferred_common_equity: Optional[Union[StrictFloat, StrictInt]] = None
    non_controlling_interest: Optional[Union[StrictFloat, StrictInt]] = None
    total_equity_non_controlling_interests: Optional[Union[StrictFloat, StrictInt]] = None
    total_liabilities_shareholders_equity: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "reported_currency", "cash_and_cash_equivalents", "cash_and_due_from_banks", "restricted_cash", "short_term_investments", "federal_funds_sold", "accounts_receivable", "note_and_lease_receivable", "inventories", "customer_and_other_receivables", "interest_bearing_deposits_at_other_banks", "time_deposits_placed_and_other_short_term_investments", "trading_account_securities", "loans_and_leases", "allowance_for_loan_and_lease_losses", "current_deferred_refundable_income_taxes", "other_current_assets", "loans_and_leases_net_of_allowance", "accrued_investment_income", "other_current_non_operating_assets", "loans_held_for_sale", "prepaid_expenses", "total_current_assets", "plant_property_equipment_gross", "accumulated_depreciation", "premises_and_equipment_net", "plant_property_equipment_net", "long_term_investments", "mortgage_servicing_rights", "unearned_premiums_asset", "non_current_note_lease_receivables", "deferred_acquisition_cost", "goodwill", "separate_account_business_assets", "non_current_deferred_refundable_income_taxes", "intangible_assets", "employee_benefit_assets", "other_assets", "other_non_current_operating_assets", "other_non_current_non_operating_assets", "interest_bearing_deposits", "total_non_current_assets", "total_assets", "non_interest_bearing_deposits", "federal_funds_purchased_and_securities_sold", "bankers_acceptance_outstanding", "short_term_debt", "accounts_payable", "current_deferred_revenue", "current_deferred_payable_income_tax_liabilities", "accrued_interest_payable", "accrued_expenses", "other_short_term_payables", "customer_deposits", "dividends_payable", "claims_and_claim_expense", "future_policy_benefits", "current_employee_benefit_liabilities", "unearned_premiums_liability", "other_taxes_payable", "policy_holder_funds", "other_current_liabilities", "other_current_non_operating_liabilities", "separate_account_business_liabilities", "total_current_liabilities", "long_term_debt", "other_long_term_liabilities", "non_current_deferred_revenue", "non_current_deferred_payable_income_tax_liabilities", "non_current_employee_benefit_liabilities", "other_non_current_operating_liabilities", "other_non_current_non_operating_liabilities", "total_non_current_liabilities", "capital_lease_obligations", "asset_retirement_reserve_litigation_obligation", "total_liabilities", "commitments_contingencies", "redeemable_non_controlling_interest", "preferred_stock", "common_stock", "retained_earnings", "treasury_stock", "accumulated_other_comprehensive_income", "participating_policy_holder_equity", "other_equity_adjustments", "total_common_equity", "total_preferred_common_equity", "non_controlling_interest", "total_equity_non_controlling_interests", "total_liabilities_shareholders_equity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioBalanceSheetData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if reported_currency (nullable) is None
        # and model_fields_set contains the field
        if self.reported_currency is None and "reported_currency" in self.model_fields_set:
            _dict['reported_currency'] = None

        # set to None if cash_and_cash_equivalents (nullable) is None
        # and model_fields_set contains the field
        if self.cash_and_cash_equivalents is None and "cash_and_cash_equivalents" in self.model_fields_set:
            _dict['cash_and_cash_equivalents'] = None

        # set to None if cash_and_due_from_banks (nullable) is None
        # and model_fields_set contains the field
        if self.cash_and_due_from_banks is None and "cash_and_due_from_banks" in self.model_fields_set:
            _dict['cash_and_due_from_banks'] = None

        # set to None if restricted_cash (nullable) is None
        # and model_fields_set contains the field
        if self.restricted_cash is None and "restricted_cash" in self.model_fields_set:
            _dict['restricted_cash'] = None

        # set to None if short_term_investments (nullable) is None
        # and model_fields_set contains the field
        if self.short_term_investments is None and "short_term_investments" in self.model_fields_set:
            _dict['short_term_investments'] = None

        # set to None if federal_funds_sold (nullable) is None
        # and model_fields_set contains the field
        if self.federal_funds_sold is None and "federal_funds_sold" in self.model_fields_set:
            _dict['federal_funds_sold'] = None

        # set to None if accounts_receivable (nullable) is None
        # and model_fields_set contains the field
        if self.accounts_receivable is None and "accounts_receivable" in self.model_fields_set:
            _dict['accounts_receivable'] = None

        # set to None if note_and_lease_receivable (nullable) is None
        # and model_fields_set contains the field
        if self.note_and_lease_receivable is None and "note_and_lease_receivable" in self.model_fields_set:
            _dict['note_and_lease_receivable'] = None

        # set to None if inventories (nullable) is None
        # and model_fields_set contains the field
        if self.inventories is None and "inventories" in self.model_fields_set:
            _dict['inventories'] = None

        # set to None if customer_and_other_receivables (nullable) is None
        # and model_fields_set contains the field
        if self.customer_and_other_receivables is None and "customer_and_other_receivables" in self.model_fields_set:
            _dict['customer_and_other_receivables'] = None

        # set to None if interest_bearing_deposits_at_other_banks (nullable) is None
        # and model_fields_set contains the field
        if self.interest_bearing_deposits_at_other_banks is None and "interest_bearing_deposits_at_other_banks" in self.model_fields_set:
            _dict['interest_bearing_deposits_at_other_banks'] = None

        # set to None if time_deposits_placed_and_other_short_term_investments (nullable) is None
        # and model_fields_set contains the field
        if self.time_deposits_placed_and_other_short_term_investments is None and "time_deposits_placed_and_other_short_term_investments" in self.model_fields_set:
            _dict['time_deposits_placed_and_other_short_term_investments'] = None

        # set to None if trading_account_securities (nullable) is None
        # and model_fields_set contains the field
        if self.trading_account_securities is None and "trading_account_securities" in self.model_fields_set:
            _dict['trading_account_securities'] = None

        # set to None if loans_and_leases (nullable) is None
        # and model_fields_set contains the field
        if self.loans_and_leases is None and "loans_and_leases" in self.model_fields_set:
            _dict['loans_and_leases'] = None

        # set to None if allowance_for_loan_and_lease_losses (nullable) is None
        # and model_fields_set contains the field
        if self.allowance_for_loan_and_lease_losses is None and "allowance_for_loan_and_lease_losses" in self.model_fields_set:
            _dict['allowance_for_loan_and_lease_losses'] = None

        # set to None if current_deferred_refundable_income_taxes (nullable) is None
        # and model_fields_set contains the field
        if self.current_deferred_refundable_income_taxes is None and "current_deferred_refundable_income_taxes" in self.model_fields_set:
            _dict['current_deferred_refundable_income_taxes'] = None

        # set to None if other_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_current_assets is None and "other_current_assets" in self.model_fields_set:
            _dict['other_current_assets'] = None

        # set to None if loans_and_leases_net_of_allowance (nullable) is None
        # and model_fields_set contains the field
        if self.loans_and_leases_net_of_allowance is None and "loans_and_leases_net_of_allowance" in self.model_fields_set:
            _dict['loans_and_leases_net_of_allowance'] = None

        # set to None if accrued_investment_income (nullable) is None
        # and model_fields_set contains the field
        if self.accrued_investment_income is None and "accrued_investment_income" in self.model_fields_set:
            _dict['accrued_investment_income'] = None

        # set to None if other_current_non_operating_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_current_non_operating_assets is None and "other_current_non_operating_assets" in self.model_fields_set:
            _dict['other_current_non_operating_assets'] = None

        # set to None if loans_held_for_sale (nullable) is None
        # and model_fields_set contains the field
        if self.loans_held_for_sale is None and "loans_held_for_sale" in self.model_fields_set:
            _dict['loans_held_for_sale'] = None

        # set to None if prepaid_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.prepaid_expenses is None and "prepaid_expenses" in self.model_fields_set:
            _dict['prepaid_expenses'] = None

        # set to None if total_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_current_assets is None and "total_current_assets" in self.model_fields_set:
            _dict['total_current_assets'] = None

        # set to None if plant_property_equipment_gross (nullable) is None
        # and model_fields_set contains the field
        if self.plant_property_equipment_gross is None and "plant_property_equipment_gross" in self.model_fields_set:
            _dict['plant_property_equipment_gross'] = None

        # set to None if accumulated_depreciation (nullable) is None
        # and model_fields_set contains the field
        if self.accumulated_depreciation is None and "accumulated_depreciation" in self.model_fields_set:
            _dict['accumulated_depreciation'] = None

        # set to None if premises_and_equipment_net (nullable) is None
        # and model_fields_set contains the field
        if self.premises_and_equipment_net is None and "premises_and_equipment_net" in self.model_fields_set:
            _dict['premises_and_equipment_net'] = None

        # set to None if plant_property_equipment_net (nullable) is None
        # and model_fields_set contains the field
        if self.plant_property_equipment_net is None and "plant_property_equipment_net" in self.model_fields_set:
            _dict['plant_property_equipment_net'] = None

        # set to None if long_term_investments (nullable) is None
        # and model_fields_set contains the field
        if self.long_term_investments is None and "long_term_investments" in self.model_fields_set:
            _dict['long_term_investments'] = None

        # set to None if mortgage_servicing_rights (nullable) is None
        # and model_fields_set contains the field
        if self.mortgage_servicing_rights is None and "mortgage_servicing_rights" in self.model_fields_set:
            _dict['mortgage_servicing_rights'] = None

        # set to None if unearned_premiums_asset (nullable) is None
        # and model_fields_set contains the field
        if self.unearned_premiums_asset is None and "unearned_premiums_asset" in self.model_fields_set:
            _dict['unearned_premiums_asset'] = None

        # set to None if non_current_note_lease_receivables (nullable) is None
        # and model_fields_set contains the field
        if self.non_current_note_lease_receivables is None and "non_current_note_lease_receivables" in self.model_fields_set:
            _dict['non_current_note_lease_receivables'] = None

        # set to None if deferred_acquisition_cost (nullable) is None
        # and model_fields_set contains the field
        if self.deferred_acquisition_cost is None and "deferred_acquisition_cost" in self.model_fields_set:
            _dict['deferred_acquisition_cost'] = None

        # set to None if goodwill (nullable) is None
        # and model_fields_set contains the field
        if self.goodwill is None and "goodwill" in self.model_fields_set:
            _dict['goodwill'] = None

        # set to None if separate_account_business_assets (nullable) is None
        # and model_fields_set contains the field
        if self.separate_account_business_assets is None and "separate_account_business_assets" in self.model_fields_set:
            _dict['separate_account_business_assets'] = None

        # set to None if non_current_deferred_refundable_income_taxes (nullable) is None
        # and model_fields_set contains the field
        if self.non_current_deferred_refundable_income_taxes is None and "non_current_deferred_refundable_income_taxes" in self.model_fields_set:
            _dict['non_current_deferred_refundable_income_taxes'] = None

        # set to None if intangible_assets (nullable) is None
        # and model_fields_set contains the field
        if self.intangible_assets is None and "intangible_assets" in self.model_fields_set:
            _dict['intangible_assets'] = None

        # set to None if employee_benefit_assets (nullable) is None
        # and model_fields_set contains the field
        if self.employee_benefit_assets is None and "employee_benefit_assets" in self.model_fields_set:
            _dict['employee_benefit_assets'] = None

        # set to None if other_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_assets is None and "other_assets" in self.model_fields_set:
            _dict['other_assets'] = None

        # set to None if other_non_current_operating_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_current_operating_assets is None and "other_non_current_operating_assets" in self.model_fields_set:
            _dict['other_non_current_operating_assets'] = None

        # set to None if other_non_current_non_operating_assets (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_current_non_operating_assets is None and "other_non_current_non_operating_assets" in self.model_fields_set:
            _dict['other_non_current_non_operating_assets'] = None

        # set to None if interest_bearing_deposits (nullable) is None
        # and model_fields_set contains the field
        if self.interest_bearing_deposits is None and "interest_bearing_deposits" in self.model_fields_set:
            _dict['interest_bearing_deposits'] = None

        # set to None if total_non_current_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_non_current_assets is None and "total_non_current_assets" in self.model_fields_set:
            _dict['total_non_current_assets'] = None

        # set to None if total_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_assets is None and "total_assets" in self.model_fields_set:
            _dict['total_assets'] = None

        # set to None if non_interest_bearing_deposits (nullable) is None
        # and model_fields_set contains the field
        if self.non_interest_bearing_deposits is None and "non_interest_bearing_deposits" in self.model_fields_set:
            _dict['non_interest_bearing_deposits'] = None

        # set to None if federal_funds_purchased_and_securities_sold (nullable) is None
        # and model_fields_set contains the field
        if self.federal_funds_purchased_and_securities_sold is None and "federal_funds_purchased_and_securities_sold" in self.model_fields_set:
            _dict['federal_funds_purchased_and_securities_sold'] = None

        # set to None if bankers_acceptance_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.bankers_acceptance_outstanding is None and "bankers_acceptance_outstanding" in self.model_fields_set:
            _dict['bankers_acceptance_outstanding'] = None

        # set to None if short_term_debt (nullable) is None
        # and model_fields_set contains the field
        if self.short_term_debt is None and "short_term_debt" in self.model_fields_set:
            _dict['short_term_debt'] = None

        # set to None if accounts_payable (nullable) is None
        # and model_fields_set contains the field
        if self.accounts_payable is None and "accounts_payable" in self.model_fields_set:
            _dict['accounts_payable'] = None

        # set to None if current_deferred_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.current_deferred_revenue is None and "current_deferred_revenue" in self.model_fields_set:
            _dict['current_deferred_revenue'] = None

        # set to None if current_deferred_payable_income_tax_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.current_deferred_payable_income_tax_liabilities is None and "current_deferred_payable_income_tax_liabilities" in self.model_fields_set:
            _dict['current_deferred_payable_income_tax_liabilities'] = None

        # set to None if accrued_interest_payable (nullable) is None
        # and model_fields_set contains the field
        if self.accrued_interest_payable is None and "accrued_interest_payable" in self.model_fields_set:
            _dict['accrued_interest_payable'] = None

        # set to None if accrued_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.accrued_expenses is None and "accrued_expenses" in self.model_fields_set:
            _dict['accrued_expenses'] = None

        # set to None if other_short_term_payables (nullable) is None
        # and model_fields_set contains the field
        if self.other_short_term_payables is None and "other_short_term_payables" in self.model_fields_set:
            _dict['other_short_term_payables'] = None

        # set to None if customer_deposits (nullable) is None
        # and model_fields_set contains the field
        if self.customer_deposits is None and "customer_deposits" in self.model_fields_set:
            _dict['customer_deposits'] = None

        # set to None if dividends_payable (nullable) is None
        # and model_fields_set contains the field
        if self.dividends_payable is None and "dividends_payable" in self.model_fields_set:
            _dict['dividends_payable'] = None

        # set to None if claims_and_claim_expense (nullable) is None
        # and model_fields_set contains the field
        if self.claims_and_claim_expense is None and "claims_and_claim_expense" in self.model_fields_set:
            _dict['claims_and_claim_expense'] = None

        # set to None if future_policy_benefits (nullable) is None
        # and model_fields_set contains the field
        if self.future_policy_benefits is None and "future_policy_benefits" in self.model_fields_set:
            _dict['future_policy_benefits'] = None

        # set to None if current_employee_benefit_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.current_employee_benefit_liabilities is None and "current_employee_benefit_liabilities" in self.model_fields_set:
            _dict['current_employee_benefit_liabilities'] = None

        # set to None if unearned_premiums_liability (nullable) is None
        # and model_fields_set contains the field
        if self.unearned_premiums_liability is None and "unearned_premiums_liability" in self.model_fields_set:
            _dict['unearned_premiums_liability'] = None

        # set to None if other_taxes_payable (nullable) is None
        # and model_fields_set contains the field
        if self.other_taxes_payable is None and "other_taxes_payable" in self.model_fields_set:
            _dict['other_taxes_payable'] = None

        # set to None if policy_holder_funds (nullable) is None
        # and model_fields_set contains the field
        if self.policy_holder_funds is None and "policy_holder_funds" in self.model_fields_set:
            _dict['policy_holder_funds'] = None

        # set to None if other_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_current_liabilities is None and "other_current_liabilities" in self.model_fields_set:
            _dict['other_current_liabilities'] = None

        # set to None if other_current_non_operating_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_current_non_operating_liabilities is None and "other_current_non_operating_liabilities" in self.model_fields_set:
            _dict['other_current_non_operating_liabilities'] = None

        # set to None if separate_account_business_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.separate_account_business_liabilities is None and "separate_account_business_liabilities" in self.model_fields_set:
            _dict['separate_account_business_liabilities'] = None

        # set to None if total_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_current_liabilities is None and "total_current_liabilities" in self.model_fields_set:
            _dict['total_current_liabilities'] = None

        # set to None if long_term_debt (nullable) is None
        # and model_fields_set contains the field
        if self.long_term_debt is None and "long_term_debt" in self.model_fields_set:
            _dict['long_term_debt'] = None

        # set to None if other_long_term_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_long_term_liabilities is None and "other_long_term_liabilities" in self.model_fields_set:
            _dict['other_long_term_liabilities'] = None

        # set to None if non_current_deferred_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.non_current_deferred_revenue is None and "non_current_deferred_revenue" in self.model_fields_set:
            _dict['non_current_deferred_revenue'] = None

        # set to None if non_current_deferred_payable_income_tax_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.non_current_deferred_payable_income_tax_liabilities is None and "non_current_deferred_payable_income_tax_liabilities" in self.model_fields_set:
            _dict['non_current_deferred_payable_income_tax_liabilities'] = None

        # set to None if non_current_employee_benefit_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.non_current_employee_benefit_liabilities is None and "non_current_employee_benefit_liabilities" in self.model_fields_set:
            _dict['non_current_employee_benefit_liabilities'] = None

        # set to None if other_non_current_operating_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_current_operating_liabilities is None and "other_non_current_operating_liabilities" in self.model_fields_set:
            _dict['other_non_current_operating_liabilities'] = None

        # set to None if other_non_current_non_operating_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_current_non_operating_liabilities is None and "other_non_current_non_operating_liabilities" in self.model_fields_set:
            _dict['other_non_current_non_operating_liabilities'] = None

        # set to None if total_non_current_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_non_current_liabilities is None and "total_non_current_liabilities" in self.model_fields_set:
            _dict['total_non_current_liabilities'] = None

        # set to None if capital_lease_obligations (nullable) is None
        # and model_fields_set contains the field
        if self.capital_lease_obligations is None and "capital_lease_obligations" in self.model_fields_set:
            _dict['capital_lease_obligations'] = None

        # set to None if asset_retirement_reserve_litigation_obligation (nullable) is None
        # and model_fields_set contains the field
        if self.asset_retirement_reserve_litigation_obligation is None and "asset_retirement_reserve_litigation_obligation" in self.model_fields_set:
            _dict['asset_retirement_reserve_litigation_obligation'] = None

        # set to None if total_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities is None and "total_liabilities" in self.model_fields_set:
            _dict['total_liabilities'] = None

        # set to None if commitments_contingencies (nullable) is None
        # and model_fields_set contains the field
        if self.commitments_contingencies is None and "commitments_contingencies" in self.model_fields_set:
            _dict['commitments_contingencies'] = None

        # set to None if redeemable_non_controlling_interest (nullable) is None
        # and model_fields_set contains the field
        if self.redeemable_non_controlling_interest is None and "redeemable_non_controlling_interest" in self.model_fields_set:
            _dict['redeemable_non_controlling_interest'] = None

        # set to None if preferred_stock (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_stock is None and "preferred_stock" in self.model_fields_set:
            _dict['preferred_stock'] = None

        # set to None if common_stock (nullable) is None
        # and model_fields_set contains the field
        if self.common_stock is None and "common_stock" in self.model_fields_set:
            _dict['common_stock'] = None

        # set to None if retained_earnings (nullable) is None
        # and model_fields_set contains the field
        if self.retained_earnings is None and "retained_earnings" in self.model_fields_set:
            _dict['retained_earnings'] = None

        # set to None if treasury_stock (nullable) is None
        # and model_fields_set contains the field
        if self.treasury_stock is None and "treasury_stock" in self.model_fields_set:
            _dict['treasury_stock'] = None

        # set to None if accumulated_other_comprehensive_income (nullable) is None
        # and model_fields_set contains the field
        if self.accumulated_other_comprehensive_income is None and "accumulated_other_comprehensive_income" in self.model_fields_set:
            _dict['accumulated_other_comprehensive_income'] = None

        # set to None if participating_policy_holder_equity (nullable) is None
        # and model_fields_set contains the field
        if self.participating_policy_holder_equity is None and "participating_policy_holder_equity" in self.model_fields_set:
            _dict['participating_policy_holder_equity'] = None

        # set to None if other_equity_adjustments (nullable) is None
        # and model_fields_set contains the field
        if self.other_equity_adjustments is None and "other_equity_adjustments" in self.model_fields_set:
            _dict['other_equity_adjustments'] = None

        # set to None if total_common_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_common_equity is None and "total_common_equity" in self.model_fields_set:
            _dict['total_common_equity'] = None

        # set to None if total_preferred_common_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_preferred_common_equity is None and "total_preferred_common_equity" in self.model_fields_set:
            _dict['total_preferred_common_equity'] = None

        # set to None if non_controlling_interest (nullable) is None
        # and model_fields_set contains the field
        if self.non_controlling_interest is None and "non_controlling_interest" in self.model_fields_set:
            _dict['non_controlling_interest'] = None

        # set to None if total_equity_non_controlling_interests (nullable) is None
        # and model_fields_set contains the field
        if self.total_equity_non_controlling_interests is None and "total_equity_non_controlling_interests" in self.model_fields_set:
            _dict['total_equity_non_controlling_interests'] = None

        # set to None if total_liabilities_shareholders_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities_shareholders_equity is None and "total_liabilities_shareholders_equity" in self.model_fields_set:
            _dict['total_liabilities_shareholders_equity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioBalanceSheetData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "reported_currency": obj.get("reported_currency"),
            "cash_and_cash_equivalents": obj.get("cash_and_cash_equivalents"),
            "cash_and_due_from_banks": obj.get("cash_and_due_from_banks"),
            "restricted_cash": obj.get("restricted_cash"),
            "short_term_investments": obj.get("short_term_investments"),
            "federal_funds_sold": obj.get("federal_funds_sold"),
            "accounts_receivable": obj.get("accounts_receivable"),
            "note_and_lease_receivable": obj.get("note_and_lease_receivable"),
            "inventories": obj.get("inventories"),
            "customer_and_other_receivables": obj.get("customer_and_other_receivables"),
            "interest_bearing_deposits_at_other_banks": obj.get("interest_bearing_deposits_at_other_banks"),
            "time_deposits_placed_and_other_short_term_investments": obj.get("time_deposits_placed_and_other_short_term_investments"),
            "trading_account_securities": obj.get("trading_account_securities"),
            "loans_and_leases": obj.get("loans_and_leases"),
            "allowance_for_loan_and_lease_losses": obj.get("allowance_for_loan_and_lease_losses"),
            "current_deferred_refundable_income_taxes": obj.get("current_deferred_refundable_income_taxes"),
            "other_current_assets": obj.get("other_current_assets"),
            "loans_and_leases_net_of_allowance": obj.get("loans_and_leases_net_of_allowance"),
            "accrued_investment_income": obj.get("accrued_investment_income"),
            "other_current_non_operating_assets": obj.get("other_current_non_operating_assets"),
            "loans_held_for_sale": obj.get("loans_held_for_sale"),
            "prepaid_expenses": obj.get("prepaid_expenses"),
            "total_current_assets": obj.get("total_current_assets"),
            "plant_property_equipment_gross": obj.get("plant_property_equipment_gross"),
            "accumulated_depreciation": obj.get("accumulated_depreciation"),
            "premises_and_equipment_net": obj.get("premises_and_equipment_net"),
            "plant_property_equipment_net": obj.get("plant_property_equipment_net"),
            "long_term_investments": obj.get("long_term_investments"),
            "mortgage_servicing_rights": obj.get("mortgage_servicing_rights"),
            "unearned_premiums_asset": obj.get("unearned_premiums_asset"),
            "non_current_note_lease_receivables": obj.get("non_current_note_lease_receivables"),
            "deferred_acquisition_cost": obj.get("deferred_acquisition_cost"),
            "goodwill": obj.get("goodwill"),
            "separate_account_business_assets": obj.get("separate_account_business_assets"),
            "non_current_deferred_refundable_income_taxes": obj.get("non_current_deferred_refundable_income_taxes"),
            "intangible_assets": obj.get("intangible_assets"),
            "employee_benefit_assets": obj.get("employee_benefit_assets"),
            "other_assets": obj.get("other_assets"),
            "other_non_current_operating_assets": obj.get("other_non_current_operating_assets"),
            "other_non_current_non_operating_assets": obj.get("other_non_current_non_operating_assets"),
            "interest_bearing_deposits": obj.get("interest_bearing_deposits"),
            "total_non_current_assets": obj.get("total_non_current_assets"),
            "total_assets": obj.get("total_assets"),
            "non_interest_bearing_deposits": obj.get("non_interest_bearing_deposits"),
            "federal_funds_purchased_and_securities_sold": obj.get("federal_funds_purchased_and_securities_sold"),
            "bankers_acceptance_outstanding": obj.get("bankers_acceptance_outstanding"),
            "short_term_debt": obj.get("short_term_debt"),
            "accounts_payable": obj.get("accounts_payable"),
            "current_deferred_revenue": obj.get("current_deferred_revenue"),
            "current_deferred_payable_income_tax_liabilities": obj.get("current_deferred_payable_income_tax_liabilities"),
            "accrued_interest_payable": obj.get("accrued_interest_payable"),
            "accrued_expenses": obj.get("accrued_expenses"),
            "other_short_term_payables": obj.get("other_short_term_payables"),
            "customer_deposits": obj.get("customer_deposits"),
            "dividends_payable": obj.get("dividends_payable"),
            "claims_and_claim_expense": obj.get("claims_and_claim_expense"),
            "future_policy_benefits": obj.get("future_policy_benefits"),
            "current_employee_benefit_liabilities": obj.get("current_employee_benefit_liabilities"),
            "unearned_premiums_liability": obj.get("unearned_premiums_liability"),
            "other_taxes_payable": obj.get("other_taxes_payable"),
            "policy_holder_funds": obj.get("policy_holder_funds"),
            "other_current_liabilities": obj.get("other_current_liabilities"),
            "other_current_non_operating_liabilities": obj.get("other_current_non_operating_liabilities"),
            "separate_account_business_liabilities": obj.get("separate_account_business_liabilities"),
            "total_current_liabilities": obj.get("total_current_liabilities"),
            "long_term_debt": obj.get("long_term_debt"),
            "other_long_term_liabilities": obj.get("other_long_term_liabilities"),
            "non_current_deferred_revenue": obj.get("non_current_deferred_revenue"),
            "non_current_deferred_payable_income_tax_liabilities": obj.get("non_current_deferred_payable_income_tax_liabilities"),
            "non_current_employee_benefit_liabilities": obj.get("non_current_employee_benefit_liabilities"),
            "other_non_current_operating_liabilities": obj.get("other_non_current_operating_liabilities"),
            "other_non_current_non_operating_liabilities": obj.get("other_non_current_non_operating_liabilities"),
            "total_non_current_liabilities": obj.get("total_non_current_liabilities"),
            "capital_lease_obligations": obj.get("capital_lease_obligations"),
            "asset_retirement_reserve_litigation_obligation": obj.get("asset_retirement_reserve_litigation_obligation"),
            "total_liabilities": obj.get("total_liabilities"),
            "commitments_contingencies": obj.get("commitments_contingencies"),
            "redeemable_non_controlling_interest": obj.get("redeemable_non_controlling_interest"),
            "preferred_stock": obj.get("preferred_stock"),
            "common_stock": obj.get("common_stock"),
            "retained_earnings": obj.get("retained_earnings"),
            "treasury_stock": obj.get("treasury_stock"),
            "accumulated_other_comprehensive_income": obj.get("accumulated_other_comprehensive_income"),
            "participating_policy_holder_equity": obj.get("participating_policy_holder_equity"),
            "other_equity_adjustments": obj.get("other_equity_adjustments"),
            "total_common_equity": obj.get("total_common_equity"),
            "total_preferred_common_equity": obj.get("total_preferred_common_equity"),
            "non_controlling_interest": obj.get("non_controlling_interest"),
            "total_equity_non_controlling_interests": obj.get("total_equity_non_controlling_interests"),
            "total_liabilities_shareholders_equity": obj.get("total_liabilities_shareholders_equity")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


