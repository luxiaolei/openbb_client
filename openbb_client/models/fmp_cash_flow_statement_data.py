# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPCashFlowStatementData(BaseModel):
    """
    FMP Cash Flow Statement Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end date of the reporting period.")
    fiscal_period: Optional[StrictStr] = None
    fiscal_year: Optional[StrictInt] = None
    filing_date: Optional[date] = None
    accepted_date: Optional[datetime] = None
    reported_currency: Optional[StrictStr] = None
    net_income: Optional[Union[StrictFloat, StrictInt]] = None
    depreciation_and_amortization: Optional[Union[StrictFloat, StrictInt]] = None
    deferred_income_tax: Optional[Union[StrictFloat, StrictInt]] = None
    stock_based_compensation: Optional[Union[StrictFloat, StrictInt]] = None
    change_in_working_capital: Optional[Union[StrictFloat, StrictInt]] = None
    change_in_account_receivables: Optional[Union[StrictFloat, StrictInt]] = None
    change_in_inventory: Optional[Union[StrictFloat, StrictInt]] = None
    change_in_account_payable: Optional[Union[StrictFloat, StrictInt]] = None
    change_in_other_working_capital: Optional[Union[StrictFloat, StrictInt]] = None
    change_in_other_non_cash_items: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_from_operating_activities: Optional[Union[StrictFloat, StrictInt]] = None
    purchase_of_property_plant_and_equipment: Optional[Union[StrictFloat, StrictInt]] = None
    acquisitions: Optional[Union[StrictFloat, StrictInt]] = None
    purchase_of_investment_securities: Optional[Union[StrictFloat, StrictInt]] = None
    sale_and_maturity_of_investments: Optional[Union[StrictFloat, StrictInt]] = None
    other_investing_activities: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_from_investing_activities: Optional[Union[StrictFloat, StrictInt]] = None
    repayment_of_debt: Optional[Union[StrictFloat, StrictInt]] = None
    issuance_of_common_equity: Optional[Union[StrictFloat, StrictInt]] = None
    repurchase_of_common_equity: Optional[Union[StrictFloat, StrictInt]] = None
    payment_of_dividends: Optional[Union[StrictFloat, StrictInt]] = None
    other_financing_activities: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_from_financing_activities: Optional[Union[StrictFloat, StrictInt]] = None
    effect_of_exchange_rate_changes_on_cash: Optional[Union[StrictFloat, StrictInt]] = None
    net_change_in_cash_and_equivalents: Optional[Union[StrictFloat, StrictInt]] = None
    cash_at_beginning_of_period: Optional[Union[StrictFloat, StrictInt]] = None
    cash_at_end_of_period: Optional[Union[StrictFloat, StrictInt]] = None
    operating_cash_flow: Optional[Union[StrictFloat, StrictInt]] = None
    capital_expenditure: Optional[Union[StrictFloat, StrictInt]] = None
    free_cash_flow: Optional[Union[StrictFloat, StrictInt]] = None
    link: Optional[StrictStr] = None
    final_link: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "filing_date", "accepted_date", "reported_currency", "net_income", "depreciation_and_amortization", "deferred_income_tax", "stock_based_compensation", "change_in_working_capital", "change_in_account_receivables", "change_in_inventory", "change_in_account_payable", "change_in_other_working_capital", "change_in_other_non_cash_items", "net_cash_from_operating_activities", "purchase_of_property_plant_and_equipment", "acquisitions", "purchase_of_investment_securities", "sale_and_maturity_of_investments", "other_investing_activities", "net_cash_from_investing_activities", "repayment_of_debt", "issuance_of_common_equity", "repurchase_of_common_equity", "payment_of_dividends", "other_financing_activities", "net_cash_from_financing_activities", "effect_of_exchange_rate_changes_on_cash", "net_change_in_cash_and_equivalents", "cash_at_beginning_of_period", "cash_at_end_of_period", "operating_cash_flow", "capital_expenditure", "free_cash_flow", "link", "final_link"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPCashFlowStatementData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if filing_date (nullable) is None
        # and model_fields_set contains the field
        if self.filing_date is None and "filing_date" in self.model_fields_set:
            _dict['filing_date'] = None

        # set to None if accepted_date (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_date is None and "accepted_date" in self.model_fields_set:
            _dict['accepted_date'] = None

        # set to None if reported_currency (nullable) is None
        # and model_fields_set contains the field
        if self.reported_currency is None and "reported_currency" in self.model_fields_set:
            _dict['reported_currency'] = None

        # set to None if net_income (nullable) is None
        # and model_fields_set contains the field
        if self.net_income is None and "net_income" in self.model_fields_set:
            _dict['net_income'] = None

        # set to None if depreciation_and_amortization (nullable) is None
        # and model_fields_set contains the field
        if self.depreciation_and_amortization is None and "depreciation_and_amortization" in self.model_fields_set:
            _dict['depreciation_and_amortization'] = None

        # set to None if deferred_income_tax (nullable) is None
        # and model_fields_set contains the field
        if self.deferred_income_tax is None and "deferred_income_tax" in self.model_fields_set:
            _dict['deferred_income_tax'] = None

        # set to None if stock_based_compensation (nullable) is None
        # and model_fields_set contains the field
        if self.stock_based_compensation is None and "stock_based_compensation" in self.model_fields_set:
            _dict['stock_based_compensation'] = None

        # set to None if change_in_working_capital (nullable) is None
        # and model_fields_set contains the field
        if self.change_in_working_capital is None and "change_in_working_capital" in self.model_fields_set:
            _dict['change_in_working_capital'] = None

        # set to None if change_in_account_receivables (nullable) is None
        # and model_fields_set contains the field
        if self.change_in_account_receivables is None and "change_in_account_receivables" in self.model_fields_set:
            _dict['change_in_account_receivables'] = None

        # set to None if change_in_inventory (nullable) is None
        # and model_fields_set contains the field
        if self.change_in_inventory is None and "change_in_inventory" in self.model_fields_set:
            _dict['change_in_inventory'] = None

        # set to None if change_in_account_payable (nullable) is None
        # and model_fields_set contains the field
        if self.change_in_account_payable is None and "change_in_account_payable" in self.model_fields_set:
            _dict['change_in_account_payable'] = None

        # set to None if change_in_other_working_capital (nullable) is None
        # and model_fields_set contains the field
        if self.change_in_other_working_capital is None and "change_in_other_working_capital" in self.model_fields_set:
            _dict['change_in_other_working_capital'] = None

        # set to None if change_in_other_non_cash_items (nullable) is None
        # and model_fields_set contains the field
        if self.change_in_other_non_cash_items is None and "change_in_other_non_cash_items" in self.model_fields_set:
            _dict['change_in_other_non_cash_items'] = None

        # set to None if net_cash_from_operating_activities (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_from_operating_activities is None and "net_cash_from_operating_activities" in self.model_fields_set:
            _dict['net_cash_from_operating_activities'] = None

        # set to None if purchase_of_property_plant_and_equipment (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_of_property_plant_and_equipment is None and "purchase_of_property_plant_and_equipment" in self.model_fields_set:
            _dict['purchase_of_property_plant_and_equipment'] = None

        # set to None if acquisitions (nullable) is None
        # and model_fields_set contains the field
        if self.acquisitions is None and "acquisitions" in self.model_fields_set:
            _dict['acquisitions'] = None

        # set to None if purchase_of_investment_securities (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_of_investment_securities is None and "purchase_of_investment_securities" in self.model_fields_set:
            _dict['purchase_of_investment_securities'] = None

        # set to None if sale_and_maturity_of_investments (nullable) is None
        # and model_fields_set contains the field
        if self.sale_and_maturity_of_investments is None and "sale_and_maturity_of_investments" in self.model_fields_set:
            _dict['sale_and_maturity_of_investments'] = None

        # set to None if other_investing_activities (nullable) is None
        # and model_fields_set contains the field
        if self.other_investing_activities is None and "other_investing_activities" in self.model_fields_set:
            _dict['other_investing_activities'] = None

        # set to None if net_cash_from_investing_activities (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_from_investing_activities is None and "net_cash_from_investing_activities" in self.model_fields_set:
            _dict['net_cash_from_investing_activities'] = None

        # set to None if repayment_of_debt (nullable) is None
        # and model_fields_set contains the field
        if self.repayment_of_debt is None and "repayment_of_debt" in self.model_fields_set:
            _dict['repayment_of_debt'] = None

        # set to None if issuance_of_common_equity (nullable) is None
        # and model_fields_set contains the field
        if self.issuance_of_common_equity is None and "issuance_of_common_equity" in self.model_fields_set:
            _dict['issuance_of_common_equity'] = None

        # set to None if repurchase_of_common_equity (nullable) is None
        # and model_fields_set contains the field
        if self.repurchase_of_common_equity is None and "repurchase_of_common_equity" in self.model_fields_set:
            _dict['repurchase_of_common_equity'] = None

        # set to None if payment_of_dividends (nullable) is None
        # and model_fields_set contains the field
        if self.payment_of_dividends is None and "payment_of_dividends" in self.model_fields_set:
            _dict['payment_of_dividends'] = None

        # set to None if other_financing_activities (nullable) is None
        # and model_fields_set contains the field
        if self.other_financing_activities is None and "other_financing_activities" in self.model_fields_set:
            _dict['other_financing_activities'] = None

        # set to None if net_cash_from_financing_activities (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_from_financing_activities is None and "net_cash_from_financing_activities" in self.model_fields_set:
            _dict['net_cash_from_financing_activities'] = None

        # set to None if effect_of_exchange_rate_changes_on_cash (nullable) is None
        # and model_fields_set contains the field
        if self.effect_of_exchange_rate_changes_on_cash is None and "effect_of_exchange_rate_changes_on_cash" in self.model_fields_set:
            _dict['effect_of_exchange_rate_changes_on_cash'] = None

        # set to None if net_change_in_cash_and_equivalents (nullable) is None
        # and model_fields_set contains the field
        if self.net_change_in_cash_and_equivalents is None and "net_change_in_cash_and_equivalents" in self.model_fields_set:
            _dict['net_change_in_cash_and_equivalents'] = None

        # set to None if cash_at_beginning_of_period (nullable) is None
        # and model_fields_set contains the field
        if self.cash_at_beginning_of_period is None and "cash_at_beginning_of_period" in self.model_fields_set:
            _dict['cash_at_beginning_of_period'] = None

        # set to None if cash_at_end_of_period (nullable) is None
        # and model_fields_set contains the field
        if self.cash_at_end_of_period is None and "cash_at_end_of_period" in self.model_fields_set:
            _dict['cash_at_end_of_period'] = None

        # set to None if operating_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.operating_cash_flow is None and "operating_cash_flow" in self.model_fields_set:
            _dict['operating_cash_flow'] = None

        # set to None if capital_expenditure (nullable) is None
        # and model_fields_set contains the field
        if self.capital_expenditure is None and "capital_expenditure" in self.model_fields_set:
            _dict['capital_expenditure'] = None

        # set to None if free_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow is None and "free_cash_flow" in self.model_fields_set:
            _dict['free_cash_flow'] = None

        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        # set to None if final_link (nullable) is None
        # and model_fields_set contains the field
        if self.final_link is None and "final_link" in self.model_fields_set:
            _dict['final_link'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPCashFlowStatementData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "filing_date": obj.get("filing_date"),
            "accepted_date": obj.get("accepted_date"),
            "reported_currency": obj.get("reported_currency"),
            "net_income": obj.get("net_income"),
            "depreciation_and_amortization": obj.get("depreciation_and_amortization"),
            "deferred_income_tax": obj.get("deferred_income_tax"),
            "stock_based_compensation": obj.get("stock_based_compensation"),
            "change_in_working_capital": obj.get("change_in_working_capital"),
            "change_in_account_receivables": obj.get("change_in_account_receivables"),
            "change_in_inventory": obj.get("change_in_inventory"),
            "change_in_account_payable": obj.get("change_in_account_payable"),
            "change_in_other_working_capital": obj.get("change_in_other_working_capital"),
            "change_in_other_non_cash_items": obj.get("change_in_other_non_cash_items"),
            "net_cash_from_operating_activities": obj.get("net_cash_from_operating_activities"),
            "purchase_of_property_plant_and_equipment": obj.get("purchase_of_property_plant_and_equipment"),
            "acquisitions": obj.get("acquisitions"),
            "purchase_of_investment_securities": obj.get("purchase_of_investment_securities"),
            "sale_and_maturity_of_investments": obj.get("sale_and_maturity_of_investments"),
            "other_investing_activities": obj.get("other_investing_activities"),
            "net_cash_from_investing_activities": obj.get("net_cash_from_investing_activities"),
            "repayment_of_debt": obj.get("repayment_of_debt"),
            "issuance_of_common_equity": obj.get("issuance_of_common_equity"),
            "repurchase_of_common_equity": obj.get("repurchase_of_common_equity"),
            "payment_of_dividends": obj.get("payment_of_dividends"),
            "other_financing_activities": obj.get("other_financing_activities"),
            "net_cash_from_financing_activities": obj.get("net_cash_from_financing_activities"),
            "effect_of_exchange_rate_changes_on_cash": obj.get("effect_of_exchange_rate_changes_on_cash"),
            "net_change_in_cash_and_equivalents": obj.get("net_change_in_cash_and_equivalents"),
            "cash_at_beginning_of_period": obj.get("cash_at_beginning_of_period"),
            "cash_at_end_of_period": obj.get("cash_at_end_of_period"),
            "operating_cash_flow": obj.get("operating_cash_flow"),
            "capital_expenditure": obj.get("capital_expenditure"),
            "free_cash_flow": obj.get("free_cash_flow"),
            "link": obj.get("link"),
            "final_link": obj.get("final_link")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


