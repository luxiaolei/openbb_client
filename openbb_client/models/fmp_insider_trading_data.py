# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.company_cik import CompanyCik
from openbb_client.models.filing_date import FilingDate
from openbb_client.models.owner_cik import OwnerCik
from typing import Optional, Set
from typing_extensions import Self

class FMPInsiderTradingData(BaseModel):
    """
    FMP Insider Trading Data.
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    company_cik: Optional[CompanyCik] = None
    filing_date: Optional[FilingDate] = None
    transaction_date: Optional[date] = None
    owner_cik: Optional[OwnerCik] = None
    owner_name: Optional[StrictStr] = None
    owner_title: Optional[StrictStr] = None
    transaction_type: Optional[StrictStr] = None
    acquisition_or_disposition: Optional[StrictStr] = None
    security_type: Optional[StrictStr] = None
    securities_owned: Optional[Union[StrictFloat, StrictInt]] = None
    securities_transacted: Optional[Union[StrictFloat, StrictInt]] = None
    transaction_price: Optional[Union[StrictFloat, StrictInt]] = None
    filing_url: Optional[StrictStr] = None
    form_type: StrictStr = Field(description="Form type of the insider trading.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "company_cik", "filing_date", "transaction_date", "owner_cik", "owner_name", "owner_title", "transaction_type", "acquisition_or_disposition", "security_type", "securities_owned", "securities_transacted", "transaction_price", "filing_url", "form_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPInsiderTradingData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company_cik
        if self.company_cik:
            _dict['company_cik'] = self.company_cik.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filing_date
        if self.filing_date:
            _dict['filing_date'] = self.filing_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_cik
        if self.owner_cik:
            _dict['owner_cik'] = self.owner_cik.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if company_cik (nullable) is None
        # and model_fields_set contains the field
        if self.company_cik is None and "company_cik" in self.model_fields_set:
            _dict['company_cik'] = None

        # set to None if filing_date (nullable) is None
        # and model_fields_set contains the field
        if self.filing_date is None and "filing_date" in self.model_fields_set:
            _dict['filing_date'] = None

        # set to None if transaction_date (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_date is None and "transaction_date" in self.model_fields_set:
            _dict['transaction_date'] = None

        # set to None if owner_cik (nullable) is None
        # and model_fields_set contains the field
        if self.owner_cik is None and "owner_cik" in self.model_fields_set:
            _dict['owner_cik'] = None

        # set to None if owner_name (nullable) is None
        # and model_fields_set contains the field
        if self.owner_name is None and "owner_name" in self.model_fields_set:
            _dict['owner_name'] = None

        # set to None if owner_title (nullable) is None
        # and model_fields_set contains the field
        if self.owner_title is None and "owner_title" in self.model_fields_set:
            _dict['owner_title'] = None

        # set to None if transaction_type (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_type is None and "transaction_type" in self.model_fields_set:
            _dict['transaction_type'] = None

        # set to None if acquisition_or_disposition (nullable) is None
        # and model_fields_set contains the field
        if self.acquisition_or_disposition is None and "acquisition_or_disposition" in self.model_fields_set:
            _dict['acquisition_or_disposition'] = None

        # set to None if security_type (nullable) is None
        # and model_fields_set contains the field
        if self.security_type is None and "security_type" in self.model_fields_set:
            _dict['security_type'] = None

        # set to None if securities_owned (nullable) is None
        # and model_fields_set contains the field
        if self.securities_owned is None and "securities_owned" in self.model_fields_set:
            _dict['securities_owned'] = None

        # set to None if securities_transacted (nullable) is None
        # and model_fields_set contains the field
        if self.securities_transacted is None and "securities_transacted" in self.model_fields_set:
            _dict['securities_transacted'] = None

        # set to None if transaction_price (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_price is None and "transaction_price" in self.model_fields_set:
            _dict['transaction_price'] = None

        # set to None if filing_url (nullable) is None
        # and model_fields_set contains the field
        if self.filing_url is None and "filing_url" in self.model_fields_set:
            _dict['filing_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPInsiderTradingData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "company_cik": CompanyCik.from_dict(obj["company_cik"]) if obj.get("company_cik") is not None else None,
            "filing_date": FilingDate.from_dict(obj["filing_date"]) if obj.get("filing_date") is not None else None,
            "transaction_date": obj.get("transaction_date"),
            "owner_cik": OwnerCik.from_dict(obj["owner_cik"]) if obj.get("owner_cik") is not None else None,
            "owner_name": obj.get("owner_name"),
            "owner_title": obj.get("owner_title"),
            "transaction_type": obj.get("transaction_type"),
            "acquisition_or_disposition": obj.get("acquisition_or_disposition"),
            "security_type": obj.get("security_type"),
            "securities_owned": obj.get("securities_owned"),
            "securities_transacted": obj.get("securities_transacted"),
            "transaction_price": obj.get("transaction_price"),
            "filing_url": obj.get("filing_url"),
            "form_type": obj.get("form_type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


