# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IntrinioMarketSnapshotsData(BaseModel):
    """
    Intrinio Market Snapshots Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    open: Optional[Union[StrictFloat, StrictInt]] = None
    high: Optional[Union[StrictFloat, StrictInt]] = None
    low: Optional[Union[StrictFloat, StrictInt]] = None
    close: Optional[Union[StrictFloat, StrictInt]] = None
    volume: Optional[StrictInt] = None
    prev_close: Optional[Union[StrictFloat, StrictInt]] = None
    change: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent: Optional[Union[StrictFloat, StrictInt]] = None
    last_price: Optional[Union[StrictFloat, StrictInt]] = None
    last_size: Optional[StrictInt] = None
    last_volume: Optional[StrictInt] = None
    last_trade_timestamp: Optional[datetime] = None
    bid_size: Optional[StrictInt] = None
    bid_price: Optional[Union[StrictFloat, StrictInt]] = None
    ask_price: Optional[Union[StrictFloat, StrictInt]] = None
    ask_size: Optional[StrictInt] = None
    last_bid_timestamp: Optional[datetime] = None
    last_ask_timestamp: Optional[datetime] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "open", "high", "low", "close", "volume", "prev_close", "change", "change_percent", "last_price", "last_size", "last_volume", "last_trade_timestamp", "bid_size", "bid_price", "ask_price", "ask_size", "last_bid_timestamp", "last_ask_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioMarketSnapshotsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if open (nullable) is None
        # and model_fields_set contains the field
        if self.open is None and "open" in self.model_fields_set:
            _dict['open'] = None

        # set to None if high (nullable) is None
        # and model_fields_set contains the field
        if self.high is None and "high" in self.model_fields_set:
            _dict['high'] = None

        # set to None if low (nullable) is None
        # and model_fields_set contains the field
        if self.low is None and "low" in self.model_fields_set:
            _dict['low'] = None

        # set to None if close (nullable) is None
        # and model_fields_set contains the field
        if self.close is None and "close" in self.model_fields_set:
            _dict['close'] = None

        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if prev_close (nullable) is None
        # and model_fields_set contains the field
        if self.prev_close is None and "prev_close" in self.model_fields_set:
            _dict['prev_close'] = None

        # set to None if change (nullable) is None
        # and model_fields_set contains the field
        if self.change is None and "change" in self.model_fields_set:
            _dict['change'] = None

        # set to None if change_percent (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent is None and "change_percent" in self.model_fields_set:
            _dict['change_percent'] = None

        # set to None if last_price (nullable) is None
        # and model_fields_set contains the field
        if self.last_price is None and "last_price" in self.model_fields_set:
            _dict['last_price'] = None

        # set to None if last_size (nullable) is None
        # and model_fields_set contains the field
        if self.last_size is None and "last_size" in self.model_fields_set:
            _dict['last_size'] = None

        # set to None if last_volume (nullable) is None
        # and model_fields_set contains the field
        if self.last_volume is None and "last_volume" in self.model_fields_set:
            _dict['last_volume'] = None

        # set to None if last_trade_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_trade_timestamp is None and "last_trade_timestamp" in self.model_fields_set:
            _dict['last_trade_timestamp'] = None

        # set to None if bid_size (nullable) is None
        # and model_fields_set contains the field
        if self.bid_size is None and "bid_size" in self.model_fields_set:
            _dict['bid_size'] = None

        # set to None if bid_price (nullable) is None
        # and model_fields_set contains the field
        if self.bid_price is None and "bid_price" in self.model_fields_set:
            _dict['bid_price'] = None

        # set to None if ask_price (nullable) is None
        # and model_fields_set contains the field
        if self.ask_price is None and "ask_price" in self.model_fields_set:
            _dict['ask_price'] = None

        # set to None if ask_size (nullable) is None
        # and model_fields_set contains the field
        if self.ask_size is None and "ask_size" in self.model_fields_set:
            _dict['ask_size'] = None

        # set to None if last_bid_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_bid_timestamp is None and "last_bid_timestamp" in self.model_fields_set:
            _dict['last_bid_timestamp'] = None

        # set to None if last_ask_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_ask_timestamp is None and "last_ask_timestamp" in self.model_fields_set:
            _dict['last_ask_timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioMarketSnapshotsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "open": obj.get("open"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "close": obj.get("close"),
            "volume": obj.get("volume"),
            "prev_close": obj.get("prev_close"),
            "change": obj.get("change"),
            "change_percent": obj.get("change_percent"),
            "last_price": obj.get("last_price"),
            "last_size": obj.get("last_size"),
            "last_volume": obj.get("last_volume"),
            "last_trade_timestamp": obj.get("last_trade_timestamp"),
            "bid_size": obj.get("bid_size"),
            "bid_price": obj.get("bid_price"),
            "ask_price": obj.get("ask_price"),
            "ask_size": obj.get("ask_size"),
            "last_bid_timestamp": obj.get("last_bid_timestamp"),
            "last_ask_timestamp": obj.get("last_ask_timestamp")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


