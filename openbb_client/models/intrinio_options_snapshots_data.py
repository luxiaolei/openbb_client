# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IntrinioOptionsSnapshotsData(BaseModel):
    """
    Intrinio Options Snapshots Data. Warning: This is a large file.
    """ # noqa: E501
    underlying_symbol: List[StrictStr] = Field(description="Ticker symbol of the underlying asset.")
    contract_symbol: List[StrictStr] = Field(description="Symbol of the options contract.")
    expiration: List[date] = Field(description="Expiration date of the options contract.")
    dte: Optional[List[Optional[StrictInt]]] = Field(default=None, description="Number of days to expiration of the options contract.")
    strike: List[Union[StrictFloat, StrictInt]] = Field(description="Strike price of the options contract.")
    option_type: List[StrictStr] = Field(description="The type of option.")
    volume: Optional[List[Optional[StrictInt]]] = Field(default=None, description="The trading volume.")
    open_interest: Optional[List[Optional[StrictInt]]] = Field(default=None, description="Open interest at the time.")
    last_price: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="Last trade price at the time.")
    last_size: Optional[List[Optional[StrictInt]]] = Field(default=None, description="Lot size of the last trade.")
    last_timestamp: Optional[List[Optional[datetime]]] = Field(default=None, description="Timestamp of the last price.")
    open: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The open price.")
    high: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The high price.")
    low: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The low price.")
    close: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The close price.")
    bid: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The last bid price at the time.")
    bid_size: Optional[List[Optional[StrictInt]]] = Field(default=None, description="The size of the last bid price.")
    bid_timestamp: Optional[List[Optional[datetime]]] = Field(default=None, description="The timestamp of the last bid price.")
    ask: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The last ask price at the time.")
    ask_size: Optional[List[Optional[StrictInt]]] = Field(default=None, description="The size of the last ask price.")
    ask_timestamp: Optional[List[Optional[datetime]]] = Field(default=None, description="The timestamp of the last ask price.")
    total_bid_volume: Optional[List[Optional[StrictInt]]] = Field(default=None, description="Total volume of bids.")
    bid_high: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The highest bid price.")
    bid_low: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The lowest bid price.")
    total_ask_volume: Optional[List[Optional[StrictInt]]] = Field(default=None, description="Total volume of asks.")
    ask_high: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The highest ask price.")
    ask_low: Optional[List[Optional[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="The lowest ask price.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["underlying_symbol", "contract_symbol", "expiration", "dte", "strike", "option_type", "volume", "open_interest", "last_price", "last_size", "last_timestamp", "open", "high", "low", "close", "bid", "bid_size", "bid_timestamp", "ask", "ask_size", "ask_timestamp", "total_bid_volume", "bid_high", "bid_low", "total_ask_volume", "ask_high", "ask_low"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioOptionsSnapshotsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioOptionsSnapshotsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "underlying_symbol": obj.get("underlying_symbol"),
            "contract_symbol": obj.get("contract_symbol"),
            "expiration": obj.get("expiration"),
            "dte": obj.get("dte"),
            "strike": obj.get("strike"),
            "option_type": obj.get("option_type"),
            "volume": obj.get("volume"),
            "open_interest": obj.get("open_interest"),
            "last_price": obj.get("last_price"),
            "last_size": obj.get("last_size"),
            "last_timestamp": obj.get("last_timestamp"),
            "open": obj.get("open"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "close": obj.get("close"),
            "bid": obj.get("bid"),
            "bid_size": obj.get("bid_size"),
            "bid_timestamp": obj.get("bid_timestamp"),
            "ask": obj.get("ask"),
            "ask_size": obj.get("ask_size"),
            "ask_timestamp": obj.get("ask_timestamp"),
            "total_bid_volume": obj.get("total_bid_volume"),
            "bid_high": obj.get("bid_high"),
            "bid_low": obj.get("bid_low"),
            "total_ask_volume": obj.get("total_ask_volume"),
            "ask_high": obj.get("ask_high"),
            "ask_low": obj.get("ask_low")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


