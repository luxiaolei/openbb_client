# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IntrinioCompanyFilingsData(BaseModel):
    """
    Intrinio Company Filings Data.
    """ # noqa: E501
    filing_date: date = Field(description="The date of the filing.")
    accepted_date: Optional[datetime] = None
    symbol: Optional[StrictStr] = None
    cik: Optional[StrictStr] = None
    report_type: Optional[StrictStr] = None
    filing_url: Optional[StrictStr] = None
    report_url: StrictStr = Field(description="URL to the actual report.")
    id: StrictStr = Field(description="Intrinio ID of the filing.")
    period_end_date: Optional[date] = None
    sec_unique_id: StrictStr = Field(description="SEC unique ID of the filing.")
    instance_url: Optional[StrictStr] = None
    industry_group: StrictStr = Field(description="Industry group of the company.")
    industry_category: StrictStr = Field(description="Industry category of the company.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["filing_date", "accepted_date", "symbol", "cik", "report_type", "filing_url", "report_url", "id", "period_end_date", "sec_unique_id", "instance_url", "industry_group", "industry_category"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioCompanyFilingsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if accepted_date (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_date is None and "accepted_date" in self.model_fields_set:
            _dict['accepted_date'] = None

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if cik (nullable) is None
        # and model_fields_set contains the field
        if self.cik is None and "cik" in self.model_fields_set:
            _dict['cik'] = None

        # set to None if report_type (nullable) is None
        # and model_fields_set contains the field
        if self.report_type is None and "report_type" in self.model_fields_set:
            _dict['report_type'] = None

        # set to None if filing_url (nullable) is None
        # and model_fields_set contains the field
        if self.filing_url is None and "filing_url" in self.model_fields_set:
            _dict['filing_url'] = None

        # set to None if period_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.period_end_date is None and "period_end_date" in self.model_fields_set:
            _dict['period_end_date'] = None

        # set to None if instance_url (nullable) is None
        # and model_fields_set contains the field
        if self.instance_url is None and "instance_url" in self.model_fields_set:
            _dict['instance_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioCompanyFilingsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filing_date": obj.get("filing_date"),
            "accepted_date": obj.get("accepted_date"),
            "symbol": obj.get("symbol"),
            "cik": obj.get("cik"),
            "report_type": obj.get("report_type"),
            "filing_url": obj.get("filing_url"),
            "report_url": obj.get("report_url"),
            "id": obj.get("id"),
            "period_end_date": obj.get("period_end_date"),
            "sec_unique_id": obj.get("sec_unique_id"),
            "instance_url": obj.get("instance_url"),
            "industry_group": obj.get("industry_group"),
            "industry_category": obj.get("industry_category")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


