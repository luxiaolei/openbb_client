# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPAnalystEstimatesData(BaseModel):
    """
    FMP Analyst Estimates Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    var_date: date = Field(description="The date of the data.", alias="date")
    estimated_revenue_low: Optional[StrictInt] = None
    estimated_revenue_high: Optional[StrictInt] = None
    estimated_revenue_avg: Optional[StrictInt] = None
    estimated_sga_expense_low: Optional[StrictInt] = None
    estimated_sga_expense_high: Optional[StrictInt] = None
    estimated_sga_expense_avg: Optional[StrictInt] = None
    estimated_ebitda_low: Optional[StrictInt] = None
    estimated_ebitda_high: Optional[StrictInt] = None
    estimated_ebitda_avg: Optional[StrictInt] = None
    estimated_ebit_low: Optional[StrictInt] = None
    estimated_ebit_high: Optional[StrictInt] = None
    estimated_ebit_avg: Optional[StrictInt] = None
    estimated_net_income_low: Optional[StrictInt] = None
    estimated_net_income_high: Optional[StrictInt] = None
    estimated_net_income_avg: Optional[StrictInt] = None
    estimated_eps_avg: Optional[Union[StrictFloat, StrictInt]] = None
    estimated_eps_high: Optional[Union[StrictFloat, StrictInt]] = None
    estimated_eps_low: Optional[Union[StrictFloat, StrictInt]] = None
    number_analyst_estimated_revenue: Optional[StrictInt] = None
    number_analysts_estimated_eps: Optional[StrictInt] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "date", "estimated_revenue_low", "estimated_revenue_high", "estimated_revenue_avg", "estimated_sga_expense_low", "estimated_sga_expense_high", "estimated_sga_expense_avg", "estimated_ebitda_low", "estimated_ebitda_high", "estimated_ebitda_avg", "estimated_ebit_low", "estimated_ebit_high", "estimated_ebit_avg", "estimated_net_income_low", "estimated_net_income_high", "estimated_net_income_avg", "estimated_eps_avg", "estimated_eps_high", "estimated_eps_low", "number_analyst_estimated_revenue", "number_analysts_estimated_eps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPAnalystEstimatesData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if estimated_revenue_low (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_revenue_low is None and "estimated_revenue_low" in self.model_fields_set:
            _dict['estimated_revenue_low'] = None

        # set to None if estimated_revenue_high (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_revenue_high is None and "estimated_revenue_high" in self.model_fields_set:
            _dict['estimated_revenue_high'] = None

        # set to None if estimated_revenue_avg (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_revenue_avg is None and "estimated_revenue_avg" in self.model_fields_set:
            _dict['estimated_revenue_avg'] = None

        # set to None if estimated_sga_expense_low (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_sga_expense_low is None and "estimated_sga_expense_low" in self.model_fields_set:
            _dict['estimated_sga_expense_low'] = None

        # set to None if estimated_sga_expense_high (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_sga_expense_high is None and "estimated_sga_expense_high" in self.model_fields_set:
            _dict['estimated_sga_expense_high'] = None

        # set to None if estimated_sga_expense_avg (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_sga_expense_avg is None and "estimated_sga_expense_avg" in self.model_fields_set:
            _dict['estimated_sga_expense_avg'] = None

        # set to None if estimated_ebitda_low (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_ebitda_low is None and "estimated_ebitda_low" in self.model_fields_set:
            _dict['estimated_ebitda_low'] = None

        # set to None if estimated_ebitda_high (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_ebitda_high is None and "estimated_ebitda_high" in self.model_fields_set:
            _dict['estimated_ebitda_high'] = None

        # set to None if estimated_ebitda_avg (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_ebitda_avg is None and "estimated_ebitda_avg" in self.model_fields_set:
            _dict['estimated_ebitda_avg'] = None

        # set to None if estimated_ebit_low (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_ebit_low is None and "estimated_ebit_low" in self.model_fields_set:
            _dict['estimated_ebit_low'] = None

        # set to None if estimated_ebit_high (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_ebit_high is None and "estimated_ebit_high" in self.model_fields_set:
            _dict['estimated_ebit_high'] = None

        # set to None if estimated_ebit_avg (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_ebit_avg is None and "estimated_ebit_avg" in self.model_fields_set:
            _dict['estimated_ebit_avg'] = None

        # set to None if estimated_net_income_low (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_net_income_low is None and "estimated_net_income_low" in self.model_fields_set:
            _dict['estimated_net_income_low'] = None

        # set to None if estimated_net_income_high (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_net_income_high is None and "estimated_net_income_high" in self.model_fields_set:
            _dict['estimated_net_income_high'] = None

        # set to None if estimated_net_income_avg (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_net_income_avg is None and "estimated_net_income_avg" in self.model_fields_set:
            _dict['estimated_net_income_avg'] = None

        # set to None if estimated_eps_avg (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_eps_avg is None and "estimated_eps_avg" in self.model_fields_set:
            _dict['estimated_eps_avg'] = None

        # set to None if estimated_eps_high (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_eps_high is None and "estimated_eps_high" in self.model_fields_set:
            _dict['estimated_eps_high'] = None

        # set to None if estimated_eps_low (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_eps_low is None and "estimated_eps_low" in self.model_fields_set:
            _dict['estimated_eps_low'] = None

        # set to None if number_analyst_estimated_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.number_analyst_estimated_revenue is None and "number_analyst_estimated_revenue" in self.model_fields_set:
            _dict['number_analyst_estimated_revenue'] = None

        # set to None if number_analysts_estimated_eps (nullable) is None
        # and model_fields_set contains the field
        if self.number_analysts_estimated_eps is None and "number_analysts_estimated_eps" in self.model_fields_set:
            _dict['number_analysts_estimated_eps'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPAnalystEstimatesData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "date": obj.get("date"),
            "estimated_revenue_low": obj.get("estimated_revenue_low"),
            "estimated_revenue_high": obj.get("estimated_revenue_high"),
            "estimated_revenue_avg": obj.get("estimated_revenue_avg"),
            "estimated_sga_expense_low": obj.get("estimated_sga_expense_low"),
            "estimated_sga_expense_high": obj.get("estimated_sga_expense_high"),
            "estimated_sga_expense_avg": obj.get("estimated_sga_expense_avg"),
            "estimated_ebitda_low": obj.get("estimated_ebitda_low"),
            "estimated_ebitda_high": obj.get("estimated_ebitda_high"),
            "estimated_ebitda_avg": obj.get("estimated_ebitda_avg"),
            "estimated_ebit_low": obj.get("estimated_ebit_low"),
            "estimated_ebit_high": obj.get("estimated_ebit_high"),
            "estimated_ebit_avg": obj.get("estimated_ebit_avg"),
            "estimated_net_income_low": obj.get("estimated_net_income_low"),
            "estimated_net_income_high": obj.get("estimated_net_income_high"),
            "estimated_net_income_avg": obj.get("estimated_net_income_avg"),
            "estimated_eps_avg": obj.get("estimated_eps_avg"),
            "estimated_eps_high": obj.get("estimated_eps_high"),
            "estimated_eps_low": obj.get("estimated_eps_low"),
            "number_analyst_estimated_revenue": obj.get("number_analyst_estimated_revenue"),
            "number_analysts_estimated_eps": obj.get("number_analysts_estimated_eps")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


