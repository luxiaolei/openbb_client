# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.total_value import TotalValue
from typing import Optional, Set
from typing_extensions import Self

class IntrinioOptionsUnusualData(BaseModel):
    """
    Intrinio Unusual Options Data.
    """ # noqa: E501
    underlying_symbol: Optional[StrictStr] = None
    contract_symbol: StrictStr = Field(description="Contract symbol for the option.")
    trade_timestamp: datetime = Field(description="The datetime of order placement.")
    trade_type: StrictStr = Field(description="The type of unusual trade.")
    sentiment: StrictStr = Field(description="Bullish, Bearish, or Neutral Sentiment is estimated based on whether the trade was executed at the bid, ask, or mark price.")
    bid_at_execution: Union[StrictFloat, StrictInt] = Field(description="Bid price at execution.")
    ask_at_execution: Union[StrictFloat, StrictInt] = Field(description="Ask price at execution.")
    average_price: Union[StrictFloat, StrictInt] = Field(description="The average premium paid per option contract.")
    underlying_price_at_execution: Optional[Union[StrictFloat, StrictInt]] = None
    total_size: StrictInt = Field(description="The total number of contracts involved in a single transaction.")
    total_value: TotalValue
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["underlying_symbol", "contract_symbol", "trade_timestamp", "trade_type", "sentiment", "bid_at_execution", "ask_at_execution", "average_price", "underlying_price_at_execution", "total_size", "total_value"]

    @field_validator('trade_type')
    def trade_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['block', 'sweep', 'large']):
            raise ValueError("must be one of enum values ('block', 'sweep', 'large')")
        return value

    @field_validator('sentiment')
    def sentiment_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['bullish', 'bearish', 'neutral']):
            raise ValueError("must be one of enum values ('bullish', 'bearish', 'neutral')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioOptionsUnusualData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total_value
        if self.total_value:
            _dict['total_value'] = self.total_value.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if underlying_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.underlying_symbol is None and "underlying_symbol" in self.model_fields_set:
            _dict['underlying_symbol'] = None

        # set to None if underlying_price_at_execution (nullable) is None
        # and model_fields_set contains the field
        if self.underlying_price_at_execution is None and "underlying_price_at_execution" in self.model_fields_set:
            _dict['underlying_price_at_execution'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioOptionsUnusualData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "underlying_symbol": obj.get("underlying_symbol"),
            "contract_symbol": obj.get("contract_symbol"),
            "trade_timestamp": obj.get("trade_timestamp"),
            "trade_type": obj.get("trade_type"),
            "sentiment": obj.get("sentiment"),
            "bid_at_execution": obj.get("bid_at_execution"),
            "ask_at_execution": obj.get("ask_at_execution"),
            "average_price": obj.get("average_price"),
            "underlying_price_at_execution": obj.get("underlying_price_at_execution"),
            "total_size": obj.get("total_size"),
            "total_value": TotalValue.from_dict(obj["total_value"]) if obj.get("total_value") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


