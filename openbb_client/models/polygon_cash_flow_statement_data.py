# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PolygonCashFlowStatementData(BaseModel):
    """
    Polygon Cash Flow Statement Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end date of the reporting period.")
    fiscal_period: Optional[StrictStr] = None
    fiscal_year: Optional[StrictInt] = None
    net_cash_flow_from_operating_activities_continuing: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_from_operating_activities_discontinued: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_from_operating_activities: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_from_investing_activities_continuing: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_from_investing_activities_discontinued: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_from_investing_activities: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_from_financing_activities_continuing: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_from_financing_activities_discontinued: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_from_financing_activities: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_continuing: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow_discontinued: Optional[Union[StrictFloat, StrictInt]] = None
    exchange_gains_losses: Optional[Union[StrictFloat, StrictInt]] = None
    net_cash_flow: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "net_cash_flow_from_operating_activities_continuing", "net_cash_flow_from_operating_activities_discontinued", "net_cash_flow_from_operating_activities", "net_cash_flow_from_investing_activities_continuing", "net_cash_flow_from_investing_activities_discontinued", "net_cash_flow_from_investing_activities", "net_cash_flow_from_financing_activities_continuing", "net_cash_flow_from_financing_activities_discontinued", "net_cash_flow_from_financing_activities", "net_cash_flow_continuing", "net_cash_flow_discontinued", "exchange_gains_losses", "net_cash_flow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolygonCashFlowStatementData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if net_cash_flow_from_operating_activities_continuing (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_operating_activities_continuing is None and "net_cash_flow_from_operating_activities_continuing" in self.model_fields_set:
            _dict['net_cash_flow_from_operating_activities_continuing'] = None

        # set to None if net_cash_flow_from_operating_activities_discontinued (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_operating_activities_discontinued is None and "net_cash_flow_from_operating_activities_discontinued" in self.model_fields_set:
            _dict['net_cash_flow_from_operating_activities_discontinued'] = None

        # set to None if net_cash_flow_from_operating_activities (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_operating_activities is None and "net_cash_flow_from_operating_activities" in self.model_fields_set:
            _dict['net_cash_flow_from_operating_activities'] = None

        # set to None if net_cash_flow_from_investing_activities_continuing (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_investing_activities_continuing is None and "net_cash_flow_from_investing_activities_continuing" in self.model_fields_set:
            _dict['net_cash_flow_from_investing_activities_continuing'] = None

        # set to None if net_cash_flow_from_investing_activities_discontinued (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_investing_activities_discontinued is None and "net_cash_flow_from_investing_activities_discontinued" in self.model_fields_set:
            _dict['net_cash_flow_from_investing_activities_discontinued'] = None

        # set to None if net_cash_flow_from_investing_activities (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_investing_activities is None and "net_cash_flow_from_investing_activities" in self.model_fields_set:
            _dict['net_cash_flow_from_investing_activities'] = None

        # set to None if net_cash_flow_from_financing_activities_continuing (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_financing_activities_continuing is None and "net_cash_flow_from_financing_activities_continuing" in self.model_fields_set:
            _dict['net_cash_flow_from_financing_activities_continuing'] = None

        # set to None if net_cash_flow_from_financing_activities_discontinued (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_financing_activities_discontinued is None and "net_cash_flow_from_financing_activities_discontinued" in self.model_fields_set:
            _dict['net_cash_flow_from_financing_activities_discontinued'] = None

        # set to None if net_cash_flow_from_financing_activities (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_from_financing_activities is None and "net_cash_flow_from_financing_activities" in self.model_fields_set:
            _dict['net_cash_flow_from_financing_activities'] = None

        # set to None if net_cash_flow_continuing (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_continuing is None and "net_cash_flow_continuing" in self.model_fields_set:
            _dict['net_cash_flow_continuing'] = None

        # set to None if net_cash_flow_discontinued (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow_discontinued is None and "net_cash_flow_discontinued" in self.model_fields_set:
            _dict['net_cash_flow_discontinued'] = None

        # set to None if exchange_gains_losses (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_gains_losses is None and "exchange_gains_losses" in self.model_fields_set:
            _dict['exchange_gains_losses'] = None

        # set to None if net_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.net_cash_flow is None and "net_cash_flow" in self.model_fields_set:
            _dict['net_cash_flow'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolygonCashFlowStatementData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "net_cash_flow_from_operating_activities_continuing": obj.get("net_cash_flow_from_operating_activities_continuing"),
            "net_cash_flow_from_operating_activities_discontinued": obj.get("net_cash_flow_from_operating_activities_discontinued"),
            "net_cash_flow_from_operating_activities": obj.get("net_cash_flow_from_operating_activities"),
            "net_cash_flow_from_investing_activities_continuing": obj.get("net_cash_flow_from_investing_activities_continuing"),
            "net_cash_flow_from_investing_activities_discontinued": obj.get("net_cash_flow_from_investing_activities_discontinued"),
            "net_cash_flow_from_investing_activities": obj.get("net_cash_flow_from_investing_activities"),
            "net_cash_flow_from_financing_activities_continuing": obj.get("net_cash_flow_from_financing_activities_continuing"),
            "net_cash_flow_from_financing_activities_discontinued": obj.get("net_cash_flow_from_financing_activities_discontinued"),
            "net_cash_flow_from_financing_activities": obj.get("net_cash_flow_from_financing_activities"),
            "net_cash_flow_continuing": obj.get("net_cash_flow_continuing"),
            "net_cash_flow_discontinued": obj.get("net_cash_flow_discontinued"),
            "exchange_gains_losses": obj.get("exchange_gains_losses"),
            "net_cash_flow": obj.get("net_cash_flow")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


