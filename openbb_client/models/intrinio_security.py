# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IntrinioSecurity(BaseModel):
    """
    Intrinio Security Data.
    """ # noqa: E501
    id: StrictStr = Field(description="The Intrinio ID for Security.")
    company_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    ticker: Optional[StrictStr] = None
    composite_ticker: Optional[StrictStr] = None
    figi: Optional[StrictStr] = None
    composite_figi: Optional[StrictStr] = None
    share_class_figi: Optional[StrictStr] = None
    primary_listing: Optional[StrictBool] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "company_id", "name", "code", "currency", "ticker", "composite_ticker", "figi", "composite_figi", "share_class_figi", "primary_listing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioSecurity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if company_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_id is None and "company_id" in self.model_fields_set:
            _dict['company_id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if ticker (nullable) is None
        # and model_fields_set contains the field
        if self.ticker is None and "ticker" in self.model_fields_set:
            _dict['ticker'] = None

        # set to None if composite_ticker (nullable) is None
        # and model_fields_set contains the field
        if self.composite_ticker is None and "composite_ticker" in self.model_fields_set:
            _dict['composite_ticker'] = None

        # set to None if figi (nullable) is None
        # and model_fields_set contains the field
        if self.figi is None and "figi" in self.model_fields_set:
            _dict['figi'] = None

        # set to None if composite_figi (nullable) is None
        # and model_fields_set contains the field
        if self.composite_figi is None and "composite_figi" in self.model_fields_set:
            _dict['composite_figi'] = None

        # set to None if share_class_figi (nullable) is None
        # and model_fields_set contains the field
        if self.share_class_figi is None and "share_class_figi" in self.model_fields_set:
            _dict['share_class_figi'] = None

        # set to None if primary_listing (nullable) is None
        # and model_fields_set contains the field
        if self.primary_listing is None and "primary_listing" in self.model_fields_set:
            _dict['primary_listing'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioSecurity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "company_id": obj.get("company_id"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "currency": obj.get("currency"),
            "ticker": obj.get("ticker"),
            "composite_ticker": obj.get("composite_ticker"),
            "figi": obj.get("figi"),
            "composite_figi": obj.get("composite_figi"),
            "share_class_figi": obj.get("share_class_figi"),
            "primary_listing": obj.get("primary_listing")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


