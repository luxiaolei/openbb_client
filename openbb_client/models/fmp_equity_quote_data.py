# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openbb_client.models.exchange_volume import ExchangeVolume
from openbb_client.models.quote_conditions import QuoteConditions
from openbb_client.models.quote_indicators import QuoteIndicators
from openbb_client.models.sales_conditions import SalesConditions
from openbb_client.models.volume import Volume
from typing import Optional, Set
from typing_extensions import Self

class FMPEquityQuoteData(BaseModel):
    """
    FMP Equity Quote Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    asset_type: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    exchange: Optional[StrictStr] = None
    bid: Optional[Union[StrictFloat, StrictInt]] = None
    bid_size: Optional[StrictInt] = None
    bid_exchange: Optional[StrictStr] = None
    ask: Optional[Union[StrictFloat, StrictInt]] = None
    ask_size: Optional[StrictInt] = None
    ask_exchange: Optional[StrictStr] = None
    quote_conditions: Optional[QuoteConditions] = None
    quote_indicators: Optional[QuoteIndicators] = None
    sales_conditions: Optional[SalesConditions] = None
    sequence_number: Optional[StrictInt] = None
    market_center: Optional[StrictStr] = None
    participant_timestamp: Optional[datetime] = None
    trf_timestamp: Optional[datetime] = None
    sip_timestamp: Optional[datetime] = None
    last_price: Optional[Union[StrictFloat, StrictInt]] = None
    last_tick: Optional[StrictStr] = None
    last_size: Optional[StrictInt] = None
    last_timestamp: Optional[datetime] = None
    open: Optional[Union[StrictFloat, StrictInt]] = None
    high: Optional[Union[StrictFloat, StrictInt]] = None
    low: Optional[Union[StrictFloat, StrictInt]] = None
    close: Optional[Union[StrictFloat, StrictInt]] = None
    volume: Optional[Volume] = None
    exchange_volume: Optional[ExchangeVolume] = None
    prev_close: Optional[Union[StrictFloat, StrictInt]] = None
    change: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent: Optional[Union[StrictFloat, StrictInt]] = None
    year_high: Optional[Union[StrictFloat, StrictInt]] = None
    year_low: Optional[Union[StrictFloat, StrictInt]] = None
    price_avg_50: Optional[Union[StrictFloat, StrictInt]] = None
    price_avg_200: Optional[Union[StrictFloat, StrictInt]] = None
    avg_volume: Optional[StrictInt] = None
    market_cap: Optional[Union[StrictFloat, StrictInt]] = None
    shares_outstanding: Optional[StrictInt] = None
    eps: Optional[Union[StrictFloat, StrictInt]] = None
    pe: Optional[Union[StrictFloat, StrictInt]] = None
    earnings_announcement: Optional[datetime] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "asset_type", "name", "exchange", "bid", "bid_size", "bid_exchange", "ask", "ask_size", "ask_exchange", "quote_conditions", "quote_indicators", "sales_conditions", "sequence_number", "market_center", "participant_timestamp", "trf_timestamp", "sip_timestamp", "last_price", "last_tick", "last_size", "last_timestamp", "open", "high", "low", "close", "volume", "exchange_volume", "prev_close", "change", "change_percent", "year_high", "year_low", "price_avg_50", "price_avg_200", "avg_volume", "market_cap", "shares_outstanding", "eps", "pe", "earnings_announcement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPEquityQuoteData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of quote_conditions
        if self.quote_conditions:
            _dict['quote_conditions'] = self.quote_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_indicators
        if self.quote_indicators:
            _dict['quote_indicators'] = self.quote_indicators.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sales_conditions
        if self.sales_conditions:
            _dict['sales_conditions'] = self.sales_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of volume
        if self.volume:
            _dict['volume'] = self.volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exchange_volume
        if self.exchange_volume:
            _dict['exchange_volume'] = self.exchange_volume.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if asset_type (nullable) is None
        # and model_fields_set contains the field
        if self.asset_type is None and "asset_type" in self.model_fields_set:
            _dict['asset_type'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if exchange (nullable) is None
        # and model_fields_set contains the field
        if self.exchange is None and "exchange" in self.model_fields_set:
            _dict['exchange'] = None

        # set to None if bid (nullable) is None
        # and model_fields_set contains the field
        if self.bid is None and "bid" in self.model_fields_set:
            _dict['bid'] = None

        # set to None if bid_size (nullable) is None
        # and model_fields_set contains the field
        if self.bid_size is None and "bid_size" in self.model_fields_set:
            _dict['bid_size'] = None

        # set to None if bid_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.bid_exchange is None and "bid_exchange" in self.model_fields_set:
            _dict['bid_exchange'] = None

        # set to None if ask (nullable) is None
        # and model_fields_set contains the field
        if self.ask is None and "ask" in self.model_fields_set:
            _dict['ask'] = None

        # set to None if ask_size (nullable) is None
        # and model_fields_set contains the field
        if self.ask_size is None and "ask_size" in self.model_fields_set:
            _dict['ask_size'] = None

        # set to None if ask_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.ask_exchange is None and "ask_exchange" in self.model_fields_set:
            _dict['ask_exchange'] = None

        # set to None if quote_conditions (nullable) is None
        # and model_fields_set contains the field
        if self.quote_conditions is None and "quote_conditions" in self.model_fields_set:
            _dict['quote_conditions'] = None

        # set to None if quote_indicators (nullable) is None
        # and model_fields_set contains the field
        if self.quote_indicators is None and "quote_indicators" in self.model_fields_set:
            _dict['quote_indicators'] = None

        # set to None if sales_conditions (nullable) is None
        # and model_fields_set contains the field
        if self.sales_conditions is None and "sales_conditions" in self.model_fields_set:
            _dict['sales_conditions'] = None

        # set to None if sequence_number (nullable) is None
        # and model_fields_set contains the field
        if self.sequence_number is None and "sequence_number" in self.model_fields_set:
            _dict['sequence_number'] = None

        # set to None if market_center (nullable) is None
        # and model_fields_set contains the field
        if self.market_center is None and "market_center" in self.model_fields_set:
            _dict['market_center'] = None

        # set to None if participant_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.participant_timestamp is None and "participant_timestamp" in self.model_fields_set:
            _dict['participant_timestamp'] = None

        # set to None if trf_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.trf_timestamp is None and "trf_timestamp" in self.model_fields_set:
            _dict['trf_timestamp'] = None

        # set to None if sip_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.sip_timestamp is None and "sip_timestamp" in self.model_fields_set:
            _dict['sip_timestamp'] = None

        # set to None if last_price (nullable) is None
        # and model_fields_set contains the field
        if self.last_price is None and "last_price" in self.model_fields_set:
            _dict['last_price'] = None

        # set to None if last_tick (nullable) is None
        # and model_fields_set contains the field
        if self.last_tick is None and "last_tick" in self.model_fields_set:
            _dict['last_tick'] = None

        # set to None if last_size (nullable) is None
        # and model_fields_set contains the field
        if self.last_size is None and "last_size" in self.model_fields_set:
            _dict['last_size'] = None

        # set to None if last_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_timestamp is None and "last_timestamp" in self.model_fields_set:
            _dict['last_timestamp'] = None

        # set to None if open (nullable) is None
        # and model_fields_set contains the field
        if self.open is None and "open" in self.model_fields_set:
            _dict['open'] = None

        # set to None if high (nullable) is None
        # and model_fields_set contains the field
        if self.high is None and "high" in self.model_fields_set:
            _dict['high'] = None

        # set to None if low (nullable) is None
        # and model_fields_set contains the field
        if self.low is None and "low" in self.model_fields_set:
            _dict['low'] = None

        # set to None if close (nullable) is None
        # and model_fields_set contains the field
        if self.close is None and "close" in self.model_fields_set:
            _dict['close'] = None

        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if exchange_volume (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_volume is None and "exchange_volume" in self.model_fields_set:
            _dict['exchange_volume'] = None

        # set to None if prev_close (nullable) is None
        # and model_fields_set contains the field
        if self.prev_close is None and "prev_close" in self.model_fields_set:
            _dict['prev_close'] = None

        # set to None if change (nullable) is None
        # and model_fields_set contains the field
        if self.change is None and "change" in self.model_fields_set:
            _dict['change'] = None

        # set to None if change_percent (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent is None and "change_percent" in self.model_fields_set:
            _dict['change_percent'] = None

        # set to None if year_high (nullable) is None
        # and model_fields_set contains the field
        if self.year_high is None and "year_high" in self.model_fields_set:
            _dict['year_high'] = None

        # set to None if year_low (nullable) is None
        # and model_fields_set contains the field
        if self.year_low is None and "year_low" in self.model_fields_set:
            _dict['year_low'] = None

        # set to None if price_avg_50 (nullable) is None
        # and model_fields_set contains the field
        if self.price_avg_50 is None and "price_avg_50" in self.model_fields_set:
            _dict['price_avg_50'] = None

        # set to None if price_avg_200 (nullable) is None
        # and model_fields_set contains the field
        if self.price_avg_200 is None and "price_avg_200" in self.model_fields_set:
            _dict['price_avg_200'] = None

        # set to None if avg_volume (nullable) is None
        # and model_fields_set contains the field
        if self.avg_volume is None and "avg_volume" in self.model_fields_set:
            _dict['avg_volume'] = None

        # set to None if market_cap (nullable) is None
        # and model_fields_set contains the field
        if self.market_cap is None and "market_cap" in self.model_fields_set:
            _dict['market_cap'] = None

        # set to None if shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.shares_outstanding is None and "shares_outstanding" in self.model_fields_set:
            _dict['shares_outstanding'] = None

        # set to None if eps (nullable) is None
        # and model_fields_set contains the field
        if self.eps is None and "eps" in self.model_fields_set:
            _dict['eps'] = None

        # set to None if pe (nullable) is None
        # and model_fields_set contains the field
        if self.pe is None and "pe" in self.model_fields_set:
            _dict['pe'] = None

        # set to None if earnings_announcement (nullable) is None
        # and model_fields_set contains the field
        if self.earnings_announcement is None and "earnings_announcement" in self.model_fields_set:
            _dict['earnings_announcement'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPEquityQuoteData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "asset_type": obj.get("asset_type"),
            "name": obj.get("name"),
            "exchange": obj.get("exchange"),
            "bid": obj.get("bid"),
            "bid_size": obj.get("bid_size"),
            "bid_exchange": obj.get("bid_exchange"),
            "ask": obj.get("ask"),
            "ask_size": obj.get("ask_size"),
            "ask_exchange": obj.get("ask_exchange"),
            "quote_conditions": QuoteConditions.from_dict(obj["quote_conditions"]) if obj.get("quote_conditions") is not None else None,
            "quote_indicators": QuoteIndicators.from_dict(obj["quote_indicators"]) if obj.get("quote_indicators") is not None else None,
            "sales_conditions": SalesConditions.from_dict(obj["sales_conditions"]) if obj.get("sales_conditions") is not None else None,
            "sequence_number": obj.get("sequence_number"),
            "market_center": obj.get("market_center"),
            "participant_timestamp": obj.get("participant_timestamp"),
            "trf_timestamp": obj.get("trf_timestamp"),
            "sip_timestamp": obj.get("sip_timestamp"),
            "last_price": obj.get("last_price"),
            "last_tick": obj.get("last_tick"),
            "last_size": obj.get("last_size"),
            "last_timestamp": obj.get("last_timestamp"),
            "open": obj.get("open"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "close": obj.get("close"),
            "volume": Volume.from_dict(obj["volume"]) if obj.get("volume") is not None else None,
            "exchange_volume": ExchangeVolume.from_dict(obj["exchange_volume"]) if obj.get("exchange_volume") is not None else None,
            "prev_close": obj.get("prev_close"),
            "change": obj.get("change"),
            "change_percent": obj.get("change_percent"),
            "year_high": obj.get("year_high"),
            "year_low": obj.get("year_low"),
            "price_avg_50": obj.get("price_avg_50"),
            "price_avg_200": obj.get("price_avg_200"),
            "avg_volume": obj.get("avg_volume"),
            "market_cap": obj.get("market_cap"),
            "shares_outstanding": obj.get("shares_outstanding"),
            "eps": obj.get("eps"),
            "pe": obj.get("pe"),
            "earnings_announcement": obj.get("earnings_announcement")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


