# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPIncomeStatementData(BaseModel):
    """
    FMP Income Statement Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end date of the reporting period.")
    fiscal_period: Optional[StrictStr] = None
    fiscal_year: Optional[StrictInt] = None
    filing_date: Optional[date] = None
    accepted_date: Optional[datetime] = None
    reported_currency: Optional[StrictStr] = None
    revenue: Optional[Union[StrictFloat, StrictInt]] = None
    cost_of_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    gross_profit: Optional[Union[StrictFloat, StrictInt]] = None
    gross_profit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    general_and_admin_expense: Optional[Union[StrictFloat, StrictInt]] = None
    research_and_development_expense: Optional[Union[StrictFloat, StrictInt]] = None
    selling_and_marketing_expense: Optional[Union[StrictFloat, StrictInt]] = None
    selling_general_and_admin_expense: Optional[Union[StrictFloat, StrictInt]] = None
    other_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    total_operating_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    cost_and_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    total_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    depreciation_and_amortization: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda_margin: Optional[Union[StrictFloat, StrictInt]] = None
    total_operating_income: Optional[Union[StrictFloat, StrictInt]] = None
    operating_income_margin: Optional[Union[StrictFloat, StrictInt]] = None
    total_other_income_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    total_pre_tax_income: Optional[Union[StrictFloat, StrictInt]] = None
    pre_tax_income_margin: Optional[Union[StrictFloat, StrictInt]] = None
    income_tax_expense: Optional[Union[StrictFloat, StrictInt]] = None
    consolidated_net_income: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_margin: Optional[Union[StrictFloat, StrictInt]] = None
    basic_earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    diluted_earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_basic_shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_diluted_shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    link: Optional[StrictStr] = None
    final_link: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "filing_date", "accepted_date", "reported_currency", "revenue", "cost_of_revenue", "gross_profit", "gross_profit_margin", "general_and_admin_expense", "research_and_development_expense", "selling_and_marketing_expense", "selling_general_and_admin_expense", "other_expenses", "total_operating_expenses", "cost_and_expenses", "interest_income", "total_interest_expense", "depreciation_and_amortization", "ebitda", "ebitda_margin", "total_operating_income", "operating_income_margin", "total_other_income_expenses", "total_pre_tax_income", "pre_tax_income_margin", "income_tax_expense", "consolidated_net_income", "net_income_margin", "basic_earnings_per_share", "diluted_earnings_per_share", "weighted_average_basic_shares_outstanding", "weighted_average_diluted_shares_outstanding", "link", "final_link"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPIncomeStatementData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if filing_date (nullable) is None
        # and model_fields_set contains the field
        if self.filing_date is None and "filing_date" in self.model_fields_set:
            _dict['filing_date'] = None

        # set to None if accepted_date (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_date is None and "accepted_date" in self.model_fields_set:
            _dict['accepted_date'] = None

        # set to None if reported_currency (nullable) is None
        # and model_fields_set contains the field
        if self.reported_currency is None and "reported_currency" in self.model_fields_set:
            _dict['reported_currency'] = None

        # set to None if revenue (nullable) is None
        # and model_fields_set contains the field
        if self.revenue is None and "revenue" in self.model_fields_set:
            _dict['revenue'] = None

        # set to None if cost_of_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.cost_of_revenue is None and "cost_of_revenue" in self.model_fields_set:
            _dict['cost_of_revenue'] = None

        # set to None if gross_profit (nullable) is None
        # and model_fields_set contains the field
        if self.gross_profit is None and "gross_profit" in self.model_fields_set:
            _dict['gross_profit'] = None

        # set to None if gross_profit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.gross_profit_margin is None and "gross_profit_margin" in self.model_fields_set:
            _dict['gross_profit_margin'] = None

        # set to None if general_and_admin_expense (nullable) is None
        # and model_fields_set contains the field
        if self.general_and_admin_expense is None and "general_and_admin_expense" in self.model_fields_set:
            _dict['general_and_admin_expense'] = None

        # set to None if research_and_development_expense (nullable) is None
        # and model_fields_set contains the field
        if self.research_and_development_expense is None and "research_and_development_expense" in self.model_fields_set:
            _dict['research_and_development_expense'] = None

        # set to None if selling_and_marketing_expense (nullable) is None
        # and model_fields_set contains the field
        if self.selling_and_marketing_expense is None and "selling_and_marketing_expense" in self.model_fields_set:
            _dict['selling_and_marketing_expense'] = None

        # set to None if selling_general_and_admin_expense (nullable) is None
        # and model_fields_set contains the field
        if self.selling_general_and_admin_expense is None and "selling_general_and_admin_expense" in self.model_fields_set:
            _dict['selling_general_and_admin_expense'] = None

        # set to None if other_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.other_expenses is None and "other_expenses" in self.model_fields_set:
            _dict['other_expenses'] = None

        # set to None if total_operating_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.total_operating_expenses is None and "total_operating_expenses" in self.model_fields_set:
            _dict['total_operating_expenses'] = None

        # set to None if cost_and_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.cost_and_expenses is None and "cost_and_expenses" in self.model_fields_set:
            _dict['cost_and_expenses'] = None

        # set to None if interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.interest_income is None and "interest_income" in self.model_fields_set:
            _dict['interest_income'] = None

        # set to None if total_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.total_interest_expense is None and "total_interest_expense" in self.model_fields_set:
            _dict['total_interest_expense'] = None

        # set to None if depreciation_and_amortization (nullable) is None
        # and model_fields_set contains the field
        if self.depreciation_and_amortization is None and "depreciation_and_amortization" in self.model_fields_set:
            _dict['depreciation_and_amortization'] = None

        # set to None if ebitda (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda is None and "ebitda" in self.model_fields_set:
            _dict['ebitda'] = None

        # set to None if ebitda_margin (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda_margin is None and "ebitda_margin" in self.model_fields_set:
            _dict['ebitda_margin'] = None

        # set to None if total_operating_income (nullable) is None
        # and model_fields_set contains the field
        if self.total_operating_income is None and "total_operating_income" in self.model_fields_set:
            _dict['total_operating_income'] = None

        # set to None if operating_income_margin (nullable) is None
        # and model_fields_set contains the field
        if self.operating_income_margin is None and "operating_income_margin" in self.model_fields_set:
            _dict['operating_income_margin'] = None

        # set to None if total_other_income_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.total_other_income_expenses is None and "total_other_income_expenses" in self.model_fields_set:
            _dict['total_other_income_expenses'] = None

        # set to None if total_pre_tax_income (nullable) is None
        # and model_fields_set contains the field
        if self.total_pre_tax_income is None and "total_pre_tax_income" in self.model_fields_set:
            _dict['total_pre_tax_income'] = None

        # set to None if pre_tax_income_margin (nullable) is None
        # and model_fields_set contains the field
        if self.pre_tax_income_margin is None and "pre_tax_income_margin" in self.model_fields_set:
            _dict['pre_tax_income_margin'] = None

        # set to None if income_tax_expense (nullable) is None
        # and model_fields_set contains the field
        if self.income_tax_expense is None and "income_tax_expense" in self.model_fields_set:
            _dict['income_tax_expense'] = None

        # set to None if consolidated_net_income (nullable) is None
        # and model_fields_set contains the field
        if self.consolidated_net_income is None and "consolidated_net_income" in self.model_fields_set:
            _dict['consolidated_net_income'] = None

        # set to None if net_income_margin (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_margin is None and "net_income_margin" in self.model_fields_set:
            _dict['net_income_margin'] = None

        # set to None if basic_earnings_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.basic_earnings_per_share is None and "basic_earnings_per_share" in self.model_fields_set:
            _dict['basic_earnings_per_share'] = None

        # set to None if diluted_earnings_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.diluted_earnings_per_share is None and "diluted_earnings_per_share" in self.model_fields_set:
            _dict['diluted_earnings_per_share'] = None

        # set to None if weighted_average_basic_shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_average_basic_shares_outstanding is None and "weighted_average_basic_shares_outstanding" in self.model_fields_set:
            _dict['weighted_average_basic_shares_outstanding'] = None

        # set to None if weighted_average_diluted_shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_average_diluted_shares_outstanding is None and "weighted_average_diluted_shares_outstanding" in self.model_fields_set:
            _dict['weighted_average_diluted_shares_outstanding'] = None

        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        # set to None if final_link (nullable) is None
        # and model_fields_set contains the field
        if self.final_link is None and "final_link" in self.model_fields_set:
            _dict['final_link'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPIncomeStatementData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "filing_date": obj.get("filing_date"),
            "accepted_date": obj.get("accepted_date"),
            "reported_currency": obj.get("reported_currency"),
            "revenue": obj.get("revenue"),
            "cost_of_revenue": obj.get("cost_of_revenue"),
            "gross_profit": obj.get("gross_profit"),
            "gross_profit_margin": obj.get("gross_profit_margin"),
            "general_and_admin_expense": obj.get("general_and_admin_expense"),
            "research_and_development_expense": obj.get("research_and_development_expense"),
            "selling_and_marketing_expense": obj.get("selling_and_marketing_expense"),
            "selling_general_and_admin_expense": obj.get("selling_general_and_admin_expense"),
            "other_expenses": obj.get("other_expenses"),
            "total_operating_expenses": obj.get("total_operating_expenses"),
            "cost_and_expenses": obj.get("cost_and_expenses"),
            "interest_income": obj.get("interest_income"),
            "total_interest_expense": obj.get("total_interest_expense"),
            "depreciation_and_amortization": obj.get("depreciation_and_amortization"),
            "ebitda": obj.get("ebitda"),
            "ebitda_margin": obj.get("ebitda_margin"),
            "total_operating_income": obj.get("total_operating_income"),
            "operating_income_margin": obj.get("operating_income_margin"),
            "total_other_income_expenses": obj.get("total_other_income_expenses"),
            "total_pre_tax_income": obj.get("total_pre_tax_income"),
            "pre_tax_income_margin": obj.get("pre_tax_income_margin"),
            "income_tax_expense": obj.get("income_tax_expense"),
            "consolidated_net_income": obj.get("consolidated_net_income"),
            "net_income_margin": obj.get("net_income_margin"),
            "basic_earnings_per_share": obj.get("basic_earnings_per_share"),
            "diluted_earnings_per_share": obj.get("diluted_earnings_per_share"),
            "weighted_average_basic_shares_outstanding": obj.get("weighted_average_basic_shares_outstanding"),
            "weighted_average_diluted_shares_outstanding": obj.get("weighted_average_diluted_shares_outstanding"),
            "link": obj.get("link"),
            "final_link": obj.get("final_link")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


