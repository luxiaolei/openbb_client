# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPKeyMetricsData(BaseModel):
    """
    FMP Key Metrics Data.
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    market_cap: Optional[Union[StrictFloat, StrictInt]] = None
    pe_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    period_ending: date = Field(description="Period ending date.")
    fiscal_period: StrictStr = Field(description="Period of the data.")
    calendar_year: Optional[StrictInt] = None
    revenue_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    capex_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    operating_cash_flow_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    free_cash_flow_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    cash_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    book_value_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    tangible_book_value_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    shareholders_equity_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    interest_debt_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_sales: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_operating_cash_flow: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_free_cash_flow: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_book: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_tangible_book: Optional[Union[StrictFloat, StrictInt]] = None
    ev_to_sales: Optional[Union[StrictFloat, StrictInt]] = None
    ev_to_ebitda: Optional[Union[StrictFloat, StrictInt]] = None
    ev_to_operating_cash_flow: Optional[Union[StrictFloat, StrictInt]] = None
    ev_to_free_cash_flow: Optional[Union[StrictFloat, StrictInt]] = None
    earnings_yield: Optional[Union[StrictFloat, StrictInt]] = None
    free_cash_flow_yield: Optional[Union[StrictFloat, StrictInt]] = None
    debt_to_market_cap: Optional[Union[StrictFloat, StrictInt]] = None
    debt_to_equity: Optional[Union[StrictFloat, StrictInt]] = None
    debt_to_assets: Optional[Union[StrictFloat, StrictInt]] = None
    net_debt_to_ebitda: Optional[Union[StrictFloat, StrictInt]] = None
    current_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    interest_coverage: Optional[Union[StrictFloat, StrictInt]] = None
    income_quality: Optional[Union[StrictFloat, StrictInt]] = None
    payout_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    sales_general_and_administrative_to_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    research_and_developement_to_revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="researchAndDevelopementToRevenue")
    intangibles_to_total_assets: Optional[Union[StrictFloat, StrictInt]] = None
    capex_to_operating_cash_flow: Optional[Union[StrictFloat, StrictInt]] = None
    capex_to_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    capex_to_depreciation: Optional[Union[StrictFloat, StrictInt]] = None
    stock_based_compensation_to_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    working_capital: Optional[Union[StrictFloat, StrictInt]] = None
    tangible_asset_value: Optional[Union[StrictFloat, StrictInt]] = None
    net_current_asset_value: Optional[Union[StrictFloat, StrictInt]] = None
    enterprise_value: Optional[Union[StrictFloat, StrictInt]] = None
    invested_capital: Optional[Union[StrictFloat, StrictInt]] = None
    average_receivables: Optional[Union[StrictFloat, StrictInt]] = None
    average_payables: Optional[Union[StrictFloat, StrictInt]] = None
    average_inventory: Optional[Union[StrictFloat, StrictInt]] = None
    days_sales_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    days_payables_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    days_of_inventory_on_hand: Optional[Union[StrictFloat, StrictInt]] = None
    receivables_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    payables_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    inventory_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_equity: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_invested_capital: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_tangible_assets: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_yield: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dividendYield")
    graham_number: Optional[Union[StrictFloat, StrictInt]] = None
    graham_net_net: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "market_cap", "pe_ratio", "period_ending", "fiscal_period", "calendar_year", "revenue_per_share", "capex_per_share", "net_income_per_share", "operating_cash_flow_per_share", "free_cash_flow_per_share", "cash_per_share", "book_value_per_share", "tangible_book_value_per_share", "shareholders_equity_per_share", "interest_debt_per_share", "price_to_sales", "price_to_operating_cash_flow", "price_to_free_cash_flow", "price_to_book", "price_to_tangible_book", "ev_to_sales", "ev_to_ebitda", "ev_to_operating_cash_flow", "ev_to_free_cash_flow", "earnings_yield", "free_cash_flow_yield", "debt_to_market_cap", "debt_to_equity", "debt_to_assets", "net_debt_to_ebitda", "current_ratio", "interest_coverage", "income_quality", "payout_ratio", "sales_general_and_administrative_to_revenue", "researchAndDevelopementToRevenue", "intangibles_to_total_assets", "capex_to_operating_cash_flow", "capex_to_revenue", "capex_to_depreciation", "stock_based_compensation_to_revenue", "working_capital", "tangible_asset_value", "net_current_asset_value", "enterprise_value", "invested_capital", "average_receivables", "average_payables", "average_inventory", "days_sales_outstanding", "days_payables_outstanding", "days_of_inventory_on_hand", "receivables_turnover", "payables_turnover", "inventory_turnover", "return_on_equity", "return_on_invested_capital", "return_on_tangible_assets", "dividendYield", "graham_number", "graham_net_net"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPKeyMetricsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if market_cap (nullable) is None
        # and model_fields_set contains the field
        if self.market_cap is None and "market_cap" in self.model_fields_set:
            _dict['market_cap'] = None

        # set to None if pe_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.pe_ratio is None and "pe_ratio" in self.model_fields_set:
            _dict['pe_ratio'] = None

        # set to None if calendar_year (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_year is None and "calendar_year" in self.model_fields_set:
            _dict['calendar_year'] = None

        # set to None if revenue_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.revenue_per_share is None and "revenue_per_share" in self.model_fields_set:
            _dict['revenue_per_share'] = None

        # set to None if capex_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.capex_per_share is None and "capex_per_share" in self.model_fields_set:
            _dict['capex_per_share'] = None

        # set to None if net_income_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_per_share is None and "net_income_per_share" in self.model_fields_set:
            _dict['net_income_per_share'] = None

        # set to None if operating_cash_flow_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.operating_cash_flow_per_share is None and "operating_cash_flow_per_share" in self.model_fields_set:
            _dict['operating_cash_flow_per_share'] = None

        # set to None if free_cash_flow_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow_per_share is None and "free_cash_flow_per_share" in self.model_fields_set:
            _dict['free_cash_flow_per_share'] = None

        # set to None if cash_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.cash_per_share is None and "cash_per_share" in self.model_fields_set:
            _dict['cash_per_share'] = None

        # set to None if book_value_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.book_value_per_share is None and "book_value_per_share" in self.model_fields_set:
            _dict['book_value_per_share'] = None

        # set to None if tangible_book_value_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.tangible_book_value_per_share is None and "tangible_book_value_per_share" in self.model_fields_set:
            _dict['tangible_book_value_per_share'] = None

        # set to None if shareholders_equity_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.shareholders_equity_per_share is None and "shareholders_equity_per_share" in self.model_fields_set:
            _dict['shareholders_equity_per_share'] = None

        # set to None if interest_debt_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.interest_debt_per_share is None and "interest_debt_per_share" in self.model_fields_set:
            _dict['interest_debt_per_share'] = None

        # set to None if price_to_sales (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_sales is None and "price_to_sales" in self.model_fields_set:
            _dict['price_to_sales'] = None

        # set to None if price_to_operating_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_operating_cash_flow is None and "price_to_operating_cash_flow" in self.model_fields_set:
            _dict['price_to_operating_cash_flow'] = None

        # set to None if price_to_free_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_free_cash_flow is None and "price_to_free_cash_flow" in self.model_fields_set:
            _dict['price_to_free_cash_flow'] = None

        # set to None if price_to_book (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_book is None and "price_to_book" in self.model_fields_set:
            _dict['price_to_book'] = None

        # set to None if price_to_tangible_book (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_tangible_book is None and "price_to_tangible_book" in self.model_fields_set:
            _dict['price_to_tangible_book'] = None

        # set to None if ev_to_sales (nullable) is None
        # and model_fields_set contains the field
        if self.ev_to_sales is None and "ev_to_sales" in self.model_fields_set:
            _dict['ev_to_sales'] = None

        # set to None if ev_to_ebitda (nullable) is None
        # and model_fields_set contains the field
        if self.ev_to_ebitda is None and "ev_to_ebitda" in self.model_fields_set:
            _dict['ev_to_ebitda'] = None

        # set to None if ev_to_operating_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.ev_to_operating_cash_flow is None and "ev_to_operating_cash_flow" in self.model_fields_set:
            _dict['ev_to_operating_cash_flow'] = None

        # set to None if ev_to_free_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.ev_to_free_cash_flow is None and "ev_to_free_cash_flow" in self.model_fields_set:
            _dict['ev_to_free_cash_flow'] = None

        # set to None if earnings_yield (nullable) is None
        # and model_fields_set contains the field
        if self.earnings_yield is None and "earnings_yield" in self.model_fields_set:
            _dict['earnings_yield'] = None

        # set to None if free_cash_flow_yield (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow_yield is None and "free_cash_flow_yield" in self.model_fields_set:
            _dict['free_cash_flow_yield'] = None

        # set to None if debt_to_market_cap (nullable) is None
        # and model_fields_set contains the field
        if self.debt_to_market_cap is None and "debt_to_market_cap" in self.model_fields_set:
            _dict['debt_to_market_cap'] = None

        # set to None if debt_to_equity (nullable) is None
        # and model_fields_set contains the field
        if self.debt_to_equity is None and "debt_to_equity" in self.model_fields_set:
            _dict['debt_to_equity'] = None

        # set to None if debt_to_assets (nullable) is None
        # and model_fields_set contains the field
        if self.debt_to_assets is None and "debt_to_assets" in self.model_fields_set:
            _dict['debt_to_assets'] = None

        # set to None if net_debt_to_ebitda (nullable) is None
        # and model_fields_set contains the field
        if self.net_debt_to_ebitda is None and "net_debt_to_ebitda" in self.model_fields_set:
            _dict['net_debt_to_ebitda'] = None

        # set to None if current_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.current_ratio is None and "current_ratio" in self.model_fields_set:
            _dict['current_ratio'] = None

        # set to None if interest_coverage (nullable) is None
        # and model_fields_set contains the field
        if self.interest_coverage is None and "interest_coverage" in self.model_fields_set:
            _dict['interest_coverage'] = None

        # set to None if income_quality (nullable) is None
        # and model_fields_set contains the field
        if self.income_quality is None and "income_quality" in self.model_fields_set:
            _dict['income_quality'] = None

        # set to None if payout_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.payout_ratio is None and "payout_ratio" in self.model_fields_set:
            _dict['payout_ratio'] = None

        # set to None if sales_general_and_administrative_to_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.sales_general_and_administrative_to_revenue is None and "sales_general_and_administrative_to_revenue" in self.model_fields_set:
            _dict['sales_general_and_administrative_to_revenue'] = None

        # set to None if research_and_developement_to_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.research_and_developement_to_revenue is None and "research_and_developement_to_revenue" in self.model_fields_set:
            _dict['researchAndDevelopementToRevenue'] = None

        # set to None if intangibles_to_total_assets (nullable) is None
        # and model_fields_set contains the field
        if self.intangibles_to_total_assets is None and "intangibles_to_total_assets" in self.model_fields_set:
            _dict['intangibles_to_total_assets'] = None

        # set to None if capex_to_operating_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.capex_to_operating_cash_flow is None and "capex_to_operating_cash_flow" in self.model_fields_set:
            _dict['capex_to_operating_cash_flow'] = None

        # set to None if capex_to_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.capex_to_revenue is None and "capex_to_revenue" in self.model_fields_set:
            _dict['capex_to_revenue'] = None

        # set to None if capex_to_depreciation (nullable) is None
        # and model_fields_set contains the field
        if self.capex_to_depreciation is None and "capex_to_depreciation" in self.model_fields_set:
            _dict['capex_to_depreciation'] = None

        # set to None if stock_based_compensation_to_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.stock_based_compensation_to_revenue is None and "stock_based_compensation_to_revenue" in self.model_fields_set:
            _dict['stock_based_compensation_to_revenue'] = None

        # set to None if working_capital (nullable) is None
        # and model_fields_set contains the field
        if self.working_capital is None and "working_capital" in self.model_fields_set:
            _dict['working_capital'] = None

        # set to None if tangible_asset_value (nullable) is None
        # and model_fields_set contains the field
        if self.tangible_asset_value is None and "tangible_asset_value" in self.model_fields_set:
            _dict['tangible_asset_value'] = None

        # set to None if net_current_asset_value (nullable) is None
        # and model_fields_set contains the field
        if self.net_current_asset_value is None and "net_current_asset_value" in self.model_fields_set:
            _dict['net_current_asset_value'] = None

        # set to None if enterprise_value (nullable) is None
        # and model_fields_set contains the field
        if self.enterprise_value is None and "enterprise_value" in self.model_fields_set:
            _dict['enterprise_value'] = None

        # set to None if invested_capital (nullable) is None
        # and model_fields_set contains the field
        if self.invested_capital is None and "invested_capital" in self.model_fields_set:
            _dict['invested_capital'] = None

        # set to None if average_receivables (nullable) is None
        # and model_fields_set contains the field
        if self.average_receivables is None and "average_receivables" in self.model_fields_set:
            _dict['average_receivables'] = None

        # set to None if average_payables (nullable) is None
        # and model_fields_set contains the field
        if self.average_payables is None and "average_payables" in self.model_fields_set:
            _dict['average_payables'] = None

        # set to None if average_inventory (nullable) is None
        # and model_fields_set contains the field
        if self.average_inventory is None and "average_inventory" in self.model_fields_set:
            _dict['average_inventory'] = None

        # set to None if days_sales_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.days_sales_outstanding is None and "days_sales_outstanding" in self.model_fields_set:
            _dict['days_sales_outstanding'] = None

        # set to None if days_payables_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.days_payables_outstanding is None and "days_payables_outstanding" in self.model_fields_set:
            _dict['days_payables_outstanding'] = None

        # set to None if days_of_inventory_on_hand (nullable) is None
        # and model_fields_set contains the field
        if self.days_of_inventory_on_hand is None and "days_of_inventory_on_hand" in self.model_fields_set:
            _dict['days_of_inventory_on_hand'] = None

        # set to None if receivables_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.receivables_turnover is None and "receivables_turnover" in self.model_fields_set:
            _dict['receivables_turnover'] = None

        # set to None if payables_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.payables_turnover is None and "payables_turnover" in self.model_fields_set:
            _dict['payables_turnover'] = None

        # set to None if inventory_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.inventory_turnover is None and "inventory_turnover" in self.model_fields_set:
            _dict['inventory_turnover'] = None

        # set to None if return_on_equity (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_equity is None and "return_on_equity" in self.model_fields_set:
            _dict['return_on_equity'] = None

        # set to None if return_on_invested_capital (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_invested_capital is None and "return_on_invested_capital" in self.model_fields_set:
            _dict['return_on_invested_capital'] = None

        # set to None if return_on_tangible_assets (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_tangible_assets is None and "return_on_tangible_assets" in self.model_fields_set:
            _dict['return_on_tangible_assets'] = None

        # set to None if dividend_yield (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_yield is None and "dividend_yield" in self.model_fields_set:
            _dict['dividendYield'] = None

        # set to None if graham_number (nullable) is None
        # and model_fields_set contains the field
        if self.graham_number is None and "graham_number" in self.model_fields_set:
            _dict['graham_number'] = None

        # set to None if graham_net_net (nullable) is None
        # and model_fields_set contains the field
        if self.graham_net_net is None and "graham_net_net" in self.model_fields_set:
            _dict['graham_net_net'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPKeyMetricsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "market_cap": obj.get("market_cap"),
            "pe_ratio": obj.get("pe_ratio"),
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "calendar_year": obj.get("calendar_year"),
            "revenue_per_share": obj.get("revenue_per_share"),
            "capex_per_share": obj.get("capex_per_share"),
            "net_income_per_share": obj.get("net_income_per_share"),
            "operating_cash_flow_per_share": obj.get("operating_cash_flow_per_share"),
            "free_cash_flow_per_share": obj.get("free_cash_flow_per_share"),
            "cash_per_share": obj.get("cash_per_share"),
            "book_value_per_share": obj.get("book_value_per_share"),
            "tangible_book_value_per_share": obj.get("tangible_book_value_per_share"),
            "shareholders_equity_per_share": obj.get("shareholders_equity_per_share"),
            "interest_debt_per_share": obj.get("interest_debt_per_share"),
            "price_to_sales": obj.get("price_to_sales"),
            "price_to_operating_cash_flow": obj.get("price_to_operating_cash_flow"),
            "price_to_free_cash_flow": obj.get("price_to_free_cash_flow"),
            "price_to_book": obj.get("price_to_book"),
            "price_to_tangible_book": obj.get("price_to_tangible_book"),
            "ev_to_sales": obj.get("ev_to_sales"),
            "ev_to_ebitda": obj.get("ev_to_ebitda"),
            "ev_to_operating_cash_flow": obj.get("ev_to_operating_cash_flow"),
            "ev_to_free_cash_flow": obj.get("ev_to_free_cash_flow"),
            "earnings_yield": obj.get("earnings_yield"),
            "free_cash_flow_yield": obj.get("free_cash_flow_yield"),
            "debt_to_market_cap": obj.get("debt_to_market_cap"),
            "debt_to_equity": obj.get("debt_to_equity"),
            "debt_to_assets": obj.get("debt_to_assets"),
            "net_debt_to_ebitda": obj.get("net_debt_to_ebitda"),
            "current_ratio": obj.get("current_ratio"),
            "interest_coverage": obj.get("interest_coverage"),
            "income_quality": obj.get("income_quality"),
            "payout_ratio": obj.get("payout_ratio"),
            "sales_general_and_administrative_to_revenue": obj.get("sales_general_and_administrative_to_revenue"),
            "researchAndDevelopementToRevenue": obj.get("researchAndDevelopementToRevenue"),
            "intangibles_to_total_assets": obj.get("intangibles_to_total_assets"),
            "capex_to_operating_cash_flow": obj.get("capex_to_operating_cash_flow"),
            "capex_to_revenue": obj.get("capex_to_revenue"),
            "capex_to_depreciation": obj.get("capex_to_depreciation"),
            "stock_based_compensation_to_revenue": obj.get("stock_based_compensation_to_revenue"),
            "working_capital": obj.get("working_capital"),
            "tangible_asset_value": obj.get("tangible_asset_value"),
            "net_current_asset_value": obj.get("net_current_asset_value"),
            "enterprise_value": obj.get("enterprise_value"),
            "invested_capital": obj.get("invested_capital"),
            "average_receivables": obj.get("average_receivables"),
            "average_payables": obj.get("average_payables"),
            "average_inventory": obj.get("average_inventory"),
            "days_sales_outstanding": obj.get("days_sales_outstanding"),
            "days_payables_outstanding": obj.get("days_payables_outstanding"),
            "days_of_inventory_on_hand": obj.get("days_of_inventory_on_hand"),
            "receivables_turnover": obj.get("receivables_turnover"),
            "payables_turnover": obj.get("payables_turnover"),
            "inventory_turnover": obj.get("inventory_turnover"),
            "return_on_equity": obj.get("return_on_equity"),
            "return_on_invested_capital": obj.get("return_on_invested_capital"),
            "return_on_tangible_assets": obj.get("return_on_tangible_assets"),
            "dividendYield": obj.get("dividendYield"),
            "graham_number": obj.get("graham_number"),
            "graham_net_net": obj.get("graham_net_net")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


