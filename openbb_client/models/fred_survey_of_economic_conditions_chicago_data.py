# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FredSurveyOfEconomicConditionsChicagoData(BaseModel):
    """
    FRED Survey Of Economic Conditions - Chicago - Data.
    """ # noqa: E501
    var_date: date = Field(description="The date of the data.", alias="date")
    activity_index: Optional[Union[StrictFloat, StrictInt]] = None
    one_year_outlook: Optional[Union[StrictFloat, StrictInt]] = None
    manufacturing_activity: Optional[Union[StrictFloat, StrictInt]] = None
    non_manufacturing_activity: Optional[Union[StrictFloat, StrictInt]] = None
    capital_expenditures_expectations: Optional[Union[StrictFloat, StrictInt]] = None
    hiring_expectations: Optional[Union[StrictFloat, StrictInt]] = None
    current_hiring: Optional[Union[StrictFloat, StrictInt]] = None
    labor_costs: Optional[Union[StrictFloat, StrictInt]] = None
    non_labor_costs: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "activity_index", "one_year_outlook", "manufacturing_activity", "non_manufacturing_activity", "capital_expenditures_expectations", "hiring_expectations", "current_hiring", "labor_costs", "non_labor_costs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FredSurveyOfEconomicConditionsChicagoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if activity_index (nullable) is None
        # and model_fields_set contains the field
        if self.activity_index is None and "activity_index" in self.model_fields_set:
            _dict['activity_index'] = None

        # set to None if one_year_outlook (nullable) is None
        # and model_fields_set contains the field
        if self.one_year_outlook is None and "one_year_outlook" in self.model_fields_set:
            _dict['one_year_outlook'] = None

        # set to None if manufacturing_activity (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturing_activity is None and "manufacturing_activity" in self.model_fields_set:
            _dict['manufacturing_activity'] = None

        # set to None if non_manufacturing_activity (nullable) is None
        # and model_fields_set contains the field
        if self.non_manufacturing_activity is None and "non_manufacturing_activity" in self.model_fields_set:
            _dict['non_manufacturing_activity'] = None

        # set to None if capital_expenditures_expectations (nullable) is None
        # and model_fields_set contains the field
        if self.capital_expenditures_expectations is None and "capital_expenditures_expectations" in self.model_fields_set:
            _dict['capital_expenditures_expectations'] = None

        # set to None if hiring_expectations (nullable) is None
        # and model_fields_set contains the field
        if self.hiring_expectations is None and "hiring_expectations" in self.model_fields_set:
            _dict['hiring_expectations'] = None

        # set to None if current_hiring (nullable) is None
        # and model_fields_set contains the field
        if self.current_hiring is None and "current_hiring" in self.model_fields_set:
            _dict['current_hiring'] = None

        # set to None if labor_costs (nullable) is None
        # and model_fields_set contains the field
        if self.labor_costs is None and "labor_costs" in self.model_fields_set:
            _dict['labor_costs'] = None

        # set to None if non_labor_costs (nullable) is None
        # and model_fields_set contains the field
        if self.non_labor_costs is None and "non_labor_costs" in self.model_fields_set:
            _dict['non_labor_costs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FredSurveyOfEconomicConditionsChicagoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "activity_index": obj.get("activity_index"),
            "one_year_outlook": obj.get("one_year_outlook"),
            "manufacturing_activity": obj.get("manufacturing_activity"),
            "non_manufacturing_activity": obj.get("non_manufacturing_activity"),
            "capital_expenditures_expectations": obj.get("capital_expenditures_expectations"),
            "hiring_expectations": obj.get("hiring_expectations"),
            "current_hiring": obj.get("current_hiring"),
            "labor_costs": obj.get("labor_costs"),
            "non_labor_costs": obj.get("non_labor_costs")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


