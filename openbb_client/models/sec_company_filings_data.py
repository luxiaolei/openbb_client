# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openbb_client.models.accession_number import AccessionNumber
from openbb_client.models.act import Act
from openbb_client.models.file_number import FileNumber
from openbb_client.models.film_number import FilmNumber
from openbb_client.models.is_inline_xbrl import IsInlineXbrl
from openbb_client.models.is_xbrl import IsXbrl
from openbb_client.models.items import Items
from openbb_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class SecCompanyFilingsData(BaseModel):
    """
    SEC Company Filings Data.
    """ # noqa: E501
    filing_date: date = Field(description="The date of the filing.")
    accepted_date: Optional[datetime] = None
    symbol: Optional[StrictStr] = None
    cik: Optional[StrictStr] = None
    report_type: Optional[StrictStr] = None
    filing_url: Optional[StrictStr] = None
    report_url: StrictStr = Field(description="URL to the actual report.")
    report_date: Optional[date] = None
    act: Optional[Act] = None
    items: Optional[Items] = None
    primary_doc_description: Optional[StrictStr] = None
    primary_doc: Optional[StrictStr] = None
    accession_number: Optional[AccessionNumber] = None
    file_number: Optional[FileNumber] = None
    film_number: Optional[FilmNumber] = None
    is_inline_xbrl: Optional[IsInlineXbrl] = None
    is_xbrl: Optional[IsXbrl] = None
    size: Optional[Size] = None
    complete_submission_url: Optional[StrictStr] = None
    filing_detail_url: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["filing_date", "accepted_date", "symbol", "cik", "report_type", "filing_url", "report_url", "report_date", "act", "items", "primary_doc_description", "primary_doc", "accession_number", "file_number", "film_number", "is_inline_xbrl", "is_xbrl", "size", "complete_submission_url", "filing_detail_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecCompanyFilingsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of act
        if self.act:
            _dict['act'] = self.act.to_dict()
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            _dict['items'] = self.items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accession_number
        if self.accession_number:
            _dict['accession_number'] = self.accession_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_number
        if self.file_number:
            _dict['file_number'] = self.file_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of film_number
        if self.film_number:
            _dict['film_number'] = self.film_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_inline_xbrl
        if self.is_inline_xbrl:
            _dict['is_inline_xbrl'] = self.is_inline_xbrl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_xbrl
        if self.is_xbrl:
            _dict['is_xbrl'] = self.is_xbrl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if accepted_date (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_date is None and "accepted_date" in self.model_fields_set:
            _dict['accepted_date'] = None

        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if cik (nullable) is None
        # and model_fields_set contains the field
        if self.cik is None and "cik" in self.model_fields_set:
            _dict['cik'] = None

        # set to None if report_type (nullable) is None
        # and model_fields_set contains the field
        if self.report_type is None and "report_type" in self.model_fields_set:
            _dict['report_type'] = None

        # set to None if filing_url (nullable) is None
        # and model_fields_set contains the field
        if self.filing_url is None and "filing_url" in self.model_fields_set:
            _dict['filing_url'] = None

        # set to None if report_date (nullable) is None
        # and model_fields_set contains the field
        if self.report_date is None and "report_date" in self.model_fields_set:
            _dict['report_date'] = None

        # set to None if act (nullable) is None
        # and model_fields_set contains the field
        if self.act is None and "act" in self.model_fields_set:
            _dict['act'] = None

        # set to None if items (nullable) is None
        # and model_fields_set contains the field
        if self.items is None and "items" in self.model_fields_set:
            _dict['items'] = None

        # set to None if primary_doc_description (nullable) is None
        # and model_fields_set contains the field
        if self.primary_doc_description is None and "primary_doc_description" in self.model_fields_set:
            _dict['primary_doc_description'] = None

        # set to None if primary_doc (nullable) is None
        # and model_fields_set contains the field
        if self.primary_doc is None and "primary_doc" in self.model_fields_set:
            _dict['primary_doc'] = None

        # set to None if accession_number (nullable) is None
        # and model_fields_set contains the field
        if self.accession_number is None and "accession_number" in self.model_fields_set:
            _dict['accession_number'] = None

        # set to None if file_number (nullable) is None
        # and model_fields_set contains the field
        if self.file_number is None and "file_number" in self.model_fields_set:
            _dict['file_number'] = None

        # set to None if film_number (nullable) is None
        # and model_fields_set contains the field
        if self.film_number is None and "film_number" in self.model_fields_set:
            _dict['film_number'] = None

        # set to None if is_inline_xbrl (nullable) is None
        # and model_fields_set contains the field
        if self.is_inline_xbrl is None and "is_inline_xbrl" in self.model_fields_set:
            _dict['is_inline_xbrl'] = None

        # set to None if is_xbrl (nullable) is None
        # and model_fields_set contains the field
        if self.is_xbrl is None and "is_xbrl" in self.model_fields_set:
            _dict['is_xbrl'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        # set to None if complete_submission_url (nullable) is None
        # and model_fields_set contains the field
        if self.complete_submission_url is None and "complete_submission_url" in self.model_fields_set:
            _dict['complete_submission_url'] = None

        # set to None if filing_detail_url (nullable) is None
        # and model_fields_set contains the field
        if self.filing_detail_url is None and "filing_detail_url" in self.model_fields_set:
            _dict['filing_detail_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecCompanyFilingsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filing_date": obj.get("filing_date"),
            "accepted_date": obj.get("accepted_date"),
            "symbol": obj.get("symbol"),
            "cik": obj.get("cik"),
            "report_type": obj.get("report_type"),
            "filing_url": obj.get("filing_url"),
            "report_url": obj.get("report_url"),
            "report_date": obj.get("report_date"),
            "act": Act.from_dict(obj["act"]) if obj.get("act") is not None else None,
            "items": Items.from_dict(obj["items"]) if obj.get("items") is not None else None,
            "primary_doc_description": obj.get("primary_doc_description"),
            "primary_doc": obj.get("primary_doc"),
            "accession_number": AccessionNumber.from_dict(obj["accession_number"]) if obj.get("accession_number") is not None else None,
            "file_number": FileNumber.from_dict(obj["file_number"]) if obj.get("file_number") is not None else None,
            "film_number": FilmNumber.from_dict(obj["film_number"]) if obj.get("film_number") is not None else None,
            "is_inline_xbrl": IsInlineXbrl.from_dict(obj["is_inline_xbrl"]) if obj.get("is_inline_xbrl") is not None else None,
            "is_xbrl": IsXbrl.from_dict(obj["is_xbrl"]) if obj.get("is_xbrl") is not None else None,
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "complete_submission_url": obj.get("complete_submission_url"),
            "filing_detail_url": obj.get("filing_detail_url")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


