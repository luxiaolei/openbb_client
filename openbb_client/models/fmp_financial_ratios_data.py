# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPFinancialRatiosData(BaseModel):
    """
    FMP Financial Ratios Data.
    """ # noqa: E501
    period_ending: StrictStr = Field(description="The date of the data.")
    fiscal_period: StrictStr = Field(description="Period of the financial ratios.")
    fiscal_year: Optional[StrictInt] = None
    current_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    quick_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    cash_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    days_of_sales_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    days_of_inventory_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    operating_cycle: Optional[Union[StrictFloat, StrictInt]] = None
    days_of_payables_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    cash_conversion_cycle: Optional[Union[StrictFloat, StrictInt]] = None
    gross_profit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    operating_profit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    pretax_profit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    net_profit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    effective_tax_rate: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_assets: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_equity: Optional[Union[StrictFloat, StrictInt]] = None
    return_on_capital_employed: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_per_ebt: Optional[Union[StrictFloat, StrictInt]] = None
    ebt_per_ebit: Optional[Union[StrictFloat, StrictInt]] = None
    ebit_per_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    debt_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    debt_equity_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    long_term_debt_to_capitalization: Optional[Union[StrictFloat, StrictInt]] = None
    total_debt_to_capitalization: Optional[Union[StrictFloat, StrictInt]] = None
    interest_coverage: Optional[Union[StrictFloat, StrictInt]] = None
    cash_flow_to_debt_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    company_equity_multiplier: Optional[Union[StrictFloat, StrictInt]] = None
    receivables_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    payables_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    inventory_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    fixed_asset_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    asset_turnover: Optional[Union[StrictFloat, StrictInt]] = None
    operating_cash_flow_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    free_cash_flow_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    cash_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    payout_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    operating_cash_flow_sales_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    free_cash_flow_operating_cash_flow_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    cash_flow_coverage_ratios: Optional[Union[StrictFloat, StrictInt]] = None
    short_term_coverage_ratios: Optional[Union[StrictFloat, StrictInt]] = None
    capital_expenditure_coverage_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_paid_and_capex_coverage_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_payout_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_book_value_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_book_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_sales_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_earnings_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_free_cash_flows_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_to_operating_cash_flows_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_cash_flow_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_earnings_to_growth_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    price_sales_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_yield: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_yield_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    dividend_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    enterprise_value_multiple: Optional[Union[StrictFloat, StrictInt]] = None
    price_fair_value: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "current_ratio", "quick_ratio", "cash_ratio", "days_of_sales_outstanding", "days_of_inventory_outstanding", "operating_cycle", "days_of_payables_outstanding", "cash_conversion_cycle", "gross_profit_margin", "operating_profit_margin", "pretax_profit_margin", "net_profit_margin", "effective_tax_rate", "return_on_assets", "return_on_equity", "return_on_capital_employed", "net_income_per_ebt", "ebt_per_ebit", "ebit_per_revenue", "debt_ratio", "debt_equity_ratio", "long_term_debt_to_capitalization", "total_debt_to_capitalization", "interest_coverage", "cash_flow_to_debt_ratio", "company_equity_multiplier", "receivables_turnover", "payables_turnover", "inventory_turnover", "fixed_asset_turnover", "asset_turnover", "operating_cash_flow_per_share", "free_cash_flow_per_share", "cash_per_share", "payout_ratio", "operating_cash_flow_sales_ratio", "free_cash_flow_operating_cash_flow_ratio", "cash_flow_coverage_ratios", "short_term_coverage_ratios", "capital_expenditure_coverage_ratio", "dividend_paid_and_capex_coverage_ratio", "dividend_payout_ratio", "price_book_value_ratio", "price_to_book_ratio", "price_to_sales_ratio", "price_earnings_ratio", "price_to_free_cash_flows_ratio", "price_to_operating_cash_flows_ratio", "price_cash_flow_ratio", "price_earnings_to_growth_ratio", "price_sales_ratio", "dividend_yield", "dividend_yield_percentage", "dividend_per_share", "enterprise_value_multiple", "price_fair_value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPFinancialRatiosData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if current_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.current_ratio is None and "current_ratio" in self.model_fields_set:
            _dict['current_ratio'] = None

        # set to None if quick_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.quick_ratio is None and "quick_ratio" in self.model_fields_set:
            _dict['quick_ratio'] = None

        # set to None if cash_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.cash_ratio is None and "cash_ratio" in self.model_fields_set:
            _dict['cash_ratio'] = None

        # set to None if days_of_sales_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.days_of_sales_outstanding is None and "days_of_sales_outstanding" in self.model_fields_set:
            _dict['days_of_sales_outstanding'] = None

        # set to None if days_of_inventory_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.days_of_inventory_outstanding is None and "days_of_inventory_outstanding" in self.model_fields_set:
            _dict['days_of_inventory_outstanding'] = None

        # set to None if operating_cycle (nullable) is None
        # and model_fields_set contains the field
        if self.operating_cycle is None and "operating_cycle" in self.model_fields_set:
            _dict['operating_cycle'] = None

        # set to None if days_of_payables_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.days_of_payables_outstanding is None and "days_of_payables_outstanding" in self.model_fields_set:
            _dict['days_of_payables_outstanding'] = None

        # set to None if cash_conversion_cycle (nullable) is None
        # and model_fields_set contains the field
        if self.cash_conversion_cycle is None and "cash_conversion_cycle" in self.model_fields_set:
            _dict['cash_conversion_cycle'] = None

        # set to None if gross_profit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.gross_profit_margin is None and "gross_profit_margin" in self.model_fields_set:
            _dict['gross_profit_margin'] = None

        # set to None if operating_profit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.operating_profit_margin is None and "operating_profit_margin" in self.model_fields_set:
            _dict['operating_profit_margin'] = None

        # set to None if pretax_profit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.pretax_profit_margin is None and "pretax_profit_margin" in self.model_fields_set:
            _dict['pretax_profit_margin'] = None

        # set to None if net_profit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.net_profit_margin is None and "net_profit_margin" in self.model_fields_set:
            _dict['net_profit_margin'] = None

        # set to None if effective_tax_rate (nullable) is None
        # and model_fields_set contains the field
        if self.effective_tax_rate is None and "effective_tax_rate" in self.model_fields_set:
            _dict['effective_tax_rate'] = None

        # set to None if return_on_assets (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_assets is None and "return_on_assets" in self.model_fields_set:
            _dict['return_on_assets'] = None

        # set to None if return_on_equity (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_equity is None and "return_on_equity" in self.model_fields_set:
            _dict['return_on_equity'] = None

        # set to None if return_on_capital_employed (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_capital_employed is None and "return_on_capital_employed" in self.model_fields_set:
            _dict['return_on_capital_employed'] = None

        # set to None if net_income_per_ebt (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_per_ebt is None and "net_income_per_ebt" in self.model_fields_set:
            _dict['net_income_per_ebt'] = None

        # set to None if ebt_per_ebit (nullable) is None
        # and model_fields_set contains the field
        if self.ebt_per_ebit is None and "ebt_per_ebit" in self.model_fields_set:
            _dict['ebt_per_ebit'] = None

        # set to None if ebit_per_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.ebit_per_revenue is None and "ebit_per_revenue" in self.model_fields_set:
            _dict['ebit_per_revenue'] = None

        # set to None if debt_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.debt_ratio is None and "debt_ratio" in self.model_fields_set:
            _dict['debt_ratio'] = None

        # set to None if debt_equity_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.debt_equity_ratio is None and "debt_equity_ratio" in self.model_fields_set:
            _dict['debt_equity_ratio'] = None

        # set to None if long_term_debt_to_capitalization (nullable) is None
        # and model_fields_set contains the field
        if self.long_term_debt_to_capitalization is None and "long_term_debt_to_capitalization" in self.model_fields_set:
            _dict['long_term_debt_to_capitalization'] = None

        # set to None if total_debt_to_capitalization (nullable) is None
        # and model_fields_set contains the field
        if self.total_debt_to_capitalization is None and "total_debt_to_capitalization" in self.model_fields_set:
            _dict['total_debt_to_capitalization'] = None

        # set to None if interest_coverage (nullable) is None
        # and model_fields_set contains the field
        if self.interest_coverage is None and "interest_coverage" in self.model_fields_set:
            _dict['interest_coverage'] = None

        # set to None if cash_flow_to_debt_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.cash_flow_to_debt_ratio is None and "cash_flow_to_debt_ratio" in self.model_fields_set:
            _dict['cash_flow_to_debt_ratio'] = None

        # set to None if company_equity_multiplier (nullable) is None
        # and model_fields_set contains the field
        if self.company_equity_multiplier is None and "company_equity_multiplier" in self.model_fields_set:
            _dict['company_equity_multiplier'] = None

        # set to None if receivables_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.receivables_turnover is None and "receivables_turnover" in self.model_fields_set:
            _dict['receivables_turnover'] = None

        # set to None if payables_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.payables_turnover is None and "payables_turnover" in self.model_fields_set:
            _dict['payables_turnover'] = None

        # set to None if inventory_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.inventory_turnover is None and "inventory_turnover" in self.model_fields_set:
            _dict['inventory_turnover'] = None

        # set to None if fixed_asset_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_asset_turnover is None and "fixed_asset_turnover" in self.model_fields_set:
            _dict['fixed_asset_turnover'] = None

        # set to None if asset_turnover (nullable) is None
        # and model_fields_set contains the field
        if self.asset_turnover is None and "asset_turnover" in self.model_fields_set:
            _dict['asset_turnover'] = None

        # set to None if operating_cash_flow_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.operating_cash_flow_per_share is None and "operating_cash_flow_per_share" in self.model_fields_set:
            _dict['operating_cash_flow_per_share'] = None

        # set to None if free_cash_flow_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow_per_share is None and "free_cash_flow_per_share" in self.model_fields_set:
            _dict['free_cash_flow_per_share'] = None

        # set to None if cash_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.cash_per_share is None and "cash_per_share" in self.model_fields_set:
            _dict['cash_per_share'] = None

        # set to None if payout_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.payout_ratio is None and "payout_ratio" in self.model_fields_set:
            _dict['payout_ratio'] = None

        # set to None if operating_cash_flow_sales_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.operating_cash_flow_sales_ratio is None and "operating_cash_flow_sales_ratio" in self.model_fields_set:
            _dict['operating_cash_flow_sales_ratio'] = None

        # set to None if free_cash_flow_operating_cash_flow_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow_operating_cash_flow_ratio is None and "free_cash_flow_operating_cash_flow_ratio" in self.model_fields_set:
            _dict['free_cash_flow_operating_cash_flow_ratio'] = None

        # set to None if cash_flow_coverage_ratios (nullable) is None
        # and model_fields_set contains the field
        if self.cash_flow_coverage_ratios is None and "cash_flow_coverage_ratios" in self.model_fields_set:
            _dict['cash_flow_coverage_ratios'] = None

        # set to None if short_term_coverage_ratios (nullable) is None
        # and model_fields_set contains the field
        if self.short_term_coverage_ratios is None and "short_term_coverage_ratios" in self.model_fields_set:
            _dict['short_term_coverage_ratios'] = None

        # set to None if capital_expenditure_coverage_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.capital_expenditure_coverage_ratio is None and "capital_expenditure_coverage_ratio" in self.model_fields_set:
            _dict['capital_expenditure_coverage_ratio'] = None

        # set to None if dividend_paid_and_capex_coverage_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_paid_and_capex_coverage_ratio is None and "dividend_paid_and_capex_coverage_ratio" in self.model_fields_set:
            _dict['dividend_paid_and_capex_coverage_ratio'] = None

        # set to None if dividend_payout_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_payout_ratio is None and "dividend_payout_ratio" in self.model_fields_set:
            _dict['dividend_payout_ratio'] = None

        # set to None if price_book_value_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_book_value_ratio is None and "price_book_value_ratio" in self.model_fields_set:
            _dict['price_book_value_ratio'] = None

        # set to None if price_to_book_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_book_ratio is None and "price_to_book_ratio" in self.model_fields_set:
            _dict['price_to_book_ratio'] = None

        # set to None if price_to_sales_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_sales_ratio is None and "price_to_sales_ratio" in self.model_fields_set:
            _dict['price_to_sales_ratio'] = None

        # set to None if price_earnings_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_earnings_ratio is None and "price_earnings_ratio" in self.model_fields_set:
            _dict['price_earnings_ratio'] = None

        # set to None if price_to_free_cash_flows_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_free_cash_flows_ratio is None and "price_to_free_cash_flows_ratio" in self.model_fields_set:
            _dict['price_to_free_cash_flows_ratio'] = None

        # set to None if price_to_operating_cash_flows_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_operating_cash_flows_ratio is None and "price_to_operating_cash_flows_ratio" in self.model_fields_set:
            _dict['price_to_operating_cash_flows_ratio'] = None

        # set to None if price_cash_flow_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_cash_flow_ratio is None and "price_cash_flow_ratio" in self.model_fields_set:
            _dict['price_cash_flow_ratio'] = None

        # set to None if price_earnings_to_growth_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_earnings_to_growth_ratio is None and "price_earnings_to_growth_ratio" in self.model_fields_set:
            _dict['price_earnings_to_growth_ratio'] = None

        # set to None if price_sales_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.price_sales_ratio is None and "price_sales_ratio" in self.model_fields_set:
            _dict['price_sales_ratio'] = None

        # set to None if dividend_yield (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_yield is None and "dividend_yield" in self.model_fields_set:
            _dict['dividend_yield'] = None

        # set to None if dividend_yield_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_yield_percentage is None and "dividend_yield_percentage" in self.model_fields_set:
            _dict['dividend_yield_percentage'] = None

        # set to None if dividend_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.dividend_per_share is None and "dividend_per_share" in self.model_fields_set:
            _dict['dividend_per_share'] = None

        # set to None if enterprise_value_multiple (nullable) is None
        # and model_fields_set contains the field
        if self.enterprise_value_multiple is None and "enterprise_value_multiple" in self.model_fields_set:
            _dict['enterprise_value_multiple'] = None

        # set to None if price_fair_value (nullable) is None
        # and model_fields_set contains the field
        if self.price_fair_value is None and "price_fair_value" in self.model_fields_set:
            _dict['price_fair_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPFinancialRatiosData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "current_ratio": obj.get("current_ratio"),
            "quick_ratio": obj.get("quick_ratio"),
            "cash_ratio": obj.get("cash_ratio"),
            "days_of_sales_outstanding": obj.get("days_of_sales_outstanding"),
            "days_of_inventory_outstanding": obj.get("days_of_inventory_outstanding"),
            "operating_cycle": obj.get("operating_cycle"),
            "days_of_payables_outstanding": obj.get("days_of_payables_outstanding"),
            "cash_conversion_cycle": obj.get("cash_conversion_cycle"),
            "gross_profit_margin": obj.get("gross_profit_margin"),
            "operating_profit_margin": obj.get("operating_profit_margin"),
            "pretax_profit_margin": obj.get("pretax_profit_margin"),
            "net_profit_margin": obj.get("net_profit_margin"),
            "effective_tax_rate": obj.get("effective_tax_rate"),
            "return_on_assets": obj.get("return_on_assets"),
            "return_on_equity": obj.get("return_on_equity"),
            "return_on_capital_employed": obj.get("return_on_capital_employed"),
            "net_income_per_ebt": obj.get("net_income_per_ebt"),
            "ebt_per_ebit": obj.get("ebt_per_ebit"),
            "ebit_per_revenue": obj.get("ebit_per_revenue"),
            "debt_ratio": obj.get("debt_ratio"),
            "debt_equity_ratio": obj.get("debt_equity_ratio"),
            "long_term_debt_to_capitalization": obj.get("long_term_debt_to_capitalization"),
            "total_debt_to_capitalization": obj.get("total_debt_to_capitalization"),
            "interest_coverage": obj.get("interest_coverage"),
            "cash_flow_to_debt_ratio": obj.get("cash_flow_to_debt_ratio"),
            "company_equity_multiplier": obj.get("company_equity_multiplier"),
            "receivables_turnover": obj.get("receivables_turnover"),
            "payables_turnover": obj.get("payables_turnover"),
            "inventory_turnover": obj.get("inventory_turnover"),
            "fixed_asset_turnover": obj.get("fixed_asset_turnover"),
            "asset_turnover": obj.get("asset_turnover"),
            "operating_cash_flow_per_share": obj.get("operating_cash_flow_per_share"),
            "free_cash_flow_per_share": obj.get("free_cash_flow_per_share"),
            "cash_per_share": obj.get("cash_per_share"),
            "payout_ratio": obj.get("payout_ratio"),
            "operating_cash_flow_sales_ratio": obj.get("operating_cash_flow_sales_ratio"),
            "free_cash_flow_operating_cash_flow_ratio": obj.get("free_cash_flow_operating_cash_flow_ratio"),
            "cash_flow_coverage_ratios": obj.get("cash_flow_coverage_ratios"),
            "short_term_coverage_ratios": obj.get("short_term_coverage_ratios"),
            "capital_expenditure_coverage_ratio": obj.get("capital_expenditure_coverage_ratio"),
            "dividend_paid_and_capex_coverage_ratio": obj.get("dividend_paid_and_capex_coverage_ratio"),
            "dividend_payout_ratio": obj.get("dividend_payout_ratio"),
            "price_book_value_ratio": obj.get("price_book_value_ratio"),
            "price_to_book_ratio": obj.get("price_to_book_ratio"),
            "price_to_sales_ratio": obj.get("price_to_sales_ratio"),
            "price_earnings_ratio": obj.get("price_earnings_ratio"),
            "price_to_free_cash_flows_ratio": obj.get("price_to_free_cash_flows_ratio"),
            "price_to_operating_cash_flows_ratio": obj.get("price_to_operating_cash_flows_ratio"),
            "price_cash_flow_ratio": obj.get("price_cash_flow_ratio"),
            "price_earnings_to_growth_ratio": obj.get("price_earnings_to_growth_ratio"),
            "price_sales_ratio": obj.get("price_sales_ratio"),
            "dividend_yield": obj.get("dividend_yield"),
            "dividend_yield_percentage": obj.get("dividend_yield_percentage"),
            "dividend_per_share": obj.get("dividend_per_share"),
            "enterprise_value_multiple": obj.get("enterprise_value_multiple"),
            "price_fair_value": obj.get("price_fair_value")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


