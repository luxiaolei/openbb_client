# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPPricePerformanceData(BaseModel):
    """
    FMP Price Performance Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="The ticker symbol.")
    one_day: Optional[Union[StrictFloat, StrictInt]] = None
    wtd: Optional[Union[StrictFloat, StrictInt]] = None
    one_week: Optional[Union[StrictFloat, StrictInt]] = None
    mtd: Optional[Union[StrictFloat, StrictInt]] = None
    one_month: Optional[Union[StrictFloat, StrictInt]] = None
    qtd: Optional[Union[StrictFloat, StrictInt]] = None
    three_month: Optional[Union[StrictFloat, StrictInt]] = None
    six_month: Optional[Union[StrictFloat, StrictInt]] = None
    ytd: Optional[Union[StrictFloat, StrictInt]] = None
    one_year: Optional[Union[StrictFloat, StrictInt]] = None
    two_year: Optional[Union[StrictFloat, StrictInt]] = None
    three_year: Optional[Union[StrictFloat, StrictInt]] = None
    four_year: Optional[Union[StrictFloat, StrictInt]] = None
    five_year: Optional[Union[StrictFloat, StrictInt]] = None
    ten_year: Optional[Union[StrictFloat, StrictInt]] = None
    max: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "one_day", "wtd", "one_week", "mtd", "one_month", "qtd", "three_month", "six_month", "ytd", "one_year", "two_year", "three_year", "four_year", "five_year", "ten_year", "max"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPPricePerformanceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if one_day (nullable) is None
        # and model_fields_set contains the field
        if self.one_day is None and "one_day" in self.model_fields_set:
            _dict['one_day'] = None

        # set to None if wtd (nullable) is None
        # and model_fields_set contains the field
        if self.wtd is None and "wtd" in self.model_fields_set:
            _dict['wtd'] = None

        # set to None if one_week (nullable) is None
        # and model_fields_set contains the field
        if self.one_week is None and "one_week" in self.model_fields_set:
            _dict['one_week'] = None

        # set to None if mtd (nullable) is None
        # and model_fields_set contains the field
        if self.mtd is None and "mtd" in self.model_fields_set:
            _dict['mtd'] = None

        # set to None if one_month (nullable) is None
        # and model_fields_set contains the field
        if self.one_month is None and "one_month" in self.model_fields_set:
            _dict['one_month'] = None

        # set to None if qtd (nullable) is None
        # and model_fields_set contains the field
        if self.qtd is None and "qtd" in self.model_fields_set:
            _dict['qtd'] = None

        # set to None if three_month (nullable) is None
        # and model_fields_set contains the field
        if self.three_month is None and "three_month" in self.model_fields_set:
            _dict['three_month'] = None

        # set to None if six_month (nullable) is None
        # and model_fields_set contains the field
        if self.six_month is None and "six_month" in self.model_fields_set:
            _dict['six_month'] = None

        # set to None if ytd (nullable) is None
        # and model_fields_set contains the field
        if self.ytd is None and "ytd" in self.model_fields_set:
            _dict['ytd'] = None

        # set to None if one_year (nullable) is None
        # and model_fields_set contains the field
        if self.one_year is None and "one_year" in self.model_fields_set:
            _dict['one_year'] = None

        # set to None if two_year (nullable) is None
        # and model_fields_set contains the field
        if self.two_year is None and "two_year" in self.model_fields_set:
            _dict['two_year'] = None

        # set to None if three_year (nullable) is None
        # and model_fields_set contains the field
        if self.three_year is None and "three_year" in self.model_fields_set:
            _dict['three_year'] = None

        # set to None if four_year (nullable) is None
        # and model_fields_set contains the field
        if self.four_year is None and "four_year" in self.model_fields_set:
            _dict['four_year'] = None

        # set to None if five_year (nullable) is None
        # and model_fields_set contains the field
        if self.five_year is None and "five_year" in self.model_fields_set:
            _dict['five_year'] = None

        # set to None if ten_year (nullable) is None
        # and model_fields_set contains the field
        if self.ten_year is None and "ten_year" in self.model_fields_set:
            _dict['ten_year'] = None

        # set to None if max (nullable) is None
        # and model_fields_set contains the field
        if self.max is None and "max" in self.model_fields_set:
            _dict['max'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPPricePerformanceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "one_day": obj.get("one_day"),
            "wtd": obj.get("wtd"),
            "one_week": obj.get("one_week"),
            "mtd": obj.get("mtd"),
            "one_month": obj.get("one_month"),
            "qtd": obj.get("qtd"),
            "three_month": obj.get("three_month"),
            "six_month": obj.get("six_month"),
            "ytd": obj.get("ytd"),
            "one_year": obj.get("one_year"),
            "two_year": obj.get("two_year"),
            "three_year": obj.get("three_year"),
            "four_year": obj.get("four_year"),
            "five_year": obj.get("five_year"),
            "ten_year": obj.get("ten_year"),
            "max": obj.get("max")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


