# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FMPInstitutionalOwnershipData(BaseModel):
    """
    FMP Institutional Ownership Data.
    """ # noqa: E501
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    cik: Optional[StrictStr] = None
    var_date: date = Field(description="The date of the data.", alias="date")
    investors_holding: StrictInt = Field(description="Number of investors holding the stock.")
    last_investors_holding: StrictInt = Field(description="Number of investors holding the stock in the last quarter.")
    investors_holding_change: StrictInt = Field(description="Change in the number of investors holding the stock.")
    number_of_13f_shares: Optional[StrictInt] = Field(default=None, description="Number of 13F shares.")
    last_number_of_13f_shares: Optional[StrictInt] = Field(default=None, description="Number of 13F shares in the last quarter.")
    number_of_13f_shares_change: Optional[StrictInt] = Field(default=None, description="Change in the number of 13F shares.")
    total_invested: Union[StrictFloat, StrictInt] = Field(description="Total amount invested.")
    last_total_invested: Union[StrictFloat, StrictInt] = Field(description="Total amount invested in the last quarter.")
    total_invested_change: Union[StrictFloat, StrictInt] = Field(description="Change in the total amount invested.")
    ownership_percent: Union[StrictFloat, StrictInt] = Field(description="Ownership percent.")
    last_ownership_percent: Union[StrictFloat, StrictInt] = Field(description="Ownership percent in the last quarter.")
    ownership_percent_change: Union[StrictFloat, StrictInt] = Field(description="Change in the ownership percent.")
    new_positions: StrictInt = Field(description="Number of new positions.")
    last_new_positions: StrictInt = Field(description="Number of new positions in the last quarter.")
    new_positions_change: StrictInt = Field(description="Change in the number of new positions.")
    increased_positions: StrictInt = Field(description="Number of increased positions.")
    last_increased_positions: StrictInt = Field(description="Number of increased positions in the last quarter.")
    increased_positions_change: StrictInt = Field(description="Change in the number of increased positions.")
    closed_positions: StrictInt = Field(description="Number of closed positions.")
    last_closed_positions: StrictInt = Field(description="Number of closed positions in the last quarter.")
    closed_positions_change: StrictInt = Field(description="Change in the number of closed positions.")
    reduced_positions: StrictInt = Field(description="Number of reduced positions.")
    last_reduced_positions: StrictInt = Field(description="Number of reduced positions in the last quarter.")
    reduced_positions_change: StrictInt = Field(description="Change in the number of reduced positions.")
    total_calls: StrictInt = Field(description="Total number of call options contracts traded for Apple Inc. on the specified date.")
    last_total_calls: StrictInt = Field(description="Total number of call options contracts traded for Apple Inc. on the previous reporting date.")
    total_calls_change: StrictInt = Field(description="Change in the total number of call options contracts traded between the current and previous reporting dates.")
    total_puts: StrictInt = Field(description="Total number of put options contracts traded for Apple Inc. on the specified date.")
    last_total_puts: StrictInt = Field(description="Total number of put options contracts traded for Apple Inc. on the previous reporting date.")
    total_puts_change: StrictInt = Field(description="Change in the total number of put options contracts traded between the current and previous reporting dates.")
    put_call_ratio: Union[StrictFloat, StrictInt] = Field(description="Put-call ratio, which is the ratio of the total number of put options to call options traded on the specified date.")
    last_put_call_ratio: Union[StrictFloat, StrictInt] = Field(description="Put-call ratio on the previous reporting date.")
    put_call_ratio_change: Union[StrictFloat, StrictInt] = Field(description="Change in the put-call ratio between the current and previous reporting dates.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol", "cik", "date", "investors_holding", "last_investors_holding", "investors_holding_change", "number_of_13f_shares", "last_number_of_13f_shares", "number_of_13f_shares_change", "total_invested", "last_total_invested", "total_invested_change", "ownership_percent", "last_ownership_percent", "ownership_percent_change", "new_positions", "last_new_positions", "new_positions_change", "increased_positions", "last_increased_positions", "increased_positions_change", "closed_positions", "last_closed_positions", "closed_positions_change", "reduced_positions", "last_reduced_positions", "reduced_positions_change", "total_calls", "last_total_calls", "total_calls_change", "total_puts", "last_total_puts", "total_puts_change", "put_call_ratio", "last_put_call_ratio", "put_call_ratio_change"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FMPInstitutionalOwnershipData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if cik (nullable) is None
        # and model_fields_set contains the field
        if self.cik is None and "cik" in self.model_fields_set:
            _dict['cik'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FMPInstitutionalOwnershipData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "cik": obj.get("cik"),
            "date": obj.get("date"),
            "investors_holding": obj.get("investors_holding"),
            "last_investors_holding": obj.get("last_investors_holding"),
            "investors_holding_change": obj.get("investors_holding_change"),
            "number_of_13f_shares": obj.get("number_of_13f_shares"),
            "last_number_of_13f_shares": obj.get("last_number_of_13f_shares"),
            "number_of_13f_shares_change": obj.get("number_of_13f_shares_change"),
            "total_invested": obj.get("total_invested"),
            "last_total_invested": obj.get("last_total_invested"),
            "total_invested_change": obj.get("total_invested_change"),
            "ownership_percent": obj.get("ownership_percent"),
            "last_ownership_percent": obj.get("last_ownership_percent"),
            "ownership_percent_change": obj.get("ownership_percent_change"),
            "new_positions": obj.get("new_positions"),
            "last_new_positions": obj.get("last_new_positions"),
            "new_positions_change": obj.get("new_positions_change"),
            "increased_positions": obj.get("increased_positions"),
            "last_increased_positions": obj.get("last_increased_positions"),
            "increased_positions_change": obj.get("increased_positions_change"),
            "closed_positions": obj.get("closed_positions"),
            "last_closed_positions": obj.get("last_closed_positions"),
            "closed_positions_change": obj.get("closed_positions_change"),
            "reduced_positions": obj.get("reduced_positions"),
            "last_reduced_positions": obj.get("last_reduced_positions"),
            "reduced_positions_change": obj.get("reduced_positions_change"),
            "total_calls": obj.get("total_calls"),
            "last_total_calls": obj.get("last_total_calls"),
            "total_calls_change": obj.get("total_calls_change"),
            "total_puts": obj.get("total_puts"),
            "last_total_puts": obj.get("last_total_puts"),
            "total_puts_change": obj.get("total_puts_change"),
            "put_call_ratio": obj.get("put_call_ratio"),
            "last_put_call_ratio": obj.get("last_put_call_ratio"),
            "put_call_ratio_change": obj.get("put_call_ratio_change")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


