# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EconDbPortVolumeData(BaseModel):
    """
    EconDB Port Volume Data.
    """ # noqa: E501
    var_date: date = Field(description="The date of the data.", alias="date")
    port_code: Optional[StrictStr] = None
    port_name: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    export_dwell_time: Optional[Union[StrictFloat, StrictInt]] = None
    import_dwell_time: Optional[Union[StrictFloat, StrictInt]] = None
    import_teu: Optional[StrictInt] = None
    export_teu: Optional[StrictInt] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "port_code", "port_name", "country", "export_dwell_time", "import_dwell_time", "import_teu", "export_teu"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EconDbPortVolumeData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if port_code (nullable) is None
        # and model_fields_set contains the field
        if self.port_code is None and "port_code" in self.model_fields_set:
            _dict['port_code'] = None

        # set to None if port_name (nullable) is None
        # and model_fields_set contains the field
        if self.port_name is None and "port_name" in self.model_fields_set:
            _dict['port_name'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if export_dwell_time (nullable) is None
        # and model_fields_set contains the field
        if self.export_dwell_time is None and "export_dwell_time" in self.model_fields_set:
            _dict['export_dwell_time'] = None

        # set to None if import_dwell_time (nullable) is None
        # and model_fields_set contains the field
        if self.import_dwell_time is None and "import_dwell_time" in self.model_fields_set:
            _dict['import_dwell_time'] = None

        # set to None if import_teu (nullable) is None
        # and model_fields_set contains the field
        if self.import_teu is None and "import_teu" in self.model_fields_set:
            _dict['import_teu'] = None

        # set to None if export_teu (nullable) is None
        # and model_fields_set contains the field
        if self.export_teu is None and "export_teu" in self.model_fields_set:
            _dict['export_teu'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EconDbPortVolumeData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "port_code": obj.get("port_code"),
            "port_name": obj.get("port_name"),
            "country": obj.get("country"),
            "export_dwell_time": obj.get("export_dwell_time"),
            "import_dwell_time": obj.get("import_dwell_time"),
            "import_teu": obj.get("import_teu"),
            "export_teu": obj.get("export_teu")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


