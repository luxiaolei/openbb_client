# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BlsSeriesData(BaseModel):
    """
    BLS Series Data.
    """ # noqa: E501
    var_date: date = Field(description="The date of the data.", alias="date")
    symbol: StrictStr = Field(description="Symbol representing the entity requested in the data.")
    title: Optional[StrictStr] = None
    value: Optional[Union[StrictFloat, StrictInt]] = None
    change_1_m: Optional[Union[StrictFloat, StrictInt]] = None
    change_3_m: Optional[Union[StrictFloat, StrictInt]] = None
    change_6_m: Optional[Union[StrictFloat, StrictInt]] = None
    change_12_m: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent_1_m: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent_3_m: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent_6_m: Optional[Union[StrictFloat, StrictInt]] = None
    change_percent_12_m: Optional[Union[StrictFloat, StrictInt]] = None
    latest: Optional[StrictBool] = None
    footnotes: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "symbol", "title", "value", "change_1_m", "change_3_m", "change_6_m", "change_12_m", "change_percent_1_m", "change_percent_3_m", "change_percent_6_m", "change_percent_12_m", "latest", "footnotes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlsSeriesData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if change_1_m (nullable) is None
        # and model_fields_set contains the field
        if self.change_1_m is None and "change_1_m" in self.model_fields_set:
            _dict['change_1_m'] = None

        # set to None if change_3_m (nullable) is None
        # and model_fields_set contains the field
        if self.change_3_m is None and "change_3_m" in self.model_fields_set:
            _dict['change_3_m'] = None

        # set to None if change_6_m (nullable) is None
        # and model_fields_set contains the field
        if self.change_6_m is None and "change_6_m" in self.model_fields_set:
            _dict['change_6_m'] = None

        # set to None if change_12_m (nullable) is None
        # and model_fields_set contains the field
        if self.change_12_m is None and "change_12_m" in self.model_fields_set:
            _dict['change_12_m'] = None

        # set to None if change_percent_1_m (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent_1_m is None and "change_percent_1_m" in self.model_fields_set:
            _dict['change_percent_1_m'] = None

        # set to None if change_percent_3_m (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent_3_m is None and "change_percent_3_m" in self.model_fields_set:
            _dict['change_percent_3_m'] = None

        # set to None if change_percent_6_m (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent_6_m is None and "change_percent_6_m" in self.model_fields_set:
            _dict['change_percent_6_m'] = None

        # set to None if change_percent_12_m (nullable) is None
        # and model_fields_set contains the field
        if self.change_percent_12_m is None and "change_percent_12_m" in self.model_fields_set:
            _dict['change_percent_12_m'] = None

        # set to None if latest (nullable) is None
        # and model_fields_set contains the field
        if self.latest is None and "latest" in self.model_fields_set:
            _dict['latest'] = None

        # set to None if footnotes (nullable) is None
        # and model_fields_set contains the field
        if self.footnotes is None and "footnotes" in self.model_fields_set:
            _dict['footnotes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlsSeriesData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "symbol": obj.get("symbol"),
            "title": obj.get("title"),
            "value": obj.get("value"),
            "change_1_m": obj.get("change_1_m"),
            "change_3_m": obj.get("change_3_m"),
            "change_6_m": obj.get("change_6_m"),
            "change_12_m": obj.get("change_12_m"),
            "change_percent_1_m": obj.get("change_percent_1_m"),
            "change_percent_3_m": obj.get("change_percent_3_m"),
            "change_percent_6_m": obj.get("change_percent_6_m"),
            "change_percent_12_m": obj.get("change_percent_12_m"),
            "latest": obj.get("latest"),
            "footnotes": obj.get("footnotes")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


