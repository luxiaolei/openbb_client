# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CftcCotData(BaseModel):
    """
    CFTC Commitment of Traders Reports Data.
    """ # noqa: E501
    var_date: date = Field(description="The date of the data.", alias="date")
    report_week: Optional[StrictStr] = None
    market_and_exchange_names: Optional[StrictStr] = None
    cftc_contract_market_code: Optional[StrictStr] = None
    cftc_market_code: Optional[StrictStr] = None
    cftc_region_code: Optional[StrictStr] = None
    cftc_commodity_code: Optional[StrictStr] = None
    cftc_contract_market_code_quotes: Optional[StrictStr] = None
    cftc_market_code_quotes: Optional[StrictStr] = None
    cftc_commodity_code_quotes: Optional[StrictStr] = None
    cftc_subgroup_code: Optional[StrictStr] = None
    commodity: Optional[StrictStr] = None
    commodity_group: Optional[StrictStr] = None
    commodity_subgroup: Optional[StrictStr] = None
    futonly_or_combined: Optional[StrictStr] = None
    contract_units: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "report_week", "market_and_exchange_names", "cftc_contract_market_code", "cftc_market_code", "cftc_region_code", "cftc_commodity_code", "cftc_contract_market_code_quotes", "cftc_market_code_quotes", "cftc_commodity_code_quotes", "cftc_subgroup_code", "commodity", "commodity_group", "commodity_subgroup", "futonly_or_combined", "contract_units"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CftcCotData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if report_week (nullable) is None
        # and model_fields_set contains the field
        if self.report_week is None and "report_week" in self.model_fields_set:
            _dict['report_week'] = None

        # set to None if market_and_exchange_names (nullable) is None
        # and model_fields_set contains the field
        if self.market_and_exchange_names is None and "market_and_exchange_names" in self.model_fields_set:
            _dict['market_and_exchange_names'] = None

        # set to None if cftc_contract_market_code (nullable) is None
        # and model_fields_set contains the field
        if self.cftc_contract_market_code is None and "cftc_contract_market_code" in self.model_fields_set:
            _dict['cftc_contract_market_code'] = None

        # set to None if cftc_market_code (nullable) is None
        # and model_fields_set contains the field
        if self.cftc_market_code is None and "cftc_market_code" in self.model_fields_set:
            _dict['cftc_market_code'] = None

        # set to None if cftc_region_code (nullable) is None
        # and model_fields_set contains the field
        if self.cftc_region_code is None and "cftc_region_code" in self.model_fields_set:
            _dict['cftc_region_code'] = None

        # set to None if cftc_commodity_code (nullable) is None
        # and model_fields_set contains the field
        if self.cftc_commodity_code is None and "cftc_commodity_code" in self.model_fields_set:
            _dict['cftc_commodity_code'] = None

        # set to None if cftc_contract_market_code_quotes (nullable) is None
        # and model_fields_set contains the field
        if self.cftc_contract_market_code_quotes is None and "cftc_contract_market_code_quotes" in self.model_fields_set:
            _dict['cftc_contract_market_code_quotes'] = None

        # set to None if cftc_market_code_quotes (nullable) is None
        # and model_fields_set contains the field
        if self.cftc_market_code_quotes is None and "cftc_market_code_quotes" in self.model_fields_set:
            _dict['cftc_market_code_quotes'] = None

        # set to None if cftc_commodity_code_quotes (nullable) is None
        # and model_fields_set contains the field
        if self.cftc_commodity_code_quotes is None and "cftc_commodity_code_quotes" in self.model_fields_set:
            _dict['cftc_commodity_code_quotes'] = None

        # set to None if cftc_subgroup_code (nullable) is None
        # and model_fields_set contains the field
        if self.cftc_subgroup_code is None and "cftc_subgroup_code" in self.model_fields_set:
            _dict['cftc_subgroup_code'] = None

        # set to None if commodity (nullable) is None
        # and model_fields_set contains the field
        if self.commodity is None and "commodity" in self.model_fields_set:
            _dict['commodity'] = None

        # set to None if commodity_group (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_group is None and "commodity_group" in self.model_fields_set:
            _dict['commodity_group'] = None

        # set to None if commodity_subgroup (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_subgroup is None and "commodity_subgroup" in self.model_fields_set:
            _dict['commodity_subgroup'] = None

        # set to None if futonly_or_combined (nullable) is None
        # and model_fields_set contains the field
        if self.futonly_or_combined is None and "futonly_or_combined" in self.model_fields_set:
            _dict['futonly_or_combined'] = None

        # set to None if contract_units (nullable) is None
        # and model_fields_set contains the field
        if self.contract_units is None and "contract_units" in self.model_fields_set:
            _dict['contract_units'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CftcCotData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "report_week": obj.get("report_week"),
            "market_and_exchange_names": obj.get("market_and_exchange_names"),
            "cftc_contract_market_code": obj.get("cftc_contract_market_code"),
            "cftc_market_code": obj.get("cftc_market_code"),
            "cftc_region_code": obj.get("cftc_region_code"),
            "cftc_commodity_code": obj.get("cftc_commodity_code"),
            "cftc_contract_market_code_quotes": obj.get("cftc_contract_market_code_quotes"),
            "cftc_market_code_quotes": obj.get("cftc_market_code_quotes"),
            "cftc_commodity_code_quotes": obj.get("cftc_commodity_code_quotes"),
            "cftc_subgroup_code": obj.get("cftc_subgroup_code"),
            "commodity": obj.get("commodity"),
            "commodity_group": obj.get("commodity_group"),
            "commodity_subgroup": obj.get("commodity_subgroup"),
            "futonly_or_combined": obj.get("futonly_or_combined"),
            "contract_units": obj.get("contract_units")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


