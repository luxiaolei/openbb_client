# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FederalReserveFederalFundsRateData(BaseModel):
    """
    FederalReserve FED Data.
    """ # noqa: E501
    var_date: date = Field(description="The date of the data.", alias="date")
    rate: Union[StrictFloat, StrictInt] = Field(description="Effective federal funds rate.")
    target_range_upper: Optional[Union[StrictFloat, StrictInt]] = None
    target_range_lower: Optional[Union[StrictFloat, StrictInt]] = None
    percentile_1: Optional[Union[StrictFloat, StrictInt]] = None
    percentile_25: Optional[Union[StrictFloat, StrictInt]] = None
    percentile_75: Optional[Union[StrictFloat, StrictInt]] = None
    percentile_99: Optional[Union[StrictFloat, StrictInt]] = None
    volume: Optional[Union[StrictFloat, StrictInt]] = None
    intraday_low: Optional[Union[StrictFloat, StrictInt]] = None
    intraday_high: Optional[Union[StrictFloat, StrictInt]] = None
    standard_deviation: Optional[Union[StrictFloat, StrictInt]] = None
    revision_indicator: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["date", "rate", "target_range_upper", "target_range_lower", "percentile_1", "percentile_25", "percentile_75", "percentile_99", "volume", "intraday_low", "intraday_high", "standard_deviation", "revision_indicator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FederalReserveFederalFundsRateData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if target_range_upper (nullable) is None
        # and model_fields_set contains the field
        if self.target_range_upper is None and "target_range_upper" in self.model_fields_set:
            _dict['target_range_upper'] = None

        # set to None if target_range_lower (nullable) is None
        # and model_fields_set contains the field
        if self.target_range_lower is None and "target_range_lower" in self.model_fields_set:
            _dict['target_range_lower'] = None

        # set to None if percentile_1 (nullable) is None
        # and model_fields_set contains the field
        if self.percentile_1 is None and "percentile_1" in self.model_fields_set:
            _dict['percentile_1'] = None

        # set to None if percentile_25 (nullable) is None
        # and model_fields_set contains the field
        if self.percentile_25 is None and "percentile_25" in self.model_fields_set:
            _dict['percentile_25'] = None

        # set to None if percentile_75 (nullable) is None
        # and model_fields_set contains the field
        if self.percentile_75 is None and "percentile_75" in self.model_fields_set:
            _dict['percentile_75'] = None

        # set to None if percentile_99 (nullable) is None
        # and model_fields_set contains the field
        if self.percentile_99 is None and "percentile_99" in self.model_fields_set:
            _dict['percentile_99'] = None

        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if intraday_low (nullable) is None
        # and model_fields_set contains the field
        if self.intraday_low is None and "intraday_low" in self.model_fields_set:
            _dict['intraday_low'] = None

        # set to None if intraday_high (nullable) is None
        # and model_fields_set contains the field
        if self.intraday_high is None and "intraday_high" in self.model_fields_set:
            _dict['intraday_high'] = None

        # set to None if standard_deviation (nullable) is None
        # and model_fields_set contains the field
        if self.standard_deviation is None and "standard_deviation" in self.model_fields_set:
            _dict['standard_deviation'] = None

        # set to None if revision_indicator (nullable) is None
        # and model_fields_set contains the field
        if self.revision_indicator is None and "revision_indicator" in self.model_fields_set:
            _dict['revision_indicator'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FederalReserveFederalFundsRateData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "rate": obj.get("rate"),
            "target_range_upper": obj.get("target_range_upper"),
            "target_range_lower": obj.get("target_range_lower"),
            "percentile_1": obj.get("percentile_1"),
            "percentile_25": obj.get("percentile_25"),
            "percentile_75": obj.get("percentile_75"),
            "percentile_99": obj.get("percentile_99"),
            "volume": obj.get("volume"),
            "intraday_low": obj.get("intraday_low"),
            "intraday_high": obj.get("intraday_high"),
            "standard_deviation": obj.get("standard_deviation"),
            "revision_indicator": obj.get("revision_indicator")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


