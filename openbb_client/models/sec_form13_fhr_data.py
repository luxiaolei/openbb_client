# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SecForm13FHRData(BaseModel):
    """
    SEC Form 13F-HR Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end-of-quarter date of the filing.")
    issuer: StrictStr = Field(description="The name of the issuer.")
    cusip: StrictStr = Field(description="The CUSIP of the security.")
    asset_class: StrictStr = Field(description="The title of the asset class for the security.")
    security_type: Optional[StrictStr] = None
    option_type: Optional[StrictStr] = None
    investment_discretion: Optional[StrictStr] = None
    voting_authority_sole: Optional[StrictInt] = None
    voting_authority_shared: Optional[StrictInt] = None
    voting_authority_none: Optional[StrictInt] = None
    principal_amount: StrictInt = Field(description="The total number of shares of the class of security or the principal amount of such class. Defined by the 'security_type'. Only long positions are reported")
    value: StrictInt = Field(description="The fair market value of the holding of the particular class of security. The value reported for options is the fair market value of the underlying security with respect to the number of shares controlled. Values are rounded to the nearest US dollar and use the closing price of the last trading day of the calendar year or quarter.")
    weight: Union[StrictFloat, StrictInt] = Field(description="The weight of the security relative to the market value of all securities in the filing , as a normalized percent.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "issuer", "cusip", "asset_class", "security_type", "option_type", "investment_discretion", "voting_authority_sole", "voting_authority_shared", "voting_authority_none", "principal_amount", "value", "weight"]

    @field_validator('security_type')
    def security_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SH', 'PRN']):
            raise ValueError("must be one of enum values ('SH', 'PRN')")
        return value

    @field_validator('option_type')
    def option_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['call', 'put']):
            raise ValueError("must be one of enum values ('call', 'put')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecForm13FHRData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if security_type (nullable) is None
        # and model_fields_set contains the field
        if self.security_type is None and "security_type" in self.model_fields_set:
            _dict['security_type'] = None

        # set to None if option_type (nullable) is None
        # and model_fields_set contains the field
        if self.option_type is None and "option_type" in self.model_fields_set:
            _dict['option_type'] = None

        # set to None if investment_discretion (nullable) is None
        # and model_fields_set contains the field
        if self.investment_discretion is None and "investment_discretion" in self.model_fields_set:
            _dict['investment_discretion'] = None

        # set to None if voting_authority_sole (nullable) is None
        # and model_fields_set contains the field
        if self.voting_authority_sole is None and "voting_authority_sole" in self.model_fields_set:
            _dict['voting_authority_sole'] = None

        # set to None if voting_authority_shared (nullable) is None
        # and model_fields_set contains the field
        if self.voting_authority_shared is None and "voting_authority_shared" in self.model_fields_set:
            _dict['voting_authority_shared'] = None

        # set to None if voting_authority_none (nullable) is None
        # and model_fields_set contains the field
        if self.voting_authority_none is None and "voting_authority_none" in self.model_fields_set:
            _dict['voting_authority_none'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecForm13FHRData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "issuer": obj.get("issuer"),
            "cusip": obj.get("cusip"),
            "asset_class": obj.get("asset_class"),
            "security_type": obj.get("security_type"),
            "option_type": obj.get("option_type"),
            "investment_discretion": obj.get("investment_discretion"),
            "voting_authority_sole": obj.get("voting_authority_sole"),
            "voting_authority_shared": obj.get("voting_authority_shared"),
            "voting_authority_none": obj.get("voting_authority_none"),
            "principal_amount": obj.get("principal_amount"),
            "value": obj.get("value"),
            "weight": obj.get("weight")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


