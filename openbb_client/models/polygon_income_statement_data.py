# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PolygonIncomeStatementData(BaseModel):
    """
    Polygon Income Statement Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end date of the reporting period.")
    fiscal_period: Optional[StrictStr] = None
    fiscal_year: Optional[StrictInt] = None
    revenue: Optional[Union[StrictFloat, StrictInt]] = None
    cost_of_revenue_goods: Optional[Union[StrictFloat, StrictInt]] = None
    cost_of_revenue_services: Optional[Union[StrictFloat, StrictInt]] = None
    cost_of_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    gross_profit: Optional[Union[StrictFloat, StrictInt]] = None
    provisions_for_loan_lease_and_other_losses: Optional[Union[StrictFloat, StrictInt]] = None
    depreciation_and_amortization: Optional[Union[StrictFloat, StrictInt]] = None
    income_tax_expense_benefit_current: Optional[Union[StrictFloat, StrictInt]] = None
    deferred_tax_benefit: Optional[Union[StrictFloat, StrictInt]] = None
    benefits_costs_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    selling_general_and_administrative_expense: Optional[Union[StrictFloat, StrictInt]] = None
    research_and_development: Optional[Union[StrictFloat, StrictInt]] = None
    costs_and_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    other_operating_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    operating_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    operating_income: Optional[Union[StrictFloat, StrictInt]] = None
    non_operating_income: Optional[Union[StrictFloat, StrictInt]] = None
    interest_and_dividend_income: Optional[Union[StrictFloat, StrictInt]] = None
    total_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    interest_and_debt_expense: Optional[Union[StrictFloat, StrictInt]] = None
    net_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    interest_income_after_provision_for_losses: Optional[Union[StrictFloat, StrictInt]] = None
    non_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    non_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    income_from_discontinued_operations_net_of_tax_on_disposal: Optional[Union[StrictFloat, StrictInt]] = None
    income_from_discontinued_operations_net_of_tax: Optional[Union[StrictFloat, StrictInt]] = None
    income_before_equity_method_investments: Optional[Union[StrictFloat, StrictInt]] = None
    income_from_equity_method_investments: Optional[Union[StrictFloat, StrictInt]] = None
    total_pre_tax_income: Optional[Union[StrictFloat, StrictInt]] = None
    income_tax_expense: Optional[Union[StrictFloat, StrictInt]] = None
    income_after_tax: Optional[Union[StrictFloat, StrictInt]] = None
    consolidated_net_income: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_attributable_noncontrolling_interest: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_attributable_to_parent: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_attributable_to_common_shareholders: Optional[Union[StrictFloat, StrictInt]] = None
    participating_securities_earnings: Optional[Union[StrictFloat, StrictInt]] = None
    undistributed_earnings_allocated_to_participating_securities: Optional[Union[StrictFloat, StrictInt]] = None
    common_stock_dividends: Optional[Union[StrictFloat, StrictInt]] = None
    preferred_stock_dividends_and_other_adjustments: Optional[Union[StrictFloat, StrictInt]] = None
    basic_earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    diluted_earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_basic_shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_diluted_shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "revenue", "cost_of_revenue_goods", "cost_of_revenue_services", "cost_of_revenue", "gross_profit", "provisions_for_loan_lease_and_other_losses", "depreciation_and_amortization", "income_tax_expense_benefit_current", "deferred_tax_benefit", "benefits_costs_expenses", "selling_general_and_administrative_expense", "research_and_development", "costs_and_expenses", "other_operating_expenses", "operating_expenses", "operating_income", "non_operating_income", "interest_and_dividend_income", "total_interest_expense", "interest_and_debt_expense", "net_interest_income", "interest_income_after_provision_for_losses", "non_interest_expense", "non_interest_income", "income_from_discontinued_operations_net_of_tax_on_disposal", "income_from_discontinued_operations_net_of_tax", "income_before_equity_method_investments", "income_from_equity_method_investments", "total_pre_tax_income", "income_tax_expense", "income_after_tax", "consolidated_net_income", "net_income_attributable_noncontrolling_interest", "net_income_attributable_to_parent", "net_income_attributable_to_common_shareholders", "participating_securities_earnings", "undistributed_earnings_allocated_to_participating_securities", "common_stock_dividends", "preferred_stock_dividends_and_other_adjustments", "basic_earnings_per_share", "diluted_earnings_per_share", "weighted_average_basic_shares_outstanding", "weighted_average_diluted_shares_outstanding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolygonIncomeStatementData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if revenue (nullable) is None
        # and model_fields_set contains the field
        if self.revenue is None and "revenue" in self.model_fields_set:
            _dict['revenue'] = None

        # set to None if cost_of_revenue_goods (nullable) is None
        # and model_fields_set contains the field
        if self.cost_of_revenue_goods is None and "cost_of_revenue_goods" in self.model_fields_set:
            _dict['cost_of_revenue_goods'] = None

        # set to None if cost_of_revenue_services (nullable) is None
        # and model_fields_set contains the field
        if self.cost_of_revenue_services is None and "cost_of_revenue_services" in self.model_fields_set:
            _dict['cost_of_revenue_services'] = None

        # set to None if cost_of_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.cost_of_revenue is None and "cost_of_revenue" in self.model_fields_set:
            _dict['cost_of_revenue'] = None

        # set to None if gross_profit (nullable) is None
        # and model_fields_set contains the field
        if self.gross_profit is None and "gross_profit" in self.model_fields_set:
            _dict['gross_profit'] = None

        # set to None if provisions_for_loan_lease_and_other_losses (nullable) is None
        # and model_fields_set contains the field
        if self.provisions_for_loan_lease_and_other_losses is None and "provisions_for_loan_lease_and_other_losses" in self.model_fields_set:
            _dict['provisions_for_loan_lease_and_other_losses'] = None

        # set to None if depreciation_and_amortization (nullable) is None
        # and model_fields_set contains the field
        if self.depreciation_and_amortization is None and "depreciation_and_amortization" in self.model_fields_set:
            _dict['depreciation_and_amortization'] = None

        # set to None if income_tax_expense_benefit_current (nullable) is None
        # and model_fields_set contains the field
        if self.income_tax_expense_benefit_current is None and "income_tax_expense_benefit_current" in self.model_fields_set:
            _dict['income_tax_expense_benefit_current'] = None

        # set to None if deferred_tax_benefit (nullable) is None
        # and model_fields_set contains the field
        if self.deferred_tax_benefit is None and "deferred_tax_benefit" in self.model_fields_set:
            _dict['deferred_tax_benefit'] = None

        # set to None if benefits_costs_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.benefits_costs_expenses is None and "benefits_costs_expenses" in self.model_fields_set:
            _dict['benefits_costs_expenses'] = None

        # set to None if selling_general_and_administrative_expense (nullable) is None
        # and model_fields_set contains the field
        if self.selling_general_and_administrative_expense is None and "selling_general_and_administrative_expense" in self.model_fields_set:
            _dict['selling_general_and_administrative_expense'] = None

        # set to None if research_and_development (nullable) is None
        # and model_fields_set contains the field
        if self.research_and_development is None and "research_and_development" in self.model_fields_set:
            _dict['research_and_development'] = None

        # set to None if costs_and_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.costs_and_expenses is None and "costs_and_expenses" in self.model_fields_set:
            _dict['costs_and_expenses'] = None

        # set to None if other_operating_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.other_operating_expenses is None and "other_operating_expenses" in self.model_fields_set:
            _dict['other_operating_expenses'] = None

        # set to None if operating_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.operating_expenses is None and "operating_expenses" in self.model_fields_set:
            _dict['operating_expenses'] = None

        # set to None if operating_income (nullable) is None
        # and model_fields_set contains the field
        if self.operating_income is None and "operating_income" in self.model_fields_set:
            _dict['operating_income'] = None

        # set to None if non_operating_income (nullable) is None
        # and model_fields_set contains the field
        if self.non_operating_income is None and "non_operating_income" in self.model_fields_set:
            _dict['non_operating_income'] = None

        # set to None if interest_and_dividend_income (nullable) is None
        # and model_fields_set contains the field
        if self.interest_and_dividend_income is None and "interest_and_dividend_income" in self.model_fields_set:
            _dict['interest_and_dividend_income'] = None

        # set to None if total_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.total_interest_expense is None and "total_interest_expense" in self.model_fields_set:
            _dict['total_interest_expense'] = None

        # set to None if interest_and_debt_expense (nullable) is None
        # and model_fields_set contains the field
        if self.interest_and_debt_expense is None and "interest_and_debt_expense" in self.model_fields_set:
            _dict['interest_and_debt_expense'] = None

        # set to None if net_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.net_interest_income is None and "net_interest_income" in self.model_fields_set:
            _dict['net_interest_income'] = None

        # set to None if interest_income_after_provision_for_losses (nullable) is None
        # and model_fields_set contains the field
        if self.interest_income_after_provision_for_losses is None and "interest_income_after_provision_for_losses" in self.model_fields_set:
            _dict['interest_income_after_provision_for_losses'] = None

        # set to None if non_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.non_interest_expense is None and "non_interest_expense" in self.model_fields_set:
            _dict['non_interest_expense'] = None

        # set to None if non_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.non_interest_income is None and "non_interest_income" in self.model_fields_set:
            _dict['non_interest_income'] = None

        # set to None if income_from_discontinued_operations_net_of_tax_on_disposal (nullable) is None
        # and model_fields_set contains the field
        if self.income_from_discontinued_operations_net_of_tax_on_disposal is None and "income_from_discontinued_operations_net_of_tax_on_disposal" in self.model_fields_set:
            _dict['income_from_discontinued_operations_net_of_tax_on_disposal'] = None

        # set to None if income_from_discontinued_operations_net_of_tax (nullable) is None
        # and model_fields_set contains the field
        if self.income_from_discontinued_operations_net_of_tax is None and "income_from_discontinued_operations_net_of_tax" in self.model_fields_set:
            _dict['income_from_discontinued_operations_net_of_tax'] = None

        # set to None if income_before_equity_method_investments (nullable) is None
        # and model_fields_set contains the field
        if self.income_before_equity_method_investments is None and "income_before_equity_method_investments" in self.model_fields_set:
            _dict['income_before_equity_method_investments'] = None

        # set to None if income_from_equity_method_investments (nullable) is None
        # and model_fields_set contains the field
        if self.income_from_equity_method_investments is None and "income_from_equity_method_investments" in self.model_fields_set:
            _dict['income_from_equity_method_investments'] = None

        # set to None if total_pre_tax_income (nullable) is None
        # and model_fields_set contains the field
        if self.total_pre_tax_income is None and "total_pre_tax_income" in self.model_fields_set:
            _dict['total_pre_tax_income'] = None

        # set to None if income_tax_expense (nullable) is None
        # and model_fields_set contains the field
        if self.income_tax_expense is None and "income_tax_expense" in self.model_fields_set:
            _dict['income_tax_expense'] = None

        # set to None if income_after_tax (nullable) is None
        # and model_fields_set contains the field
        if self.income_after_tax is None and "income_after_tax" in self.model_fields_set:
            _dict['income_after_tax'] = None

        # set to None if consolidated_net_income (nullable) is None
        # and model_fields_set contains the field
        if self.consolidated_net_income is None and "consolidated_net_income" in self.model_fields_set:
            _dict['consolidated_net_income'] = None

        # set to None if net_income_attributable_noncontrolling_interest (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_attributable_noncontrolling_interest is None and "net_income_attributable_noncontrolling_interest" in self.model_fields_set:
            _dict['net_income_attributable_noncontrolling_interest'] = None

        # set to None if net_income_attributable_to_parent (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_attributable_to_parent is None and "net_income_attributable_to_parent" in self.model_fields_set:
            _dict['net_income_attributable_to_parent'] = None

        # set to None if net_income_attributable_to_common_shareholders (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_attributable_to_common_shareholders is None and "net_income_attributable_to_common_shareholders" in self.model_fields_set:
            _dict['net_income_attributable_to_common_shareholders'] = None

        # set to None if participating_securities_earnings (nullable) is None
        # and model_fields_set contains the field
        if self.participating_securities_earnings is None and "participating_securities_earnings" in self.model_fields_set:
            _dict['participating_securities_earnings'] = None

        # set to None if undistributed_earnings_allocated_to_participating_securities (nullable) is None
        # and model_fields_set contains the field
        if self.undistributed_earnings_allocated_to_participating_securities is None and "undistributed_earnings_allocated_to_participating_securities" in self.model_fields_set:
            _dict['undistributed_earnings_allocated_to_participating_securities'] = None

        # set to None if common_stock_dividends (nullable) is None
        # and model_fields_set contains the field
        if self.common_stock_dividends is None and "common_stock_dividends" in self.model_fields_set:
            _dict['common_stock_dividends'] = None

        # set to None if preferred_stock_dividends_and_other_adjustments (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_stock_dividends_and_other_adjustments is None and "preferred_stock_dividends_and_other_adjustments" in self.model_fields_set:
            _dict['preferred_stock_dividends_and_other_adjustments'] = None

        # set to None if basic_earnings_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.basic_earnings_per_share is None and "basic_earnings_per_share" in self.model_fields_set:
            _dict['basic_earnings_per_share'] = None

        # set to None if diluted_earnings_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.diluted_earnings_per_share is None and "diluted_earnings_per_share" in self.model_fields_set:
            _dict['diluted_earnings_per_share'] = None

        # set to None if weighted_average_basic_shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_average_basic_shares_outstanding is None and "weighted_average_basic_shares_outstanding" in self.model_fields_set:
            _dict['weighted_average_basic_shares_outstanding'] = None

        # set to None if weighted_average_diluted_shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_average_diluted_shares_outstanding is None and "weighted_average_diluted_shares_outstanding" in self.model_fields_set:
            _dict['weighted_average_diluted_shares_outstanding'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolygonIncomeStatementData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "revenue": obj.get("revenue"),
            "cost_of_revenue_goods": obj.get("cost_of_revenue_goods"),
            "cost_of_revenue_services": obj.get("cost_of_revenue_services"),
            "cost_of_revenue": obj.get("cost_of_revenue"),
            "gross_profit": obj.get("gross_profit"),
            "provisions_for_loan_lease_and_other_losses": obj.get("provisions_for_loan_lease_and_other_losses"),
            "depreciation_and_amortization": obj.get("depreciation_and_amortization"),
            "income_tax_expense_benefit_current": obj.get("income_tax_expense_benefit_current"),
            "deferred_tax_benefit": obj.get("deferred_tax_benefit"),
            "benefits_costs_expenses": obj.get("benefits_costs_expenses"),
            "selling_general_and_administrative_expense": obj.get("selling_general_and_administrative_expense"),
            "research_and_development": obj.get("research_and_development"),
            "costs_and_expenses": obj.get("costs_and_expenses"),
            "other_operating_expenses": obj.get("other_operating_expenses"),
            "operating_expenses": obj.get("operating_expenses"),
            "operating_income": obj.get("operating_income"),
            "non_operating_income": obj.get("non_operating_income"),
            "interest_and_dividend_income": obj.get("interest_and_dividend_income"),
            "total_interest_expense": obj.get("total_interest_expense"),
            "interest_and_debt_expense": obj.get("interest_and_debt_expense"),
            "net_interest_income": obj.get("net_interest_income"),
            "interest_income_after_provision_for_losses": obj.get("interest_income_after_provision_for_losses"),
            "non_interest_expense": obj.get("non_interest_expense"),
            "non_interest_income": obj.get("non_interest_income"),
            "income_from_discontinued_operations_net_of_tax_on_disposal": obj.get("income_from_discontinued_operations_net_of_tax_on_disposal"),
            "income_from_discontinued_operations_net_of_tax": obj.get("income_from_discontinued_operations_net_of_tax"),
            "income_before_equity_method_investments": obj.get("income_before_equity_method_investments"),
            "income_from_equity_method_investments": obj.get("income_from_equity_method_investments"),
            "total_pre_tax_income": obj.get("total_pre_tax_income"),
            "income_tax_expense": obj.get("income_tax_expense"),
            "income_after_tax": obj.get("income_after_tax"),
            "consolidated_net_income": obj.get("consolidated_net_income"),
            "net_income_attributable_noncontrolling_interest": obj.get("net_income_attributable_noncontrolling_interest"),
            "net_income_attributable_to_parent": obj.get("net_income_attributable_to_parent"),
            "net_income_attributable_to_common_shareholders": obj.get("net_income_attributable_to_common_shareholders"),
            "participating_securities_earnings": obj.get("participating_securities_earnings"),
            "undistributed_earnings_allocated_to_participating_securities": obj.get("undistributed_earnings_allocated_to_participating_securities"),
            "common_stock_dividends": obj.get("common_stock_dividends"),
            "preferred_stock_dividends_and_other_adjustments": obj.get("preferred_stock_dividends_and_other_adjustments"),
            "basic_earnings_per_share": obj.get("basic_earnings_per_share"),
            "diluted_earnings_per_share": obj.get("diluted_earnings_per_share"),
            "weighted_average_basic_shares_outstanding": obj.get("weighted_average_basic_shares_outstanding"),
            "weighted_average_diluted_shares_outstanding": obj.get("weighted_average_diluted_shares_outstanding")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


