# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IntrinioIncomeStatementData(BaseModel):
    """
    Intrinio Income Statement Data.
    """ # noqa: E501
    period_ending: date = Field(description="The end date of the reporting period.")
    fiscal_period: Optional[StrictStr] = None
    fiscal_year: Optional[StrictInt] = None
    reported_currency: Optional[StrictStr] = None
    revenue: Optional[Union[StrictFloat, StrictInt]] = None
    operating_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    cost_of_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    operating_cost_of_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    gross_profit: Optional[Union[StrictFloat, StrictInt]] = None
    gross_profit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    provision_for_credit_losses: Optional[Union[StrictFloat, StrictInt]] = None
    research_and_development_expense: Optional[Union[StrictFloat, StrictInt]] = None
    selling_general_and_admin_expense: Optional[Union[StrictFloat, StrictInt]] = None
    salaries_and_employee_benefits: Optional[Union[StrictFloat, StrictInt]] = None
    marketing_expense: Optional[Union[StrictFloat, StrictInt]] = None
    net_occupancy_and_equipment_expense: Optional[Union[StrictFloat, StrictInt]] = None
    other_operating_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    depreciation_expense: Optional[Union[StrictFloat, StrictInt]] = None
    amortization_expense: Optional[Union[StrictFloat, StrictInt]] = None
    amortization_of_deferred_policy_acquisition_costs: Optional[Union[StrictFloat, StrictInt]] = None
    exploration_expense: Optional[Union[StrictFloat, StrictInt]] = None
    depletion_expense: Optional[Union[StrictFloat, StrictInt]] = None
    total_operating_expenses: Optional[Union[StrictFloat, StrictInt]] = None
    total_operating_income: Optional[Union[StrictFloat, StrictInt]] = None
    deposits_and_money_market_investments_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    federal_funds_sold_and_securities_borrowed_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    investment_securities_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    loans_and_leases_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    trading_account_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    other_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    total_non_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    interest_and_investment_income: Optional[Union[StrictFloat, StrictInt]] = None
    short_term_borrowings_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    long_term_debt_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    capitalized_lease_obligations_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    deposits_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    federal_funds_purchased_and_securities_sold_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    other_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    total_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    net_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    other_non_interest_income: Optional[Union[StrictFloat, StrictInt]] = None
    investment_banking_income: Optional[Union[StrictFloat, StrictInt]] = None
    trust_fees_by_commissions: Optional[Union[StrictFloat, StrictInt]] = None
    premiums_earned: Optional[Union[StrictFloat, StrictInt]] = None
    insurance_policy_acquisition_costs: Optional[Union[StrictFloat, StrictInt]] = None
    current_and_future_benefits: Optional[Union[StrictFloat, StrictInt]] = None
    property_and_liability_insurance_claims: Optional[Union[StrictFloat, StrictInt]] = None
    total_non_interest_expense: Optional[Union[StrictFloat, StrictInt]] = None
    net_realized_and_unrealized_capital_gains_on_investments: Optional[Union[StrictFloat, StrictInt]] = None
    other_gains: Optional[Union[StrictFloat, StrictInt]] = None
    non_operating_income: Optional[Union[StrictFloat, StrictInt]] = None
    other_income: Optional[Union[StrictFloat, StrictInt]] = None
    other_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    extraordinary_income: Optional[Union[StrictFloat, StrictInt]] = None
    total_other_income: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda_margin: Optional[Union[StrictFloat, StrictInt]] = None
    total_pre_tax_income: Optional[Union[StrictFloat, StrictInt]] = None
    ebit: Optional[Union[StrictFloat, StrictInt]] = None
    pre_tax_income_margin: Optional[Union[StrictFloat, StrictInt]] = None
    income_tax_expense: Optional[Union[StrictFloat, StrictInt]] = None
    impairment_charge: Optional[Union[StrictFloat, StrictInt]] = None
    restructuring_charge: Optional[Union[StrictFloat, StrictInt]] = None
    service_charges_on_deposit_accounts: Optional[Union[StrictFloat, StrictInt]] = None
    other_service_charges: Optional[Union[StrictFloat, StrictInt]] = None
    other_special_charges: Optional[Union[StrictFloat, StrictInt]] = None
    other_cost_of_revenue: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_continuing_operations: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_discontinued_operations: Optional[Union[StrictFloat, StrictInt]] = None
    consolidated_net_income: Optional[Union[StrictFloat, StrictInt]] = None
    other_adjustments_to_consolidated_net_income: Optional[Union[StrictFloat, StrictInt]] = None
    other_adjustment_to_net_income_attributable_to_common_shareholders: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_attributable_to_noncontrolling_interest: Optional[Union[StrictFloat, StrictInt]] = None
    net_income_attributable_to_common_shareholders: Optional[Union[StrictFloat, StrictInt]] = None
    basic_earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    diluted_earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    basic_and_diluted_earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    cash_dividends_to_common_per_share: Optional[Union[StrictFloat, StrictInt]] = None
    preferred_stock_dividends_declared: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_basic_shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_diluted_shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    weighted_average_basic_and_diluted_shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["period_ending", "fiscal_period", "fiscal_year", "reported_currency", "revenue", "operating_revenue", "cost_of_revenue", "operating_cost_of_revenue", "gross_profit", "gross_profit_margin", "provision_for_credit_losses", "research_and_development_expense", "selling_general_and_admin_expense", "salaries_and_employee_benefits", "marketing_expense", "net_occupancy_and_equipment_expense", "other_operating_expenses", "depreciation_expense", "amortization_expense", "amortization_of_deferred_policy_acquisition_costs", "exploration_expense", "depletion_expense", "total_operating_expenses", "total_operating_income", "deposits_and_money_market_investments_interest_income", "federal_funds_sold_and_securities_borrowed_interest_income", "investment_securities_interest_income", "loans_and_leases_interest_income", "trading_account_interest_income", "other_interest_income", "total_non_interest_income", "interest_and_investment_income", "short_term_borrowings_interest_expense", "long_term_debt_interest_expense", "capitalized_lease_obligations_interest_expense", "deposits_interest_expense", "federal_funds_purchased_and_securities_sold_interest_expense", "other_interest_expense", "total_interest_expense", "net_interest_income", "other_non_interest_income", "investment_banking_income", "trust_fees_by_commissions", "premiums_earned", "insurance_policy_acquisition_costs", "current_and_future_benefits", "property_and_liability_insurance_claims", "total_non_interest_expense", "net_realized_and_unrealized_capital_gains_on_investments", "other_gains", "non_operating_income", "other_income", "other_revenue", "extraordinary_income", "total_other_income", "ebitda", "ebitda_margin", "total_pre_tax_income", "ebit", "pre_tax_income_margin", "income_tax_expense", "impairment_charge", "restructuring_charge", "service_charges_on_deposit_accounts", "other_service_charges", "other_special_charges", "other_cost_of_revenue", "net_income_continuing_operations", "net_income_discontinued_operations", "consolidated_net_income", "other_adjustments_to_consolidated_net_income", "other_adjustment_to_net_income_attributable_to_common_shareholders", "net_income_attributable_to_noncontrolling_interest", "net_income_attributable_to_common_shareholders", "basic_earnings_per_share", "diluted_earnings_per_share", "basic_and_diluted_earnings_per_share", "cash_dividends_to_common_per_share", "preferred_stock_dividends_declared", "weighted_average_basic_shares_outstanding", "weighted_average_diluted_shares_outstanding", "weighted_average_basic_and_diluted_shares_outstanding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntrinioIncomeStatementData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if fiscal_period (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_period is None and "fiscal_period" in self.model_fields_set:
            _dict['fiscal_period'] = None

        # set to None if fiscal_year (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_year is None and "fiscal_year" in self.model_fields_set:
            _dict['fiscal_year'] = None

        # set to None if reported_currency (nullable) is None
        # and model_fields_set contains the field
        if self.reported_currency is None and "reported_currency" in self.model_fields_set:
            _dict['reported_currency'] = None

        # set to None if revenue (nullable) is None
        # and model_fields_set contains the field
        if self.revenue is None and "revenue" in self.model_fields_set:
            _dict['revenue'] = None

        # set to None if operating_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.operating_revenue is None and "operating_revenue" in self.model_fields_set:
            _dict['operating_revenue'] = None

        # set to None if cost_of_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.cost_of_revenue is None and "cost_of_revenue" in self.model_fields_set:
            _dict['cost_of_revenue'] = None

        # set to None if operating_cost_of_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.operating_cost_of_revenue is None and "operating_cost_of_revenue" in self.model_fields_set:
            _dict['operating_cost_of_revenue'] = None

        # set to None if gross_profit (nullable) is None
        # and model_fields_set contains the field
        if self.gross_profit is None and "gross_profit" in self.model_fields_set:
            _dict['gross_profit'] = None

        # set to None if gross_profit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.gross_profit_margin is None and "gross_profit_margin" in self.model_fields_set:
            _dict['gross_profit_margin'] = None

        # set to None if provision_for_credit_losses (nullable) is None
        # and model_fields_set contains the field
        if self.provision_for_credit_losses is None and "provision_for_credit_losses" in self.model_fields_set:
            _dict['provision_for_credit_losses'] = None

        # set to None if research_and_development_expense (nullable) is None
        # and model_fields_set contains the field
        if self.research_and_development_expense is None and "research_and_development_expense" in self.model_fields_set:
            _dict['research_and_development_expense'] = None

        # set to None if selling_general_and_admin_expense (nullable) is None
        # and model_fields_set contains the field
        if self.selling_general_and_admin_expense is None and "selling_general_and_admin_expense" in self.model_fields_set:
            _dict['selling_general_and_admin_expense'] = None

        # set to None if salaries_and_employee_benefits (nullable) is None
        # and model_fields_set contains the field
        if self.salaries_and_employee_benefits is None and "salaries_and_employee_benefits" in self.model_fields_set:
            _dict['salaries_and_employee_benefits'] = None

        # set to None if marketing_expense (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_expense is None and "marketing_expense" in self.model_fields_set:
            _dict['marketing_expense'] = None

        # set to None if net_occupancy_and_equipment_expense (nullable) is None
        # and model_fields_set contains the field
        if self.net_occupancy_and_equipment_expense is None and "net_occupancy_and_equipment_expense" in self.model_fields_set:
            _dict['net_occupancy_and_equipment_expense'] = None

        # set to None if other_operating_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.other_operating_expenses is None and "other_operating_expenses" in self.model_fields_set:
            _dict['other_operating_expenses'] = None

        # set to None if depreciation_expense (nullable) is None
        # and model_fields_set contains the field
        if self.depreciation_expense is None and "depreciation_expense" in self.model_fields_set:
            _dict['depreciation_expense'] = None

        # set to None if amortization_expense (nullable) is None
        # and model_fields_set contains the field
        if self.amortization_expense is None and "amortization_expense" in self.model_fields_set:
            _dict['amortization_expense'] = None

        # set to None if amortization_of_deferred_policy_acquisition_costs (nullable) is None
        # and model_fields_set contains the field
        if self.amortization_of_deferred_policy_acquisition_costs is None and "amortization_of_deferred_policy_acquisition_costs" in self.model_fields_set:
            _dict['amortization_of_deferred_policy_acquisition_costs'] = None

        # set to None if exploration_expense (nullable) is None
        # and model_fields_set contains the field
        if self.exploration_expense is None and "exploration_expense" in self.model_fields_set:
            _dict['exploration_expense'] = None

        # set to None if depletion_expense (nullable) is None
        # and model_fields_set contains the field
        if self.depletion_expense is None and "depletion_expense" in self.model_fields_set:
            _dict['depletion_expense'] = None

        # set to None if total_operating_expenses (nullable) is None
        # and model_fields_set contains the field
        if self.total_operating_expenses is None and "total_operating_expenses" in self.model_fields_set:
            _dict['total_operating_expenses'] = None

        # set to None if total_operating_income (nullable) is None
        # and model_fields_set contains the field
        if self.total_operating_income is None and "total_operating_income" in self.model_fields_set:
            _dict['total_operating_income'] = None

        # set to None if deposits_and_money_market_investments_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.deposits_and_money_market_investments_interest_income is None and "deposits_and_money_market_investments_interest_income" in self.model_fields_set:
            _dict['deposits_and_money_market_investments_interest_income'] = None

        # set to None if federal_funds_sold_and_securities_borrowed_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.federal_funds_sold_and_securities_borrowed_interest_income is None and "federal_funds_sold_and_securities_borrowed_interest_income" in self.model_fields_set:
            _dict['federal_funds_sold_and_securities_borrowed_interest_income'] = None

        # set to None if investment_securities_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.investment_securities_interest_income is None and "investment_securities_interest_income" in self.model_fields_set:
            _dict['investment_securities_interest_income'] = None

        # set to None if loans_and_leases_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.loans_and_leases_interest_income is None and "loans_and_leases_interest_income" in self.model_fields_set:
            _dict['loans_and_leases_interest_income'] = None

        # set to None if trading_account_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.trading_account_interest_income is None and "trading_account_interest_income" in self.model_fields_set:
            _dict['trading_account_interest_income'] = None

        # set to None if other_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.other_interest_income is None and "other_interest_income" in self.model_fields_set:
            _dict['other_interest_income'] = None

        # set to None if total_non_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.total_non_interest_income is None and "total_non_interest_income" in self.model_fields_set:
            _dict['total_non_interest_income'] = None

        # set to None if interest_and_investment_income (nullable) is None
        # and model_fields_set contains the field
        if self.interest_and_investment_income is None and "interest_and_investment_income" in self.model_fields_set:
            _dict['interest_and_investment_income'] = None

        # set to None if short_term_borrowings_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.short_term_borrowings_interest_expense is None and "short_term_borrowings_interest_expense" in self.model_fields_set:
            _dict['short_term_borrowings_interest_expense'] = None

        # set to None if long_term_debt_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.long_term_debt_interest_expense is None and "long_term_debt_interest_expense" in self.model_fields_set:
            _dict['long_term_debt_interest_expense'] = None

        # set to None if capitalized_lease_obligations_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.capitalized_lease_obligations_interest_expense is None and "capitalized_lease_obligations_interest_expense" in self.model_fields_set:
            _dict['capitalized_lease_obligations_interest_expense'] = None

        # set to None if deposits_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.deposits_interest_expense is None and "deposits_interest_expense" in self.model_fields_set:
            _dict['deposits_interest_expense'] = None

        # set to None if federal_funds_purchased_and_securities_sold_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.federal_funds_purchased_and_securities_sold_interest_expense is None and "federal_funds_purchased_and_securities_sold_interest_expense" in self.model_fields_set:
            _dict['federal_funds_purchased_and_securities_sold_interest_expense'] = None

        # set to None if other_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.other_interest_expense is None and "other_interest_expense" in self.model_fields_set:
            _dict['other_interest_expense'] = None

        # set to None if total_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.total_interest_expense is None and "total_interest_expense" in self.model_fields_set:
            _dict['total_interest_expense'] = None

        # set to None if net_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.net_interest_income is None and "net_interest_income" in self.model_fields_set:
            _dict['net_interest_income'] = None

        # set to None if other_non_interest_income (nullable) is None
        # and model_fields_set contains the field
        if self.other_non_interest_income is None and "other_non_interest_income" in self.model_fields_set:
            _dict['other_non_interest_income'] = None

        # set to None if investment_banking_income (nullable) is None
        # and model_fields_set contains the field
        if self.investment_banking_income is None and "investment_banking_income" in self.model_fields_set:
            _dict['investment_banking_income'] = None

        # set to None if trust_fees_by_commissions (nullable) is None
        # and model_fields_set contains the field
        if self.trust_fees_by_commissions is None and "trust_fees_by_commissions" in self.model_fields_set:
            _dict['trust_fees_by_commissions'] = None

        # set to None if premiums_earned (nullable) is None
        # and model_fields_set contains the field
        if self.premiums_earned is None and "premiums_earned" in self.model_fields_set:
            _dict['premiums_earned'] = None

        # set to None if insurance_policy_acquisition_costs (nullable) is None
        # and model_fields_set contains the field
        if self.insurance_policy_acquisition_costs is None and "insurance_policy_acquisition_costs" in self.model_fields_set:
            _dict['insurance_policy_acquisition_costs'] = None

        # set to None if current_and_future_benefits (nullable) is None
        # and model_fields_set contains the field
        if self.current_and_future_benefits is None and "current_and_future_benefits" in self.model_fields_set:
            _dict['current_and_future_benefits'] = None

        # set to None if property_and_liability_insurance_claims (nullable) is None
        # and model_fields_set contains the field
        if self.property_and_liability_insurance_claims is None and "property_and_liability_insurance_claims" in self.model_fields_set:
            _dict['property_and_liability_insurance_claims'] = None

        # set to None if total_non_interest_expense (nullable) is None
        # and model_fields_set contains the field
        if self.total_non_interest_expense is None and "total_non_interest_expense" in self.model_fields_set:
            _dict['total_non_interest_expense'] = None

        # set to None if net_realized_and_unrealized_capital_gains_on_investments (nullable) is None
        # and model_fields_set contains the field
        if self.net_realized_and_unrealized_capital_gains_on_investments is None and "net_realized_and_unrealized_capital_gains_on_investments" in self.model_fields_set:
            _dict['net_realized_and_unrealized_capital_gains_on_investments'] = None

        # set to None if other_gains (nullable) is None
        # and model_fields_set contains the field
        if self.other_gains is None and "other_gains" in self.model_fields_set:
            _dict['other_gains'] = None

        # set to None if non_operating_income (nullable) is None
        # and model_fields_set contains the field
        if self.non_operating_income is None and "non_operating_income" in self.model_fields_set:
            _dict['non_operating_income'] = None

        # set to None if other_income (nullable) is None
        # and model_fields_set contains the field
        if self.other_income is None and "other_income" in self.model_fields_set:
            _dict['other_income'] = None

        # set to None if other_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.other_revenue is None and "other_revenue" in self.model_fields_set:
            _dict['other_revenue'] = None

        # set to None if extraordinary_income (nullable) is None
        # and model_fields_set contains the field
        if self.extraordinary_income is None and "extraordinary_income" in self.model_fields_set:
            _dict['extraordinary_income'] = None

        # set to None if total_other_income (nullable) is None
        # and model_fields_set contains the field
        if self.total_other_income is None and "total_other_income" in self.model_fields_set:
            _dict['total_other_income'] = None

        # set to None if ebitda (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda is None and "ebitda" in self.model_fields_set:
            _dict['ebitda'] = None

        # set to None if ebitda_margin (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda_margin is None and "ebitda_margin" in self.model_fields_set:
            _dict['ebitda_margin'] = None

        # set to None if total_pre_tax_income (nullable) is None
        # and model_fields_set contains the field
        if self.total_pre_tax_income is None and "total_pre_tax_income" in self.model_fields_set:
            _dict['total_pre_tax_income'] = None

        # set to None if ebit (nullable) is None
        # and model_fields_set contains the field
        if self.ebit is None and "ebit" in self.model_fields_set:
            _dict['ebit'] = None

        # set to None if pre_tax_income_margin (nullable) is None
        # and model_fields_set contains the field
        if self.pre_tax_income_margin is None and "pre_tax_income_margin" in self.model_fields_set:
            _dict['pre_tax_income_margin'] = None

        # set to None if income_tax_expense (nullable) is None
        # and model_fields_set contains the field
        if self.income_tax_expense is None and "income_tax_expense" in self.model_fields_set:
            _dict['income_tax_expense'] = None

        # set to None if impairment_charge (nullable) is None
        # and model_fields_set contains the field
        if self.impairment_charge is None and "impairment_charge" in self.model_fields_set:
            _dict['impairment_charge'] = None

        # set to None if restructuring_charge (nullable) is None
        # and model_fields_set contains the field
        if self.restructuring_charge is None and "restructuring_charge" in self.model_fields_set:
            _dict['restructuring_charge'] = None

        # set to None if service_charges_on_deposit_accounts (nullable) is None
        # and model_fields_set contains the field
        if self.service_charges_on_deposit_accounts is None and "service_charges_on_deposit_accounts" in self.model_fields_set:
            _dict['service_charges_on_deposit_accounts'] = None

        # set to None if other_service_charges (nullable) is None
        # and model_fields_set contains the field
        if self.other_service_charges is None and "other_service_charges" in self.model_fields_set:
            _dict['other_service_charges'] = None

        # set to None if other_special_charges (nullable) is None
        # and model_fields_set contains the field
        if self.other_special_charges is None and "other_special_charges" in self.model_fields_set:
            _dict['other_special_charges'] = None

        # set to None if other_cost_of_revenue (nullable) is None
        # and model_fields_set contains the field
        if self.other_cost_of_revenue is None and "other_cost_of_revenue" in self.model_fields_set:
            _dict['other_cost_of_revenue'] = None

        # set to None if net_income_continuing_operations (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_continuing_operations is None and "net_income_continuing_operations" in self.model_fields_set:
            _dict['net_income_continuing_operations'] = None

        # set to None if net_income_discontinued_operations (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_discontinued_operations is None and "net_income_discontinued_operations" in self.model_fields_set:
            _dict['net_income_discontinued_operations'] = None

        # set to None if consolidated_net_income (nullable) is None
        # and model_fields_set contains the field
        if self.consolidated_net_income is None and "consolidated_net_income" in self.model_fields_set:
            _dict['consolidated_net_income'] = None

        # set to None if other_adjustments_to_consolidated_net_income (nullable) is None
        # and model_fields_set contains the field
        if self.other_adjustments_to_consolidated_net_income is None and "other_adjustments_to_consolidated_net_income" in self.model_fields_set:
            _dict['other_adjustments_to_consolidated_net_income'] = None

        # set to None if other_adjustment_to_net_income_attributable_to_common_shareholders (nullable) is None
        # and model_fields_set contains the field
        if self.other_adjustment_to_net_income_attributable_to_common_shareholders is None and "other_adjustment_to_net_income_attributable_to_common_shareholders" in self.model_fields_set:
            _dict['other_adjustment_to_net_income_attributable_to_common_shareholders'] = None

        # set to None if net_income_attributable_to_noncontrolling_interest (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_attributable_to_noncontrolling_interest is None and "net_income_attributable_to_noncontrolling_interest" in self.model_fields_set:
            _dict['net_income_attributable_to_noncontrolling_interest'] = None

        # set to None if net_income_attributable_to_common_shareholders (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_attributable_to_common_shareholders is None and "net_income_attributable_to_common_shareholders" in self.model_fields_set:
            _dict['net_income_attributable_to_common_shareholders'] = None

        # set to None if basic_earnings_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.basic_earnings_per_share is None and "basic_earnings_per_share" in self.model_fields_set:
            _dict['basic_earnings_per_share'] = None

        # set to None if diluted_earnings_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.diluted_earnings_per_share is None and "diluted_earnings_per_share" in self.model_fields_set:
            _dict['diluted_earnings_per_share'] = None

        # set to None if basic_and_diluted_earnings_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.basic_and_diluted_earnings_per_share is None and "basic_and_diluted_earnings_per_share" in self.model_fields_set:
            _dict['basic_and_diluted_earnings_per_share'] = None

        # set to None if cash_dividends_to_common_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.cash_dividends_to_common_per_share is None and "cash_dividends_to_common_per_share" in self.model_fields_set:
            _dict['cash_dividends_to_common_per_share'] = None

        # set to None if preferred_stock_dividends_declared (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_stock_dividends_declared is None and "preferred_stock_dividends_declared" in self.model_fields_set:
            _dict['preferred_stock_dividends_declared'] = None

        # set to None if weighted_average_basic_shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_average_basic_shares_outstanding is None and "weighted_average_basic_shares_outstanding" in self.model_fields_set:
            _dict['weighted_average_basic_shares_outstanding'] = None

        # set to None if weighted_average_diluted_shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_average_diluted_shares_outstanding is None and "weighted_average_diluted_shares_outstanding" in self.model_fields_set:
            _dict['weighted_average_diluted_shares_outstanding'] = None

        # set to None if weighted_average_basic_and_diluted_shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.weighted_average_basic_and_diluted_shares_outstanding is None and "weighted_average_basic_and_diluted_shares_outstanding" in self.model_fields_set:
            _dict['weighted_average_basic_and_diluted_shares_outstanding'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntrinioIncomeStatementData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period_ending": obj.get("period_ending"),
            "fiscal_period": obj.get("fiscal_period"),
            "fiscal_year": obj.get("fiscal_year"),
            "reported_currency": obj.get("reported_currency"),
            "revenue": obj.get("revenue"),
            "operating_revenue": obj.get("operating_revenue"),
            "cost_of_revenue": obj.get("cost_of_revenue"),
            "operating_cost_of_revenue": obj.get("operating_cost_of_revenue"),
            "gross_profit": obj.get("gross_profit"),
            "gross_profit_margin": obj.get("gross_profit_margin"),
            "provision_for_credit_losses": obj.get("provision_for_credit_losses"),
            "research_and_development_expense": obj.get("research_and_development_expense"),
            "selling_general_and_admin_expense": obj.get("selling_general_and_admin_expense"),
            "salaries_and_employee_benefits": obj.get("salaries_and_employee_benefits"),
            "marketing_expense": obj.get("marketing_expense"),
            "net_occupancy_and_equipment_expense": obj.get("net_occupancy_and_equipment_expense"),
            "other_operating_expenses": obj.get("other_operating_expenses"),
            "depreciation_expense": obj.get("depreciation_expense"),
            "amortization_expense": obj.get("amortization_expense"),
            "amortization_of_deferred_policy_acquisition_costs": obj.get("amortization_of_deferred_policy_acquisition_costs"),
            "exploration_expense": obj.get("exploration_expense"),
            "depletion_expense": obj.get("depletion_expense"),
            "total_operating_expenses": obj.get("total_operating_expenses"),
            "total_operating_income": obj.get("total_operating_income"),
            "deposits_and_money_market_investments_interest_income": obj.get("deposits_and_money_market_investments_interest_income"),
            "federal_funds_sold_and_securities_borrowed_interest_income": obj.get("federal_funds_sold_and_securities_borrowed_interest_income"),
            "investment_securities_interest_income": obj.get("investment_securities_interest_income"),
            "loans_and_leases_interest_income": obj.get("loans_and_leases_interest_income"),
            "trading_account_interest_income": obj.get("trading_account_interest_income"),
            "other_interest_income": obj.get("other_interest_income"),
            "total_non_interest_income": obj.get("total_non_interest_income"),
            "interest_and_investment_income": obj.get("interest_and_investment_income"),
            "short_term_borrowings_interest_expense": obj.get("short_term_borrowings_interest_expense"),
            "long_term_debt_interest_expense": obj.get("long_term_debt_interest_expense"),
            "capitalized_lease_obligations_interest_expense": obj.get("capitalized_lease_obligations_interest_expense"),
            "deposits_interest_expense": obj.get("deposits_interest_expense"),
            "federal_funds_purchased_and_securities_sold_interest_expense": obj.get("federal_funds_purchased_and_securities_sold_interest_expense"),
            "other_interest_expense": obj.get("other_interest_expense"),
            "total_interest_expense": obj.get("total_interest_expense"),
            "net_interest_income": obj.get("net_interest_income"),
            "other_non_interest_income": obj.get("other_non_interest_income"),
            "investment_banking_income": obj.get("investment_banking_income"),
            "trust_fees_by_commissions": obj.get("trust_fees_by_commissions"),
            "premiums_earned": obj.get("premiums_earned"),
            "insurance_policy_acquisition_costs": obj.get("insurance_policy_acquisition_costs"),
            "current_and_future_benefits": obj.get("current_and_future_benefits"),
            "property_and_liability_insurance_claims": obj.get("property_and_liability_insurance_claims"),
            "total_non_interest_expense": obj.get("total_non_interest_expense"),
            "net_realized_and_unrealized_capital_gains_on_investments": obj.get("net_realized_and_unrealized_capital_gains_on_investments"),
            "other_gains": obj.get("other_gains"),
            "non_operating_income": obj.get("non_operating_income"),
            "other_income": obj.get("other_income"),
            "other_revenue": obj.get("other_revenue"),
            "extraordinary_income": obj.get("extraordinary_income"),
            "total_other_income": obj.get("total_other_income"),
            "ebitda": obj.get("ebitda"),
            "ebitda_margin": obj.get("ebitda_margin"),
            "total_pre_tax_income": obj.get("total_pre_tax_income"),
            "ebit": obj.get("ebit"),
            "pre_tax_income_margin": obj.get("pre_tax_income_margin"),
            "income_tax_expense": obj.get("income_tax_expense"),
            "impairment_charge": obj.get("impairment_charge"),
            "restructuring_charge": obj.get("restructuring_charge"),
            "service_charges_on_deposit_accounts": obj.get("service_charges_on_deposit_accounts"),
            "other_service_charges": obj.get("other_service_charges"),
            "other_special_charges": obj.get("other_special_charges"),
            "other_cost_of_revenue": obj.get("other_cost_of_revenue"),
            "net_income_continuing_operations": obj.get("net_income_continuing_operations"),
            "net_income_discontinued_operations": obj.get("net_income_discontinued_operations"),
            "consolidated_net_income": obj.get("consolidated_net_income"),
            "other_adjustments_to_consolidated_net_income": obj.get("other_adjustments_to_consolidated_net_income"),
            "other_adjustment_to_net_income_attributable_to_common_shareholders": obj.get("other_adjustment_to_net_income_attributable_to_common_shareholders"),
            "net_income_attributable_to_noncontrolling_interest": obj.get("net_income_attributable_to_noncontrolling_interest"),
            "net_income_attributable_to_common_shareholders": obj.get("net_income_attributable_to_common_shareholders"),
            "basic_earnings_per_share": obj.get("basic_earnings_per_share"),
            "diluted_earnings_per_share": obj.get("diluted_earnings_per_share"),
            "basic_and_diluted_earnings_per_share": obj.get("basic_and_diluted_earnings_per_share"),
            "cash_dividends_to_common_per_share": obj.get("cash_dividends_to_common_per_share"),
            "preferred_stock_dividends_declared": obj.get("preferred_stock_dividends_declared"),
            "weighted_average_basic_shares_outstanding": obj.get("weighted_average_basic_shares_outstanding"),
            "weighted_average_diluted_shares_outstanding": obj.get("weighted_average_diluted_shares_outstanding"),
            "weighted_average_basic_and_diluted_shares_outstanding": obj.get("weighted_average_basic_and_diluted_shares_outstanding")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


