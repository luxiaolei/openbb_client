# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EconDbCountryProfileData(BaseModel):
    """
    EconDB Country Profile Data.
    """ # noqa: E501
    country: StrictStr
    population: Optional[StrictInt] = None
    gdp_usd: Optional[Union[StrictFloat, StrictInt]] = None
    gdp_qoq: Optional[Union[StrictFloat, StrictInt]] = None
    gdp_yoy: Optional[Union[StrictFloat, StrictInt]] = None
    cpi_yoy: Optional[Union[StrictFloat, StrictInt]] = None
    core_yoy: Optional[Union[StrictFloat, StrictInt]] = None
    retail_sales_yoy: Optional[Union[StrictFloat, StrictInt]] = None
    industrial_production_yoy: Optional[Union[StrictFloat, StrictInt]] = None
    policy_rate: Optional[Union[StrictFloat, StrictInt]] = None
    yield_10y: Optional[Union[StrictFloat, StrictInt]] = None
    govt_debt_gdp: Optional[Union[StrictFloat, StrictInt]] = None
    current_account_gdp: Optional[Union[StrictFloat, StrictInt]] = None
    jobless_rate: Optional[Union[StrictFloat, StrictInt]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["country", "population", "gdp_usd", "gdp_qoq", "gdp_yoy", "cpi_yoy", "core_yoy", "retail_sales_yoy", "industrial_production_yoy", "policy_rate", "yield_10y", "govt_debt_gdp", "current_account_gdp", "jobless_rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EconDbCountryProfileData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if population (nullable) is None
        # and model_fields_set contains the field
        if self.population is None and "population" in self.model_fields_set:
            _dict['population'] = None

        # set to None if gdp_usd (nullable) is None
        # and model_fields_set contains the field
        if self.gdp_usd is None and "gdp_usd" in self.model_fields_set:
            _dict['gdp_usd'] = None

        # set to None if gdp_qoq (nullable) is None
        # and model_fields_set contains the field
        if self.gdp_qoq is None and "gdp_qoq" in self.model_fields_set:
            _dict['gdp_qoq'] = None

        # set to None if gdp_yoy (nullable) is None
        # and model_fields_set contains the field
        if self.gdp_yoy is None and "gdp_yoy" in self.model_fields_set:
            _dict['gdp_yoy'] = None

        # set to None if cpi_yoy (nullable) is None
        # and model_fields_set contains the field
        if self.cpi_yoy is None and "cpi_yoy" in self.model_fields_set:
            _dict['cpi_yoy'] = None

        # set to None if core_yoy (nullable) is None
        # and model_fields_set contains the field
        if self.core_yoy is None and "core_yoy" in self.model_fields_set:
            _dict['core_yoy'] = None

        # set to None if retail_sales_yoy (nullable) is None
        # and model_fields_set contains the field
        if self.retail_sales_yoy is None and "retail_sales_yoy" in self.model_fields_set:
            _dict['retail_sales_yoy'] = None

        # set to None if industrial_production_yoy (nullable) is None
        # and model_fields_set contains the field
        if self.industrial_production_yoy is None and "industrial_production_yoy" in self.model_fields_set:
            _dict['industrial_production_yoy'] = None

        # set to None if policy_rate (nullable) is None
        # and model_fields_set contains the field
        if self.policy_rate is None and "policy_rate" in self.model_fields_set:
            _dict['policy_rate'] = None

        # set to None if yield_10y (nullable) is None
        # and model_fields_set contains the field
        if self.yield_10y is None and "yield_10y" in self.model_fields_set:
            _dict['yield_10y'] = None

        # set to None if govt_debt_gdp (nullable) is None
        # and model_fields_set contains the field
        if self.govt_debt_gdp is None and "govt_debt_gdp" in self.model_fields_set:
            _dict['govt_debt_gdp'] = None

        # set to None if current_account_gdp (nullable) is None
        # and model_fields_set contains the field
        if self.current_account_gdp is None and "current_account_gdp" in self.model_fields_set:
            _dict['current_account_gdp'] = None

        # set to None if jobless_rate (nullable) is None
        # and model_fields_set contains the field
        if self.jobless_rate is None and "jobless_rate" in self.model_fields_set:
            _dict['jobless_rate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EconDbCountryProfileData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "population": obj.get("population"),
            "gdp_usd": obj.get("gdp_usd"),
            "gdp_qoq": obj.get("gdp_qoq"),
            "gdp_yoy": obj.get("gdp_yoy"),
            "cpi_yoy": obj.get("cpi_yoy"),
            "core_yoy": obj.get("core_yoy"),
            "retail_sales_yoy": obj.get("retail_sales_yoy"),
            "industrial_production_yoy": obj.get("industrial_production_yoy"),
            "policy_rate": obj.get("policy_rate"),
            "yield_10y": obj.get("yield_10y"),
            "govt_debt_gdp": obj.get("govt_debt_gdp"),
            "current_account_gdp": obj.get("current_account_gdp"),
            "jobless_rate": obj.get("jobless_rate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


