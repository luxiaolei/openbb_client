# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, Optional, Union
from typing_extensions import Annotated
from openbb_client.models.ob_bject_analyst_estimates import OBBjectAnalystEstimates
from openbb_client.models.ob_bject_analyst_search import OBBjectAnalystSearch
from openbb_client.models.ob_bject_balance_sheet import OBBjectBalanceSheet
from openbb_client.models.ob_bject_balance_sheet_growth import OBBjectBalanceSheetGrowth
from openbb_client.models.ob_bject_calendar_dividend import OBBjectCalendarDividend
from openbb_client.models.ob_bject_calendar_earnings import OBBjectCalendarEarnings
from openbb_client.models.ob_bject_calendar_ipo import OBBjectCalendarIpo
from openbb_client.models.ob_bject_calendar_splits import OBBjectCalendarSplits
from openbb_client.models.ob_bject_cash_flow_statement import OBBjectCashFlowStatement
from openbb_client.models.ob_bject_cash_flow_statement_growth import OBBjectCashFlowStatementGrowth
from openbb_client.models.ob_bject_company_filings import OBBjectCompanyFilings
from openbb_client.models.ob_bject_compare_company_facts import OBBjectCompareCompanyFacts
from openbb_client.models.ob_bject_discovery_filings import OBBjectDiscoveryFilings
from openbb_client.models.ob_bject_earnings_call_transcript import OBBjectEarningsCallTranscript
from openbb_client.models.ob_bject_equity_active import OBBjectEquityActive
from openbb_client.models.ob_bject_equity_aggressive_small_caps import OBBjectEquityAggressiveSmallCaps
from openbb_client.models.ob_bject_equity_ftd import OBBjectEquityFTD
from openbb_client.models.ob_bject_equity_gainers import OBBjectEquityGainers
from openbb_client.models.ob_bject_equity_historical import OBBjectEquityHistorical
from openbb_client.models.ob_bject_equity_info import OBBjectEquityInfo
from openbb_client.models.ob_bject_equity_losers import OBBjectEquityLosers
from openbb_client.models.ob_bject_equity_nbbo import OBBjectEquityNBBO
from openbb_client.models.ob_bject_equity_ownership import OBBjectEquityOwnership
from openbb_client.models.ob_bject_equity_peers import OBBjectEquityPeers
from openbb_client.models.ob_bject_equity_quote import OBBjectEquityQuote
from openbb_client.models.ob_bject_equity_screener import OBBjectEquityScreener
from openbb_client.models.ob_bject_equity_search import OBBjectEquitySearch
from openbb_client.models.ob_bject_equity_undervalued_growth import OBBjectEquityUndervaluedGrowth
from openbb_client.models.ob_bject_equity_undervalued_large_caps import OBBjectEquityUndervaluedLargeCaps
from openbb_client.models.ob_bject_equity_valuation_multiples import OBBjectEquityValuationMultiples
from openbb_client.models.ob_bject_executive_compensation import OBBjectExecutiveCompensation
from openbb_client.models.ob_bject_financial_ratios import OBBjectFinancialRatios
from openbb_client.models.ob_bject_form13_fhr import OBBjectForm13FHR
from openbb_client.models.ob_bject_forward_ebitda_estimates import OBBjectForwardEbitdaEstimates
from openbb_client.models.ob_bject_forward_eps_estimates import OBBjectForwardEpsEstimates
from openbb_client.models.ob_bject_forward_pe_estimates import OBBjectForwardPeEstimates
from openbb_client.models.ob_bject_forward_sales_estimates import OBBjectForwardSalesEstimates
from openbb_client.models.ob_bject_growth_tech_equities import OBBjectGrowthTechEquities
from openbb_client.models.ob_bject_historical_attributes import OBBjectHistoricalAttributes
from openbb_client.models.ob_bject_historical_dividends import OBBjectHistoricalDividends
from openbb_client.models.ob_bject_historical_employees import OBBjectHistoricalEmployees
from openbb_client.models.ob_bject_historical_eps import OBBjectHistoricalEps
from openbb_client.models.ob_bject_historical_market_cap import OBBjectHistoricalMarketCap
from openbb_client.models.ob_bject_historical_splits import OBBjectHistoricalSplits
from openbb_client.models.ob_bject_income_statement import OBBjectIncomeStatement
from openbb_client.models.ob_bject_income_statement_growth import OBBjectIncomeStatementGrowth
from openbb_client.models.ob_bject_insider_trading import OBBjectInsiderTrading
from openbb_client.models.ob_bject_institutional_ownership import OBBjectInstitutionalOwnership
from openbb_client.models.ob_bject_key_executives import OBBjectKeyExecutives
from openbb_client.models.ob_bject_key_metrics import OBBjectKeyMetrics
from openbb_client.models.ob_bject_latest_attributes import OBBjectLatestAttributes
from openbb_client.models.ob_bject_latest_financial_reports import OBBjectLatestFinancialReports
from openbb_client.models.ob_bject_market_snapshots import OBBjectMarketSnapshots
from openbb_client.models.ob_bject_price_performance import OBBjectPricePerformance
from openbb_client.models.ob_bject_price_target import OBBjectPriceTarget
from openbb_client.models.ob_bject_price_target_consensus import OBBjectPriceTargetConsensus
from openbb_client.models.ob_bject_reported_financials import OBBjectReportedFinancials
from openbb_client.models.ob_bject_revenue_business_line import OBBjectRevenueBusinessLine
from openbb_client.models.ob_bject_revenue_geographic import OBBjectRevenueGeographic
from openbb_client.models.ob_bject_search_attributes import OBBjectSearchAttributes
from openbb_client.models.ob_bject_share_statistics import OBBjectShareStatistics
from openbb_client.models.ob_bject_trailing_dividend_yield import OBBjectTrailingDividendYield

from openbb_client.api_client import ApiClient, RequestSerialized
from openbb_client.api_response import ApiResponse
from openbb_client.rest import RESTResponseType


class EquityApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def equity_calendar_dividend(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCalendarDividend:
        """Dividend

        Get historical and upcoming dividend payments. Includes dividend amount, ex-dividend and payment dates.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_dividend_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarDividend",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_calendar_dividend_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCalendarDividend]:
        """Dividend

        Get historical and upcoming dividend payments. Includes dividend amount, ex-dividend and payment dates.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_dividend_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarDividend",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_calendar_dividend_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dividend

        Get historical and upcoming dividend payments. Includes dividend amount, ex-dividend and payment dates.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_dividend_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarDividend",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_calendar_dividend_serialize(
        self,
        provider,
        start_date,
        end_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/calendar/dividend',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_calendar_earnings(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCalendarEarnings:
        """Earnings

        Get historical and upcoming company earnings releases. Includes earnings per share (EPS) and revenue data.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_earnings_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarEarnings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_calendar_earnings_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCalendarEarnings]:
        """Earnings

        Get historical and upcoming company earnings releases. Includes earnings per share (EPS) and revenue data.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_earnings_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarEarnings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_calendar_earnings_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Earnings

        Get historical and upcoming company earnings releases. Includes earnings per share (EPS) and revenue data.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_earnings_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarEarnings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_calendar_earnings_serialize(
        self,
        provider,
        start_date,
        end_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/calendar/earnings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_calendar_ipo(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the IPO. [upcoming, priced, or withdrawn] (provider: intrinio)")] = None,
        min_value: Annotated[Optional[StrictInt], Field(description="Return IPOs with an offer dollar amount greater than the given amount. (provider: intrinio)")] = None,
        max_value: Annotated[Optional[StrictInt], Field(description="Return IPOs with an offer dollar amount less than the given amount. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCalendarIpo:
        """Ipo

        Get historical and upcoming initial public offerings (IPOs).

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for.
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return.
        :type limit: int
        :param status: Status of the IPO. [upcoming, priced, or withdrawn] (provider: intrinio)
        :type status: str
        :param min_value: Return IPOs with an offer dollar amount greater than the given amount. (provider: intrinio)
        :type min_value: int
        :param max_value: Return IPOs with an offer dollar amount less than the given amount. (provider: intrinio)
        :type max_value: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_ipo_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            status=status,
            min_value=min_value,
            max_value=max_value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarIpo",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_calendar_ipo_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the IPO. [upcoming, priced, or withdrawn] (provider: intrinio)")] = None,
        min_value: Annotated[Optional[StrictInt], Field(description="Return IPOs with an offer dollar amount greater than the given amount. (provider: intrinio)")] = None,
        max_value: Annotated[Optional[StrictInt], Field(description="Return IPOs with an offer dollar amount less than the given amount. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCalendarIpo]:
        """Ipo

        Get historical and upcoming initial public offerings (IPOs).

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for.
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return.
        :type limit: int
        :param status: Status of the IPO. [upcoming, priced, or withdrawn] (provider: intrinio)
        :type status: str
        :param min_value: Return IPOs with an offer dollar amount greater than the given amount. (provider: intrinio)
        :type min_value: int
        :param max_value: Return IPOs with an offer dollar amount less than the given amount. (provider: intrinio)
        :type max_value: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_ipo_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            status=status,
            min_value=min_value,
            max_value=max_value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarIpo",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_calendar_ipo_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the IPO. [upcoming, priced, or withdrawn] (provider: intrinio)")] = None,
        min_value: Annotated[Optional[StrictInt], Field(description="Return IPOs with an offer dollar amount greater than the given amount. (provider: intrinio)")] = None,
        max_value: Annotated[Optional[StrictInt], Field(description="Return IPOs with an offer dollar amount less than the given amount. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ipo

        Get historical and upcoming initial public offerings (IPOs).

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for.
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return.
        :type limit: int
        :param status: Status of the IPO. [upcoming, priced, or withdrawn] (provider: intrinio)
        :type status: str
        :param min_value: Return IPOs with an offer dollar amount greater than the given amount. (provider: intrinio)
        :type min_value: int
        :param max_value: Return IPOs with an offer dollar amount less than the given amount. (provider: intrinio)
        :type max_value: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_ipo_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            status=status,
            min_value=min_value,
            max_value=max_value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarIpo",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_calendar_ipo_serialize(
        self,
        provider,
        symbol,
        start_date,
        end_date,
        limit,
        status,
        min_value,
        max_value,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if min_value is not None:
            
            _query_params.append(('min_value', min_value))
            
        if max_value is not None:
            
            _query_params.append(('max_value', max_value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/calendar/ipo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_calendar_splits(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCalendarSplits:
        """Splits

        Get historical and upcoming stock split operations.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_splits_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarSplits",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_calendar_splits_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCalendarSplits]:
        """Splits

        Get historical and upcoming stock split operations.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_splits_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarSplits",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_calendar_splits_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Splits

        Get historical and upcoming stock split operations.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_calendar_splits_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCalendarSplits",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_calendar_splits_serialize(
        self,
        provider,
        start_date,
        end_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/calendar/splits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_compare_company_facts(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): sec.")] = None,
        fact: Annotated[Optional[StrictStr], Field(description="The fact to lookup, typically a GAAP-reporting measure. Choices vary by provider.")] = None,
        year: Annotated[Optional[StrictInt], Field(description="The year to retrieve the data for. If not provided, the current year is used. When symbol(s) are provided, excluding the year will return all reported values for the concept. (provider: sec)")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The fiscal period to retrieve the data for. If not provided, the most recent quarter is used. This parameter is ignored when a symbol is supplied. (provider: sec)")] = None,
        instantaneous: Annotated[Optional[StrictBool], Field(description="Whether to retrieve instantaneous data. See the notes above for more information. Defaults to False. Some facts are only available as instantaneous data. The function will automatically attempt the inverse of this parameter if the initial fiscal quarter request fails. This parameter is ignored when a symbol is supplied. (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether to use cache for the request. Defaults to True. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCompareCompanyFacts:
        """Company Facts

        Copmare reported company facts and fundamental data points.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): sec.
        :type symbol: str
        :param fact: The fact to lookup, typically a GAAP-reporting measure. Choices vary by provider.
        :type fact: str
        :param year: The year to retrieve the data for. If not provided, the current year is used. When symbol(s) are provided, excluding the year will return all reported values for the concept. (provider: sec)
        :type year: int
        :param fiscal_period: The fiscal period to retrieve the data for. If not provided, the most recent quarter is used. This parameter is ignored when a symbol is supplied. (provider: sec)
        :type fiscal_period: str
        :param instantaneous: Whether to retrieve instantaneous data. See the notes above for more information. Defaults to False. Some facts are only available as instantaneous data. The function will automatically attempt the inverse of this parameter if the initial fiscal quarter request fails. This parameter is ignored when a symbol is supplied. (provider: sec)
        :type instantaneous: bool
        :param use_cache: Whether to use cache for the request. Defaults to True. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_compare_company_facts_serialize(
            provider=provider,
            symbol=symbol,
            fact=fact,
            year=year,
            fiscal_period=fiscal_period,
            instantaneous=instantaneous,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompareCompanyFacts",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_compare_company_facts_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): sec.")] = None,
        fact: Annotated[Optional[StrictStr], Field(description="The fact to lookup, typically a GAAP-reporting measure. Choices vary by provider.")] = None,
        year: Annotated[Optional[StrictInt], Field(description="The year to retrieve the data for. If not provided, the current year is used. When symbol(s) are provided, excluding the year will return all reported values for the concept. (provider: sec)")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The fiscal period to retrieve the data for. If not provided, the most recent quarter is used. This parameter is ignored when a symbol is supplied. (provider: sec)")] = None,
        instantaneous: Annotated[Optional[StrictBool], Field(description="Whether to retrieve instantaneous data. See the notes above for more information. Defaults to False. Some facts are only available as instantaneous data. The function will automatically attempt the inverse of this parameter if the initial fiscal quarter request fails. This parameter is ignored when a symbol is supplied. (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether to use cache for the request. Defaults to True. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCompareCompanyFacts]:
        """Company Facts

        Copmare reported company facts and fundamental data points.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): sec.
        :type symbol: str
        :param fact: The fact to lookup, typically a GAAP-reporting measure. Choices vary by provider.
        :type fact: str
        :param year: The year to retrieve the data for. If not provided, the current year is used. When symbol(s) are provided, excluding the year will return all reported values for the concept. (provider: sec)
        :type year: int
        :param fiscal_period: The fiscal period to retrieve the data for. If not provided, the most recent quarter is used. This parameter is ignored when a symbol is supplied. (provider: sec)
        :type fiscal_period: str
        :param instantaneous: Whether to retrieve instantaneous data. See the notes above for more information. Defaults to False. Some facts are only available as instantaneous data. The function will automatically attempt the inverse of this parameter if the initial fiscal quarter request fails. This parameter is ignored when a symbol is supplied. (provider: sec)
        :type instantaneous: bool
        :param use_cache: Whether to use cache for the request. Defaults to True. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_compare_company_facts_serialize(
            provider=provider,
            symbol=symbol,
            fact=fact,
            year=year,
            fiscal_period=fiscal_period,
            instantaneous=instantaneous,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompareCompanyFacts",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_compare_company_facts_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): sec.")] = None,
        fact: Annotated[Optional[StrictStr], Field(description="The fact to lookup, typically a GAAP-reporting measure. Choices vary by provider.")] = None,
        year: Annotated[Optional[StrictInt], Field(description="The year to retrieve the data for. If not provided, the current year is used. When symbol(s) are provided, excluding the year will return all reported values for the concept. (provider: sec)")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The fiscal period to retrieve the data for. If not provided, the most recent quarter is used. This parameter is ignored when a symbol is supplied. (provider: sec)")] = None,
        instantaneous: Annotated[Optional[StrictBool], Field(description="Whether to retrieve instantaneous data. See the notes above for more information. Defaults to False. Some facts are only available as instantaneous data. The function will automatically attempt the inverse of this parameter if the initial fiscal quarter request fails. This parameter is ignored when a symbol is supplied. (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether to use cache for the request. Defaults to True. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Company Facts

        Copmare reported company facts and fundamental data points.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): sec.
        :type symbol: str
        :param fact: The fact to lookup, typically a GAAP-reporting measure. Choices vary by provider.
        :type fact: str
        :param year: The year to retrieve the data for. If not provided, the current year is used. When symbol(s) are provided, excluding the year will return all reported values for the concept. (provider: sec)
        :type year: int
        :param fiscal_period: The fiscal period to retrieve the data for. If not provided, the most recent quarter is used. This parameter is ignored when a symbol is supplied. (provider: sec)
        :type fiscal_period: str
        :param instantaneous: Whether to retrieve instantaneous data. See the notes above for more information. Defaults to False. Some facts are only available as instantaneous data. The function will automatically attempt the inverse of this parameter if the initial fiscal quarter request fails. This parameter is ignored when a symbol is supplied. (provider: sec)
        :type instantaneous: bool
        :param use_cache: Whether to use cache for the request. Defaults to True. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_compare_company_facts_serialize(
            provider=provider,
            symbol=symbol,
            fact=fact,
            year=year,
            fiscal_period=fiscal_period,
            instantaneous=instantaneous,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompareCompanyFacts",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_compare_company_facts_serialize(
        self,
        provider,
        symbol,
        fact,
        year,
        fiscal_period,
        instantaneous,
        use_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if fact is not None:
            
            _query_params.append(('fact', fact))
            
        if year is not None:
            
            _query_params.append(('year', year))
            
        if fiscal_period is not None:
            
            _query_params.append(('fiscal_period', fiscal_period))
            
        if instantaneous is not None:
            
            _query_params.append(('instantaneous', instantaneous))
            
        if use_cache is not None:
            
            _query_params.append(('use_cache', use_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/compare/company_facts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_compare_peers(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityPeers:
        """Peers

        Get the closest peers for a given company.  Peers consist of companies trading on the same exchange, operating within the same sector and with comparable market capitalizations.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_compare_peers_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityPeers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_compare_peers_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityPeers]:
        """Peers

        Get the closest peers for a given company.  Peers consist of companies trading on the same exchange, operating within the same sector and with comparable market capitalizations.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_compare_peers_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityPeers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_compare_peers_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Peers

        Get the closest peers for a given company.  Peers consist of companies trading on the same exchange, operating within the same sector and with comparable market capitalizations.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_compare_peers_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityPeers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_compare_peers_serialize(
        self,
        symbol,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/compare/peers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_active(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityActive:
        """Active

        Get the most actively traded stocks based on volume.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_active_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityActive",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_active_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityActive]:
        """Active

        Get the most actively traded stocks based on volume.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_active_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityActive",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_active_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Active

        Get the most actively traded stocks based on volume.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_active_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityActive",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_active_serialize(
        self,
        provider,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/active',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_aggressive_small_caps(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. Default is all. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityAggressiveSmallCaps:
        """Aggressive Small Caps

        Get top small cap stocks based on earnings growth.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. Default is all. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_aggressive_small_caps_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityAggressiveSmallCaps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_aggressive_small_caps_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. Default is all. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityAggressiveSmallCaps]:
        """Aggressive Small Caps

        Get top small cap stocks based on earnings growth.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. Default is all. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_aggressive_small_caps_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityAggressiveSmallCaps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_aggressive_small_caps_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. Default is all. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Aggressive Small Caps

        Get top small cap stocks based on earnings growth.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. Default is all. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_aggressive_small_caps_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityAggressiveSmallCaps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_aggressive_small_caps_serialize(
        self,
        provider,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/aggressive_small_caps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_filings(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        form_type: Annotated[Optional[StrictStr], Field(description="Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        is_done: Annotated[Optional[StrictBool], Field(description="Flag for whether or not the filing is done. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectDiscoveryFilings:
        """Filings

        Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more.  SEC filings include Form 10-K, Form 10-Q, Form 8-K, the proxy statement, Forms 3, 4, and 5, Schedule 13, Form 114, Foreign Investment Disclosures and others. The annual 10-K report is required to be filed annually and includes the company's financial statements, management discussion and analysis, and audited financial statements.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param form_type: Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.
        :type form_type: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param is_done: Flag for whether or not the filing is done. (provider: fmp)
        :type is_done: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_filings_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            form_type=form_type,
            limit=limit,
            is_done=is_done,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectDiscoveryFilings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_filings_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        form_type: Annotated[Optional[StrictStr], Field(description="Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        is_done: Annotated[Optional[StrictBool], Field(description="Flag for whether or not the filing is done. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectDiscoveryFilings]:
        """Filings

        Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more.  SEC filings include Form 10-K, Form 10-Q, Form 8-K, the proxy statement, Forms 3, 4, and 5, Schedule 13, Form 114, Foreign Investment Disclosures and others. The annual 10-K report is required to be filed annually and includes the company's financial statements, management discussion and analysis, and audited financial statements.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param form_type: Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.
        :type form_type: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param is_done: Flag for whether or not the filing is done. (provider: fmp)
        :type is_done: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_filings_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            form_type=form_type,
            limit=limit,
            is_done=is_done,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectDiscoveryFilings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_filings_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        form_type: Annotated[Optional[StrictStr], Field(description="Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        is_done: Annotated[Optional[StrictBool], Field(description="Flag for whether or not the filing is done. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Filings

        Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more.  SEC filings include Form 10-K, Form 10-Q, Form 8-K, the proxy statement, Forms 3, 4, and 5, Schedule 13, Form 114, Foreign Investment Disclosures and others. The annual 10-K report is required to be filed annually and includes the company's financial statements, management discussion and analysis, and audited financial statements.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param form_type: Filter by form type. Visit https://www.sec.gov/forms for a list of supported form types.
        :type form_type: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param is_done: Flag for whether or not the filing is done. (provider: fmp)
        :type is_done: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_filings_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            form_type=form_type,
            limit=limit,
            is_done=is_done,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectDiscoveryFilings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_filings_serialize(
        self,
        provider,
        start_date,
        end_date,
        form_type,
        limit,
        is_done,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if form_type is not None:
            
            _query_params.append(('form_type', form_type))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if is_done is not None:
            
            _query_params.append(('is_done', is_done))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/filings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_gainers(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityGainers:
        """Gainers

        Get the top price gainers in the stock market.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_gainers_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityGainers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_gainers_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityGainers]:
        """Gainers

        Get the top price gainers in the stock market.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_gainers_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityGainers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_gainers_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gainers

        Get the top price gainers in the stock market.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_gainers_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityGainers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_gainers_serialize(
        self,
        provider,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/gainers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_growth_tech(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectGrowthTechEquities:
        """Growth Tech

        Get top tech stocks based on revenue and earnings growth.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_growth_tech_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectGrowthTechEquities",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_growth_tech_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectGrowthTechEquities]:
        """Growth Tech

        Get top tech stocks based on revenue and earnings growth.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_growth_tech_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectGrowthTechEquities",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_growth_tech_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Growth Tech

        Get top tech stocks based on revenue and earnings growth.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_growth_tech_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectGrowthTechEquities",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_growth_tech_serialize(
        self,
        provider,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/growth_tech',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_latest_financial_reports(
        self,
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. Defaults to today. (provider: sec)")] = None,
        report_type: Annotated[Optional[StrictStr], Field(description="Return only a specific form type. Default is all quarterly, annual, and current reports. Choices: 1-K, 1-SA, 1-U, 10-D, 10-K, 10-KT, 10-Q, 10-QT, 20-F, 40-F, 6-K, 8-K. Multiple comma separated items allowed. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectLatestFinancialReports:
        """Latest Financial Reports

        Get the newest quarterly, annual, and current reports for all companies.

        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. Defaults to today. (provider: sec)
        :type var_date: date
        :param report_type: Return only a specific form type. Default is all quarterly, annual, and current reports. Choices: 1-K, 1-SA, 1-U, 10-D, 10-K, 10-KT, 10-Q, 10-QT, 20-F, 40-F, 6-K, 8-K. Multiple comma separated items allowed. (provider: sec)
        :type report_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_latest_financial_reports_serialize(
            provider=provider,
            var_date=var_date,
            report_type=report_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectLatestFinancialReports",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_latest_financial_reports_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. Defaults to today. (provider: sec)")] = None,
        report_type: Annotated[Optional[StrictStr], Field(description="Return only a specific form type. Default is all quarterly, annual, and current reports. Choices: 1-K, 1-SA, 1-U, 10-D, 10-K, 10-KT, 10-Q, 10-QT, 20-F, 40-F, 6-K, 8-K. Multiple comma separated items allowed. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectLatestFinancialReports]:
        """Latest Financial Reports

        Get the newest quarterly, annual, and current reports for all companies.

        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. Defaults to today. (provider: sec)
        :type var_date: date
        :param report_type: Return only a specific form type. Default is all quarterly, annual, and current reports. Choices: 1-K, 1-SA, 1-U, 10-D, 10-K, 10-KT, 10-Q, 10-QT, 20-F, 40-F, 6-K, 8-K. Multiple comma separated items allowed. (provider: sec)
        :type report_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_latest_financial_reports_serialize(
            provider=provider,
            var_date=var_date,
            report_type=report_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectLatestFinancialReports",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_latest_financial_reports_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. Defaults to today. (provider: sec)")] = None,
        report_type: Annotated[Optional[StrictStr], Field(description="Return only a specific form type. Default is all quarterly, annual, and current reports. Choices: 1-K, 1-SA, 1-U, 10-D, 10-K, 10-KT, 10-Q, 10-QT, 20-F, 40-F, 6-K, 8-K. Multiple comma separated items allowed. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Latest Financial Reports

        Get the newest quarterly, annual, and current reports for all companies.

        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. Defaults to today. (provider: sec)
        :type var_date: date
        :param report_type: Return only a specific form type. Default is all quarterly, annual, and current reports. Choices: 1-K, 1-SA, 1-U, 10-D, 10-K, 10-KT, 10-Q, 10-QT, 20-F, 40-F, 6-K, 8-K. Multiple comma separated items allowed. (provider: sec)
        :type report_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_latest_financial_reports_serialize(
            provider=provider,
            var_date=var_date,
            report_type=report_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectLatestFinancialReports",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_latest_financial_reports_serialize(
        self,
        provider,
        var_date,
        report_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if report_type is not None:
            
            _query_params.append(('report_type', report_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/latest_financial_reports',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_losers(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityLosers:
        """Losers

        Get the top price losers in the stock market.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_losers_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityLosers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_losers_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityLosers]:
        """Losers

        Get the top price losers in the stock market.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_losers_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityLosers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_losers_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Losers

        Get the top price losers in the stock market.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_losers_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityLosers",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_losers_serialize(
        self,
        provider,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/losers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_undervalued_growth(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityUndervaluedGrowth:
        """Undervalued Growth

        Get potentially undervalued growth stocks.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_undervalued_growth_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityUndervaluedGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_undervalued_growth_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityUndervaluedGrowth]:
        """Undervalued Growth

        Get potentially undervalued growth stocks.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_undervalued_growth_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityUndervaluedGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_undervalued_growth_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Undervalued Growth

        Get potentially undervalued growth stocks.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_undervalued_growth_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityUndervaluedGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_undervalued_growth_serialize(
        self,
        provider,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/undervalued_growth',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_discovery_undervalued_large_caps(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityUndervaluedLargeCaps:
        """Undervalued Large Caps

        Get potentially undervalued large cap stocks.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_undervalued_large_caps_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityUndervaluedLargeCaps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_discovery_undervalued_large_caps_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityUndervaluedLargeCaps]:
        """Undervalued Large Caps

        Get potentially undervalued large cap stocks.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_undervalued_large_caps_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityUndervaluedLargeCaps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_discovery_undervalued_large_caps_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Undervalued Large Caps

        Get potentially undervalued large cap stocks.

        :param provider:
        :type provider: str
        :param sort: Sort order. Possible values: 'asc', 'desc'. Default: 'desc'.
        :type sort: str
        :param limit: Limit the number of results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_discovery_undervalued_large_caps_serialize(
            provider=provider,
            sort=sort,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityUndervaluedLargeCaps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_discovery_undervalued_large_caps_serialize(
        self,
        provider,
        sort,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/discovery/undervalued_large_caps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_estimates_analyst_search(
        self,
        provider: Optional[StrictStr] = None,
        analyst_name: Annotated[Optional[StrictStr], Field(description="Analyst names to return. Omitting will return all available analysts. Multiple comma separated items allowed for provider(s): benzinga.")] = None,
        firm_name: Annotated[Optional[StrictStr], Field(description="Firm names to return. Omitting will return all available firms. Multiple comma separated items allowed for provider(s): benzinga.")] = None,
        analyst_ids: Annotated[Optional[StrictStr], Field(description="List of analyst IDs to return. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        firm_ids: Annotated[Optional[StrictStr], Field(description="Firm IDs to return. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results returned. Limit 1000. (provider: benzinga)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. (provider: benzinga)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectAnalystSearch:
        """Analyst Search

        Search for specific analysts and get their forecast track record.

        :param provider:
        :type provider: str
        :param analyst_name: Analyst names to return. Omitting will return all available analysts. Multiple comma separated items allowed for provider(s): benzinga.
        :type analyst_name: str
        :param firm_name: Firm names to return. Omitting will return all available firms. Multiple comma separated items allowed for provider(s): benzinga.
        :type firm_name: str
        :param analyst_ids: List of analyst IDs to return. Multiple comma separated items allowed. (provider: benzinga)
        :type analyst_ids: str
        :param firm_ids: Firm IDs to return. Multiple comma separated items allowed. (provider: benzinga)
        :type firm_ids: str
        :param limit: Number of results returned. Limit 1000. (provider: benzinga)
        :type limit: int
        :param page: Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. (provider: benzinga)
        :type page: int
        :param fields: Fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_analyst_search_serialize(
            provider=provider,
            analyst_name=analyst_name,
            firm_name=firm_name,
            analyst_ids=analyst_ids,
            firm_ids=firm_ids,
            limit=limit,
            page=page,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectAnalystSearch",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_estimates_analyst_search_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        analyst_name: Annotated[Optional[StrictStr], Field(description="Analyst names to return. Omitting will return all available analysts. Multiple comma separated items allowed for provider(s): benzinga.")] = None,
        firm_name: Annotated[Optional[StrictStr], Field(description="Firm names to return. Omitting will return all available firms. Multiple comma separated items allowed for provider(s): benzinga.")] = None,
        analyst_ids: Annotated[Optional[StrictStr], Field(description="List of analyst IDs to return. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        firm_ids: Annotated[Optional[StrictStr], Field(description="Firm IDs to return. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results returned. Limit 1000. (provider: benzinga)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. (provider: benzinga)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectAnalystSearch]:
        """Analyst Search

        Search for specific analysts and get their forecast track record.

        :param provider:
        :type provider: str
        :param analyst_name: Analyst names to return. Omitting will return all available analysts. Multiple comma separated items allowed for provider(s): benzinga.
        :type analyst_name: str
        :param firm_name: Firm names to return. Omitting will return all available firms. Multiple comma separated items allowed for provider(s): benzinga.
        :type firm_name: str
        :param analyst_ids: List of analyst IDs to return. Multiple comma separated items allowed. (provider: benzinga)
        :type analyst_ids: str
        :param firm_ids: Firm IDs to return. Multiple comma separated items allowed. (provider: benzinga)
        :type firm_ids: str
        :param limit: Number of results returned. Limit 1000. (provider: benzinga)
        :type limit: int
        :param page: Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. (provider: benzinga)
        :type page: int
        :param fields: Fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_analyst_search_serialize(
            provider=provider,
            analyst_name=analyst_name,
            firm_name=firm_name,
            analyst_ids=analyst_ids,
            firm_ids=firm_ids,
            limit=limit,
            page=page,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectAnalystSearch",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_estimates_analyst_search_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        analyst_name: Annotated[Optional[StrictStr], Field(description="Analyst names to return. Omitting will return all available analysts. Multiple comma separated items allowed for provider(s): benzinga.")] = None,
        firm_name: Annotated[Optional[StrictStr], Field(description="Firm names to return. Omitting will return all available firms. Multiple comma separated items allowed for provider(s): benzinga.")] = None,
        analyst_ids: Annotated[Optional[StrictStr], Field(description="List of analyst IDs to return. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        firm_ids: Annotated[Optional[StrictStr], Field(description="Firm IDs to return. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of results returned. Limit 1000. (provider: benzinga)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. (provider: benzinga)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Analyst Search

        Search for specific analysts and get their forecast track record.

        :param provider:
        :type provider: str
        :param analyst_name: Analyst names to return. Omitting will return all available analysts. Multiple comma separated items allowed for provider(s): benzinga.
        :type analyst_name: str
        :param firm_name: Firm names to return. Omitting will return all available firms. Multiple comma separated items allowed for provider(s): benzinga.
        :type firm_name: str
        :param analyst_ids: List of analyst IDs to return. Multiple comma separated items allowed. (provider: benzinga)
        :type analyst_ids: str
        :param firm_ids: Firm IDs to return. Multiple comma separated items allowed. (provider: benzinga)
        :type firm_ids: str
        :param limit: Number of results returned. Limit 1000. (provider: benzinga)
        :type limit: int
        :param page: Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. (provider: benzinga)
        :type page: int
        :param fields: Fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_analyst_search_serialize(
            provider=provider,
            analyst_name=analyst_name,
            firm_name=firm_name,
            analyst_ids=analyst_ids,
            firm_ids=firm_ids,
            limit=limit,
            page=page,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectAnalystSearch",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_estimates_analyst_search_serialize(
        self,
        provider,
        analyst_name,
        firm_name,
        analyst_ids,
        firm_ids,
        limit,
        page,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if analyst_name is not None:
            
            _query_params.append(('analyst_name', analyst_name))
            
        if firm_name is not None:
            
            _query_params.append(('firm_name', firm_name))
            
        if analyst_ids is not None:
            
            _query_params.append(('analyst_ids', analyst_ids))
            
        if firm_ids is not None:
            
            _query_params.append(('firm_ids', firm_ids))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/estimates/analyst_search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_estimates_consensus(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")] = None,
        industry_group_number: Annotated[Optional[StrictInt], Field(description="The Zacks industry group number. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectPriceTargetConsensus:
        """Consensus

        Get consensus price target and recommendation.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.
        :type symbol: str
        :param industry_group_number: The Zacks industry group number. (provider: intrinio)
        :type industry_group_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_consensus_serialize(
            provider=provider,
            symbol=symbol,
            industry_group_number=industry_group_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPriceTargetConsensus",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_estimates_consensus_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")] = None,
        industry_group_number: Annotated[Optional[StrictInt], Field(description="The Zacks industry group number. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectPriceTargetConsensus]:
        """Consensus

        Get consensus price target and recommendation.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.
        :type symbol: str
        :param industry_group_number: The Zacks industry group number. (provider: intrinio)
        :type industry_group_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_consensus_serialize(
            provider=provider,
            symbol=symbol,
            industry_group_number=industry_group_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPriceTargetConsensus",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_estimates_consensus_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")] = None,
        industry_group_number: Annotated[Optional[StrictInt], Field(description="The Zacks industry group number. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Consensus

        Get consensus price target and recommendation.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.
        :type symbol: str
        :param industry_group_number: The Zacks industry group number. (provider: intrinio)
        :type industry_group_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_consensus_serialize(
            provider=provider,
            symbol=symbol,
            industry_group_number=industry_group_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPriceTargetConsensus",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_estimates_consensus_serialize(
        self,
        provider,
        symbol,
        industry_group_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if industry_group_number is not None:
            
            _query_params.append(('industry_group_number', industry_group_number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/estimates/consensus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_estimates_forward_ebitda(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The future fiscal period to retrieve estimates for. (provider: fmp);     Filter for only full-year or quarterly estimates. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        include_historical: Annotated[Optional[StrictBool], Field(description="If True, the data will include all past data and the limit will be ignored. (provider: fmp)")] = None,
        estimate_type: Annotated[Optional[StrictStr], Field(description="Limit the EBITDA estimates to this type. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectForwardEbitdaEstimates:
        """Forward Ebitda

        Get forward EBITDA estimates.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.
        :type symbol: str
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: fmp);     Filter for only full-year or quarterly estimates. (provider: intrinio)
        :type fiscal_period: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param include_historical: If True, the data will include all past data and the limit will be ignored. (provider: fmp)
        :type include_historical: bool
        :param estimate_type: Limit the EBITDA estimates to this type. (provider: intrinio)
        :type estimate_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_ebitda_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_period=fiscal_period,
            limit=limit,
            include_historical=include_historical,
            estimate_type=estimate_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardEbitdaEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_estimates_forward_ebitda_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The future fiscal period to retrieve estimates for. (provider: fmp);     Filter for only full-year or quarterly estimates. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        include_historical: Annotated[Optional[StrictBool], Field(description="If True, the data will include all past data and the limit will be ignored. (provider: fmp)")] = None,
        estimate_type: Annotated[Optional[StrictStr], Field(description="Limit the EBITDA estimates to this type. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectForwardEbitdaEstimates]:
        """Forward Ebitda

        Get forward EBITDA estimates.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.
        :type symbol: str
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: fmp);     Filter for only full-year or quarterly estimates. (provider: intrinio)
        :type fiscal_period: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param include_historical: If True, the data will include all past data and the limit will be ignored. (provider: fmp)
        :type include_historical: bool
        :param estimate_type: Limit the EBITDA estimates to this type. (provider: intrinio)
        :type estimate_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_ebitda_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_period=fiscal_period,
            limit=limit,
            include_historical=include_historical,
            estimate_type=estimate_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardEbitdaEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_estimates_forward_ebitda_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The future fiscal period to retrieve estimates for. (provider: fmp);     Filter for only full-year or quarterly estimates. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        include_historical: Annotated[Optional[StrictBool], Field(description="If True, the data will include all past data and the limit will be ignored. (provider: fmp)")] = None,
        estimate_type: Annotated[Optional[StrictStr], Field(description="Limit the EBITDA estimates to this type. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Forward Ebitda

        Get forward EBITDA estimates.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.
        :type symbol: str
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: fmp);     Filter for only full-year or quarterly estimates. (provider: intrinio)
        :type fiscal_period: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param include_historical: If True, the data will include all past data and the limit will be ignored. (provider: fmp)
        :type include_historical: bool
        :param estimate_type: Limit the EBITDA estimates to this type. (provider: intrinio)
        :type estimate_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_ebitda_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_period=fiscal_period,
            limit=limit,
            include_historical=include_historical,
            estimate_type=estimate_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardEbitdaEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_estimates_forward_ebitda_serialize(
        self,
        provider,
        symbol,
        fiscal_period,
        limit,
        include_historical,
        estimate_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if fiscal_period is not None:
            
            _query_params.append(('fiscal_period', fiscal_period))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include_historical is not None:
            
            _query_params.append(('include_historical', include_historical))
            
        if estimate_type is not None:
            
            _query_params.append(('estimate_type', estimate_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/estimates/forward_ebitda',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_estimates_forward_eps(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")] = None,
        fiscal_period: Annotated[Optional[Any], Field(description="The future fiscal period to retrieve estimates for. (provider: fmp, intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        include_historical: Annotated[Optional[StrictBool], Field(description="If True, the data will include all past data and the limit will be ignored. (provider: fmp)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_year: Annotated[Optional[StrictInt], Field(description="The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_period: Annotated[Optional[StrictStr], Field(description="The future calendar period to retrieve estimates for. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectForwardEpsEstimates:
        """Forward Eps

        Get forward EPS estimates.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.
        :type symbol: str
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: fmp, intrinio)
        :type fiscal_period: FmpIntrinio
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param include_historical: If True, the data will include all past data and the limit will be ignored. (provider: fmp)
        :type include_historical: bool
        :param fiscal_year: The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type fiscal_year: int
        :param calendar_year: The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type calendar_year: int
        :param calendar_period: The future calendar period to retrieve estimates for. (provider: intrinio)
        :type calendar_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_eps_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_period=fiscal_period,
            limit=limit,
            include_historical=include_historical,
            fiscal_year=fiscal_year,
            calendar_year=calendar_year,
            calendar_period=calendar_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardEpsEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_estimates_forward_eps_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")] = None,
        fiscal_period: Annotated[Optional[Any], Field(description="The future fiscal period to retrieve estimates for. (provider: fmp, intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        include_historical: Annotated[Optional[StrictBool], Field(description="If True, the data will include all past data and the limit will be ignored. (provider: fmp)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_year: Annotated[Optional[StrictInt], Field(description="The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_period: Annotated[Optional[StrictStr], Field(description="The future calendar period to retrieve estimates for. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectForwardEpsEstimates]:
        """Forward Eps

        Get forward EPS estimates.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.
        :type symbol: str
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: fmp, intrinio)
        :type fiscal_period: FmpIntrinio
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param include_historical: If True, the data will include all past data and the limit will be ignored. (provider: fmp)
        :type include_historical: bool
        :param fiscal_year: The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type fiscal_year: int
        :param calendar_year: The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type calendar_year: int
        :param calendar_period: The future calendar period to retrieve estimates for. (provider: intrinio)
        :type calendar_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_eps_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_period=fiscal_period,
            limit=limit,
            include_historical=include_historical,
            fiscal_year=fiscal_year,
            calendar_year=calendar_year,
            calendar_period=calendar_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardEpsEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_estimates_forward_eps_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")] = None,
        fiscal_period: Annotated[Optional[Any], Field(description="The future fiscal period to retrieve estimates for. (provider: fmp, intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        include_historical: Annotated[Optional[StrictBool], Field(description="If True, the data will include all past data and the limit will be ignored. (provider: fmp)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_year: Annotated[Optional[StrictInt], Field(description="The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_period: Annotated[Optional[StrictStr], Field(description="The future calendar period to retrieve estimates for. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Forward Eps

        Get forward EPS estimates.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.
        :type symbol: str
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: fmp, intrinio)
        :type fiscal_period: FmpIntrinio
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param include_historical: If True, the data will include all past data and the limit will be ignored. (provider: fmp)
        :type include_historical: bool
        :param fiscal_year: The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type fiscal_year: int
        :param calendar_year: The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type calendar_year: int
        :param calendar_period: The future calendar period to retrieve estimates for. (provider: intrinio)
        :type calendar_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_eps_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_period=fiscal_period,
            limit=limit,
            include_historical=include_historical,
            fiscal_year=fiscal_year,
            calendar_year=calendar_year,
            calendar_period=calendar_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardEpsEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_estimates_forward_eps_serialize(
        self,
        provider,
        symbol,
        fiscal_period,
        limit,
        include_historical,
        fiscal_year,
        calendar_year,
        calendar_period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if fiscal_period is not None:
            
            _query_params.append(('fiscal_period', fiscal_period))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include_historical is not None:
            
            _query_params.append(('include_historical', include_historical))
            
        if fiscal_year is not None:
            
            _query_params.append(('fiscal_year', fiscal_year))
            
        if calendar_year is not None:
            
            _query_params.append(('calendar_year', calendar_year))
            
        if calendar_period is not None:
            
            _query_params.append(('calendar_period', calendar_period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/estimates/forward_eps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_estimates_forward_pe(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectForwardPeEstimates:
        """Forward Pe

        Get forward PE estimates.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_pe_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardPeEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_estimates_forward_pe_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectForwardPeEstimates]:
        """Forward Pe

        Get forward PE estimates.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_pe_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardPeEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_estimates_forward_pe_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Forward Pe

        Get forward PE estimates.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_pe_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardPeEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_estimates_forward_pe_serialize(
        self,
        provider,
        symbol,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/estimates/forward_pe',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_estimates_forward_sales(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The future fiscal period to retrieve estimates for. (provider: intrinio)")] = None,
        calendar_year: Annotated[Optional[StrictInt], Field(description="The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_period: Annotated[Optional[StrictStr], Field(description="The future calendar period to retrieve estimates for. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectForwardSalesEstimates:
        """Forward Sales

        Get forward sales estimates.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.
        :type symbol: str
        :param fiscal_year: The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type fiscal_year: int
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: intrinio)
        :type fiscal_period: str
        :param calendar_year: The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type calendar_year: int
        :param calendar_period: The future calendar period to retrieve estimates for. (provider: intrinio)
        :type calendar_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_sales_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_year=fiscal_year,
            fiscal_period=fiscal_period,
            calendar_year=calendar_year,
            calendar_period=calendar_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardSalesEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_estimates_forward_sales_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The future fiscal period to retrieve estimates for. (provider: intrinio)")] = None,
        calendar_year: Annotated[Optional[StrictInt], Field(description="The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_period: Annotated[Optional[StrictStr], Field(description="The future calendar period to retrieve estimates for. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectForwardSalesEstimates]:
        """Forward Sales

        Get forward sales estimates.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.
        :type symbol: str
        :param fiscal_year: The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type fiscal_year: int
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: intrinio)
        :type fiscal_period: str
        :param calendar_year: The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type calendar_year: int
        :param calendar_period: The future calendar period to retrieve estimates for. (provider: intrinio)
        :type calendar_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_sales_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_year=fiscal_year,
            fiscal_period=fiscal_period,
            calendar_year=calendar_year,
            calendar_period=calendar_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardSalesEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_estimates_forward_sales_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        fiscal_period: Annotated[Optional[StrictStr], Field(description="The future fiscal period to retrieve estimates for. (provider: intrinio)")] = None,
        calendar_year: Annotated[Optional[StrictInt], Field(description="The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)")] = None,
        calendar_period: Annotated[Optional[StrictStr], Field(description="The future calendar period to retrieve estimates for. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Forward Sales

        Get forward sales estimates.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.
        :type symbol: str
        :param fiscal_year: The future fiscal year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type fiscal_year: int
        :param fiscal_period: The future fiscal period to retrieve estimates for. (provider: intrinio)
        :type fiscal_period: str
        :param calendar_year: The future calendar year to retrieve estimates for. When no symbol and year is supplied the current calendar year is used. (provider: intrinio)
        :type calendar_year: int
        :param calendar_period: The future calendar period to retrieve estimates for. (provider: intrinio)
        :type calendar_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_forward_sales_serialize(
            provider=provider,
            symbol=symbol,
            fiscal_year=fiscal_year,
            fiscal_period=fiscal_period,
            calendar_year=calendar_year,
            calendar_period=calendar_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForwardSalesEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_estimates_forward_sales_serialize(
        self,
        provider,
        symbol,
        fiscal_year,
        fiscal_period,
        calendar_year,
        calendar_period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if fiscal_year is not None:
            
            _query_params.append(('fiscal_year', fiscal_year))
            
        if fiscal_period is not None:
            
            _query_params.append(('fiscal_period', fiscal_period))
            
        if calendar_year is not None:
            
            _query_params.append(('calendar_year', calendar_year))
            
        if calendar_period is not None:
            
            _query_params.append(('calendar_period', calendar_period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/estimates/forward_sales',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_estimates_historical(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectAnalystEstimates:
        """Historical

        Get historical analyst estimates for earnings and revenue.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_historical_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectAnalystEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_estimates_historical_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectAnalystEstimates]:
        """Historical

        Get historical analyst estimates for earnings and revenue.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_historical_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectAnalystEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_estimates_historical_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical

        Get historical analyst estimates for earnings and revenue.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_historical_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectAnalystEstimates",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_estimates_historical_serialize(
        self,
        symbol,
        provider,
        period,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/estimates/historical',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_estimates_price_target(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. Used in conjunction with the limit and date parameters. (provider: benzinga)")] = None,
        var_date: Annotated[Optional[date], Field(description="Date for calendar data, shorthand for date_from and date_to. (provider: benzinga)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: benzinga)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: benzinga)")] = None,
        updated: Annotated[Optional[Any], Field(description="Records last Updated Unix timestamp (UTC). This will force the sort order to be Greater Than or Equal to the timestamp indicated. The date can be a date string or a Unix timestamp. The date string must be in the format of YYYY-MM-DD. (provider: benzinga)")] = None,
        importance: Annotated[Optional[StrictInt], Field(description="Importance level to filter by. Uses Greater Than or Equal To the importance indicated (provider: benzinga)")] = None,
        action: Annotated[Optional[StrictStr], Field(description="Filter by a specific action_company. (provider: benzinga)")] = None,
        analyst_ids: Annotated[Optional[Any], Field(description="Comma-separated list of analyst (person) IDs. Omitting will bring back all available analysts. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        firm_ids: Annotated[Optional[Any], Field(description="Comma-separated list of firm IDs. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        fields: Annotated[Optional[Any], Field(description="Comma-separated list of fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        with_grade: Annotated[Optional[StrictBool], Field(description="Include upgrades and downgrades in the response. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectPriceTarget:
        """Price Target

        Get analyst price targets by company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp.
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param page: Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. Used in conjunction with the limit and date parameters. (provider: benzinga)
        :type page: int
        :param var_date: Date for calendar data, shorthand for date_from and date_to. (provider: benzinga)
        :type var_date: date
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: benzinga)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: benzinga)
        :type end_date: date
        :param updated: Records last Updated Unix timestamp (UTC). This will force the sort order to be Greater Than or Equal to the timestamp indicated. The date can be a date string or a Unix timestamp. The date string must be in the format of YYYY-MM-DD. (provider: benzinga)
        :type updated: Benzinga
        :param importance: Importance level to filter by. Uses Greater Than or Equal To the importance indicated (provider: benzinga)
        :type importance: int
        :param action: Filter by a specific action_company. (provider: benzinga)
        :type action: str
        :param analyst_ids: Comma-separated list of analyst (person) IDs. Omitting will bring back all available analysts. Multiple comma separated items allowed. (provider: benzinga)
        :type analyst_ids: Benzinga1
        :param firm_ids: Comma-separated list of firm IDs. Multiple comma separated items allowed. (provider: benzinga)
        :type firm_ids: Benzinga2
        :param fields: Comma-separated list of fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)
        :type fields: Benzinga3
        :param with_grade: Include upgrades and downgrades in the response. (provider: fmp)
        :type with_grade: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_price_target_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            page=page,
            var_date=var_date,
            start_date=start_date,
            end_date=end_date,
            updated=updated,
            importance=importance,
            action=action,
            analyst_ids=analyst_ids,
            firm_ids=firm_ids,
            fields=fields,
            with_grade=with_grade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPriceTarget",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_estimates_price_target_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. Used in conjunction with the limit and date parameters. (provider: benzinga)")] = None,
        var_date: Annotated[Optional[date], Field(description="Date for calendar data, shorthand for date_from and date_to. (provider: benzinga)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: benzinga)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: benzinga)")] = None,
        updated: Annotated[Optional[Any], Field(description="Records last Updated Unix timestamp (UTC). This will force the sort order to be Greater Than or Equal to the timestamp indicated. The date can be a date string or a Unix timestamp. The date string must be in the format of YYYY-MM-DD. (provider: benzinga)")] = None,
        importance: Annotated[Optional[StrictInt], Field(description="Importance level to filter by. Uses Greater Than or Equal To the importance indicated (provider: benzinga)")] = None,
        action: Annotated[Optional[StrictStr], Field(description="Filter by a specific action_company. (provider: benzinga)")] = None,
        analyst_ids: Annotated[Optional[Any], Field(description="Comma-separated list of analyst (person) IDs. Omitting will bring back all available analysts. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        firm_ids: Annotated[Optional[Any], Field(description="Comma-separated list of firm IDs. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        fields: Annotated[Optional[Any], Field(description="Comma-separated list of fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        with_grade: Annotated[Optional[StrictBool], Field(description="Include upgrades and downgrades in the response. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectPriceTarget]:
        """Price Target

        Get analyst price targets by company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp.
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param page: Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. Used in conjunction with the limit and date parameters. (provider: benzinga)
        :type page: int
        :param var_date: Date for calendar data, shorthand for date_from and date_to. (provider: benzinga)
        :type var_date: date
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: benzinga)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: benzinga)
        :type end_date: date
        :param updated: Records last Updated Unix timestamp (UTC). This will force the sort order to be Greater Than or Equal to the timestamp indicated. The date can be a date string or a Unix timestamp. The date string must be in the format of YYYY-MM-DD. (provider: benzinga)
        :type updated: Benzinga
        :param importance: Importance level to filter by. Uses Greater Than or Equal To the importance indicated (provider: benzinga)
        :type importance: int
        :param action: Filter by a specific action_company. (provider: benzinga)
        :type action: str
        :param analyst_ids: Comma-separated list of analyst (person) IDs. Omitting will bring back all available analysts. Multiple comma separated items allowed. (provider: benzinga)
        :type analyst_ids: Benzinga1
        :param firm_ids: Comma-separated list of firm IDs. Multiple comma separated items allowed. (provider: benzinga)
        :type firm_ids: Benzinga2
        :param fields: Comma-separated list of fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)
        :type fields: Benzinga3
        :param with_grade: Include upgrades and downgrades in the response. (provider: fmp)
        :type with_grade: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_price_target_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            page=page,
            var_date=var_date,
            start_date=start_date,
            end_date=end_date,
            updated=updated,
            importance=importance,
            action=action,
            analyst_ids=analyst_ids,
            firm_ids=firm_ids,
            fields=fields,
            with_grade=with_grade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPriceTarget",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_estimates_price_target_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. Used in conjunction with the limit and date parameters. (provider: benzinga)")] = None,
        var_date: Annotated[Optional[date], Field(description="Date for calendar data, shorthand for date_from and date_to. (provider: benzinga)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: benzinga)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: benzinga)")] = None,
        updated: Annotated[Optional[Any], Field(description="Records last Updated Unix timestamp (UTC). This will force the sort order to be Greater Than or Equal to the timestamp indicated. The date can be a date string or a Unix timestamp. The date string must be in the format of YYYY-MM-DD. (provider: benzinga)")] = None,
        importance: Annotated[Optional[StrictInt], Field(description="Importance level to filter by. Uses Greater Than or Equal To the importance indicated (provider: benzinga)")] = None,
        action: Annotated[Optional[StrictStr], Field(description="Filter by a specific action_company. (provider: benzinga)")] = None,
        analyst_ids: Annotated[Optional[Any], Field(description="Comma-separated list of analyst (person) IDs. Omitting will bring back all available analysts. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        firm_ids: Annotated[Optional[Any], Field(description="Comma-separated list of firm IDs. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        fields: Annotated[Optional[Any], Field(description="Comma-separated list of fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)")] = None,
        with_grade: Annotated[Optional[StrictBool], Field(description="Include upgrades and downgrades in the response. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Price Target

        Get analyst price targets by company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp.
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param page: Page offset. For optimization, performance and technical reasons, page offsets are limited from 0 - 100000. Limit the query results by other parameters such as date. Used in conjunction with the limit and date parameters. (provider: benzinga)
        :type page: int
        :param var_date: Date for calendar data, shorthand for date_from and date_to. (provider: benzinga)
        :type var_date: date
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: benzinga)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: benzinga)
        :type end_date: date
        :param updated: Records last Updated Unix timestamp (UTC). This will force the sort order to be Greater Than or Equal to the timestamp indicated. The date can be a date string or a Unix timestamp. The date string must be in the format of YYYY-MM-DD. (provider: benzinga)
        :type updated: Benzinga
        :param importance: Importance level to filter by. Uses Greater Than or Equal To the importance indicated (provider: benzinga)
        :type importance: int
        :param action: Filter by a specific action_company. (provider: benzinga)
        :type action: str
        :param analyst_ids: Comma-separated list of analyst (person) IDs. Omitting will bring back all available analysts. Multiple comma separated items allowed. (provider: benzinga)
        :type analyst_ids: Benzinga1
        :param firm_ids: Comma-separated list of firm IDs. Multiple comma separated items allowed. (provider: benzinga)
        :type firm_ids: Benzinga2
        :param fields: Comma-separated list of fields to include in the response. See https://docs.benzinga.io/benzinga-apis/calendar/get-ratings to learn about the available fields. Multiple comma separated items allowed. (provider: benzinga)
        :type fields: Benzinga3
        :param with_grade: Include upgrades and downgrades in the response. (provider: fmp)
        :type with_grade: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_estimates_price_target_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            page=page,
            var_date=var_date,
            start_date=start_date,
            end_date=end_date,
            updated=updated,
            importance=importance,
            action=action,
            analyst_ids=analyst_ids,
            firm_ids=firm_ids,
            fields=fields,
            with_grade=with_grade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPriceTarget",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_estimates_price_target_serialize(
        self,
        provider,
        symbol,
        limit,
        page,
        var_date,
        start_date,
        end_date,
        updated,
        importance,
        action,
        analyst_ids,
        firm_ids,
        fields,
        with_grade,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if updated is not None:
            
            _query_params.append(('updated', updated))
            
        if importance is not None:
            
            _query_params.append(('importance', importance))
            
        if action is not None:
            
            _query_params.append(('action', action))
            
        if analyst_ids is not None:
            
            _query_params.append(('analyst_ids', analyst_ids))
            
        if firm_ids is not None:
            
            _query_params.append(('firm_ids', firm_ids))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if with_grade is not None:
            
            _query_params.append(('with_grade', with_grade))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/estimates/price_target',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_balance(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectBalanceSheet:
        """Balance

        Get the balance sheet for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: str
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_balance_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectBalanceSheet",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_balance_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectBalanceSheet]:
        """Balance

        Get the balance sheet for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: str
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_balance_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectBalanceSheet",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_balance_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Balance

        Get the balance sheet for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: str
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_balance_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectBalanceSheet",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_balance_serialize(
        self,
        provider,
        symbol,
        limit,
        period,
        fiscal_year,
        filing_date,
        filing_date_lt,
        filing_date_lte,
        filing_date_gt,
        filing_date_gte,
        period_of_report_date,
        period_of_report_date_lt,
        period_of_report_date_lte,
        period_of_report_date_gt,
        period_of_report_date_gte,
        include_sources,
        order,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        if fiscal_year is not None:
            
            _query_params.append(('fiscal_year', fiscal_year))
            
        if filing_date is not None:
            if isinstance(filing_date, date):
                _query_params.append(
                    (
                        'filing_date',
                        filing_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date', filing_date))
            
        if filing_date_lt is not None:
            if isinstance(filing_date_lt, date):
                _query_params.append(
                    (
                        'filing_date_lt',
                        filing_date_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_lt', filing_date_lt))
            
        if filing_date_lte is not None:
            if isinstance(filing_date_lte, date):
                _query_params.append(
                    (
                        'filing_date_lte',
                        filing_date_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_lte', filing_date_lte))
            
        if filing_date_gt is not None:
            if isinstance(filing_date_gt, date):
                _query_params.append(
                    (
                        'filing_date_gt',
                        filing_date_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_gt', filing_date_gt))
            
        if filing_date_gte is not None:
            if isinstance(filing_date_gte, date):
                _query_params.append(
                    (
                        'filing_date_gte',
                        filing_date_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_gte', filing_date_gte))
            
        if period_of_report_date is not None:
            if isinstance(period_of_report_date, date):
                _query_params.append(
                    (
                        'period_of_report_date',
                        period_of_report_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date', period_of_report_date))
            
        if period_of_report_date_lt is not None:
            if isinstance(period_of_report_date_lt, date):
                _query_params.append(
                    (
                        'period_of_report_date_lt',
                        period_of_report_date_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_lt', period_of_report_date_lt))
            
        if period_of_report_date_lte is not None:
            if isinstance(period_of_report_date_lte, date):
                _query_params.append(
                    (
                        'period_of_report_date_lte',
                        period_of_report_date_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_lte', period_of_report_date_lte))
            
        if period_of_report_date_gt is not None:
            if isinstance(period_of_report_date_gt, date):
                _query_params.append(
                    (
                        'period_of_report_date_gt',
                        period_of_report_date_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_gt', period_of_report_date_gt))
            
        if period_of_report_date_gte is not None:
            if isinstance(period_of_report_date_gte, date):
                _query_params.append(
                    (
                        'period_of_report_date_gte',
                        period_of_report_date_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_gte', period_of_report_date_gte))
            
        if include_sources is not None:
            
            _query_params.append(('include_sources', include_sources))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/balance',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_balance_growth(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectBalanceSheetGrowth:
        """Balance Growth

        Get the growth of a company's balance sheet items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_balance_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectBalanceSheetGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_balance_growth_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectBalanceSheetGrowth]:
        """Balance Growth

        Get the growth of a company's balance sheet items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_balance_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectBalanceSheetGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_balance_growth_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Balance Growth

        Get the growth of a company's balance sheet items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_balance_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectBalanceSheetGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_balance_growth_serialize(
        self,
        symbol,
        provider,
        limit,
        period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/balance_growth',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_cash(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCashFlowStatement:
        """Cash

        Get the cash flow statement for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: FmpIntrinioPolygonYfinance
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_cash_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCashFlowStatement",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_cash_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCashFlowStatement]:
        """Cash

        Get the cash flow statement for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: FmpIntrinioPolygonYfinance
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_cash_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCashFlowStatement",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_cash_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cash

        Get the cash flow statement for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: FmpIntrinioPolygonYfinance
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_cash_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCashFlowStatement",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_cash_serialize(
        self,
        provider,
        symbol,
        limit,
        period,
        fiscal_year,
        filing_date,
        filing_date_lt,
        filing_date_lte,
        filing_date_gt,
        filing_date_gte,
        period_of_report_date,
        period_of_report_date_lt,
        period_of_report_date_lte,
        period_of_report_date_gt,
        period_of_report_date_gte,
        include_sources,
        order,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        if fiscal_year is not None:
            
            _query_params.append(('fiscal_year', fiscal_year))
            
        if filing_date is not None:
            if isinstance(filing_date, date):
                _query_params.append(
                    (
                        'filing_date',
                        filing_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date', filing_date))
            
        if filing_date_lt is not None:
            if isinstance(filing_date_lt, date):
                _query_params.append(
                    (
                        'filing_date_lt',
                        filing_date_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_lt', filing_date_lt))
            
        if filing_date_lte is not None:
            if isinstance(filing_date_lte, date):
                _query_params.append(
                    (
                        'filing_date_lte',
                        filing_date_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_lte', filing_date_lte))
            
        if filing_date_gt is not None:
            if isinstance(filing_date_gt, date):
                _query_params.append(
                    (
                        'filing_date_gt',
                        filing_date_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_gt', filing_date_gt))
            
        if filing_date_gte is not None:
            if isinstance(filing_date_gte, date):
                _query_params.append(
                    (
                        'filing_date_gte',
                        filing_date_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_gte', filing_date_gte))
            
        if period_of_report_date is not None:
            if isinstance(period_of_report_date, date):
                _query_params.append(
                    (
                        'period_of_report_date',
                        period_of_report_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date', period_of_report_date))
            
        if period_of_report_date_lt is not None:
            if isinstance(period_of_report_date_lt, date):
                _query_params.append(
                    (
                        'period_of_report_date_lt',
                        period_of_report_date_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_lt', period_of_report_date_lt))
            
        if period_of_report_date_lte is not None:
            if isinstance(period_of_report_date_lte, date):
                _query_params.append(
                    (
                        'period_of_report_date_lte',
                        period_of_report_date_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_lte', period_of_report_date_lte))
            
        if period_of_report_date_gt is not None:
            if isinstance(period_of_report_date_gt, date):
                _query_params.append(
                    (
                        'period_of_report_date_gt',
                        period_of_report_date_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_gt', period_of_report_date_gt))
            
        if period_of_report_date_gte is not None:
            if isinstance(period_of_report_date_gte, date):
                _query_params.append(
                    (
                        'period_of_report_date_gte',
                        period_of_report_date_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_gte', period_of_report_date_gte))
            
        if include_sources is not None:
            
            _query_params.append(('include_sources', include_sources))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/cash',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_cash_growth(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCashFlowStatementGrowth:
        """Cash Growth

        Get the growth of a company's cash flow statement items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_cash_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCashFlowStatementGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_cash_growth_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCashFlowStatementGrowth]:
        """Cash Growth

        Get the growth of a company's cash flow statement items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_cash_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCashFlowStatementGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_cash_growth_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cash Growth

        Get the growth of a company's cash flow statement items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_cash_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCashFlowStatementGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_cash_growth_serialize(
        self,
        symbol,
        provider,
        limit,
        period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/cash_growth',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_dividends(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectHistoricalDividends:
        """Dividends

        Get historical dividend data for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return. (provider: intrinio)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_dividends_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalDividends",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_dividends_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectHistoricalDividends]:
        """Dividends

        Get historical dividend data for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return. (provider: intrinio)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_dividends_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalDividends",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_dividends_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Dividends

        Get historical dividend data for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return. (provider: intrinio)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_dividends_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalDividends",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_dividends_serialize(
        self,
        provider,
        symbol,
        start_date,
        end_date,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/dividends',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_employee_count(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectHistoricalEmployees:
        """Employee Count

        Get historical employee count data for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_employee_count_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalEmployees",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_employee_count_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectHistoricalEmployees]:
        """Employee Count

        Get historical employee count data for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_employee_count_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalEmployees",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_employee_count_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Employee Count

        Get historical employee count data for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_employee_count_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalEmployees",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_employee_count_serialize(
        self,
        symbol,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/employee_count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_filings(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for.")] = None,
        form_type: Annotated[Optional[StrictStr], Field(description="Filter by form type. Check the data provider for available types. Multiple comma separated items allowed for provider(s): sec.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        thea_enabled: Annotated[Optional[StrictBool], Field(description="Return filings that have been read by Intrinio's Thea NLP. (provider: intrinio)")] = None,
        cik: Annotated[Optional[Any], Field(description="Lookup filings by Central Index Key (CIK) instead of by symbol. (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether or not to use cache.  If True, cache will store for one day. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCompanyFilings:
        """Filings

        Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more.  SEC filings include Form 10-K, Form 10-Q, Form 8-K, the proxy statement, Forms 3, 4, and 5, Schedule 13, Form 114, Foreign Investment Disclosures and others. The annual 10-K report is required to be filed annually and includes the company's financial statements, management discussion and analysis, and audited financial statements.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for.
        :type symbol: str
        :param form_type: Filter by form type. Check the data provider for available types. Multiple comma separated items allowed for provider(s): sec.
        :type form_type: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type end_date: date
        :param thea_enabled: Return filings that have been read by Intrinio's Thea NLP. (provider: intrinio)
        :type thea_enabled: bool
        :param cik: Lookup filings by Central Index Key (CIK) instead of by symbol. (provider: sec)
        :type cik: Sec
        :param use_cache: Whether or not to use cache.  If True, cache will store for one day. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_filings_serialize(
            provider=provider,
            symbol=symbol,
            form_type=form_type,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            thea_enabled=thea_enabled,
            cik=cik,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompanyFilings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_filings_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for.")] = None,
        form_type: Annotated[Optional[StrictStr], Field(description="Filter by form type. Check the data provider for available types. Multiple comma separated items allowed for provider(s): sec.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        thea_enabled: Annotated[Optional[StrictBool], Field(description="Return filings that have been read by Intrinio's Thea NLP. (provider: intrinio)")] = None,
        cik: Annotated[Optional[Any], Field(description="Lookup filings by Central Index Key (CIK) instead of by symbol. (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether or not to use cache.  If True, cache will store for one day. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCompanyFilings]:
        """Filings

        Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more.  SEC filings include Form 10-K, Form 10-Q, Form 8-K, the proxy statement, Forms 3, 4, and 5, Schedule 13, Form 114, Foreign Investment Disclosures and others. The annual 10-K report is required to be filed annually and includes the company's financial statements, management discussion and analysis, and audited financial statements.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for.
        :type symbol: str
        :param form_type: Filter by form type. Check the data provider for available types. Multiple comma separated items allowed for provider(s): sec.
        :type form_type: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type end_date: date
        :param thea_enabled: Return filings that have been read by Intrinio's Thea NLP. (provider: intrinio)
        :type thea_enabled: bool
        :param cik: Lookup filings by Central Index Key (CIK) instead of by symbol. (provider: sec)
        :type cik: Sec
        :param use_cache: Whether or not to use cache.  If True, cache will store for one day. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_filings_serialize(
            provider=provider,
            symbol=symbol,
            form_type=form_type,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            thea_enabled=thea_enabled,
            cik=cik,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompanyFilings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_filings_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for.")] = None,
        form_type: Annotated[Optional[StrictStr], Field(description="Filter by form type. Check the data provider for available types. Multiple comma separated items allowed for provider(s): sec.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        thea_enabled: Annotated[Optional[StrictBool], Field(description="Return filings that have been read by Intrinio's Thea NLP. (provider: intrinio)")] = None,
        cik: Annotated[Optional[Any], Field(description="Lookup filings by Central Index Key (CIK) instead of by symbol. (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether or not to use cache.  If True, cache will store for one day. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Filings

        Get the URLs to SEC filings reported to EDGAR database, such as 10-K, 10-Q, 8-K, and more.  SEC filings include Form 10-K, Form 10-Q, Form 8-K, the proxy statement, Forms 3, 4, and 5, Schedule 13, Form 114, Foreign Investment Disclosures and others. The annual 10-K report is required to be filed annually and includes the company's financial statements, management discussion and analysis, and audited financial statements.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for.
        :type symbol: str
        :param form_type: Filter by form type. Check the data provider for available types. Multiple comma separated items allowed for provider(s): sec.
        :type form_type: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type end_date: date
        :param thea_enabled: Return filings that have been read by Intrinio's Thea NLP. (provider: intrinio)
        :type thea_enabled: bool
        :param cik: Lookup filings by Central Index Key (CIK) instead of by symbol. (provider: sec)
        :type cik: Sec
        :param use_cache: Whether or not to use cache.  If True, cache will store for one day. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_filings_serialize(
            provider=provider,
            symbol=symbol,
            form_type=form_type,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            thea_enabled=thea_enabled,
            cik=cik,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompanyFilings",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_filings_serialize(
        self,
        provider,
        symbol,
        form_type,
        limit,
        start_date,
        end_date,
        thea_enabled,
        cik,
        use_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if form_type is not None:
            
            _query_params.append(('form_type', form_type))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if thea_enabled is not None:
            
            _query_params.append(('thea_enabled', thea_enabled))
            
        if cik is not None:
            
            _query_params.append(('cik', cik))
            
        if use_cache is not None:
            
            _query_params.append(('use_cache', use_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/filings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_historical_attributes(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")],
        tag: Annotated[StrictStr, Field(description="Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio.")],
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="The frequency of the data.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        tag_type: Annotated[Optional[StrictStr], Field(description="Filter by type, when applicable.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectHistoricalAttributes:
        """Historical Attributes

        Get the historical values of a data tag from Intrinio.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type symbol: str
        :param tag: Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type tag: str
        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param frequency: The frequency of the data.
        :type frequency: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param tag_type: Filter by type, when applicable.
        :type tag_type: str
        :param sort: Sort order.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_attributes_serialize(
            symbol=symbol,
            tag=tag,
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            limit=limit,
            tag_type=tag_type,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_historical_attributes_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")],
        tag: Annotated[StrictStr, Field(description="Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio.")],
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="The frequency of the data.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        tag_type: Annotated[Optional[StrictStr], Field(description="Filter by type, when applicable.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectHistoricalAttributes]:
        """Historical Attributes

        Get the historical values of a data tag from Intrinio.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type symbol: str
        :param tag: Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type tag: str
        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param frequency: The frequency of the data.
        :type frequency: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param tag_type: Filter by type, when applicable.
        :type tag_type: str
        :param sort: Sort order.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_attributes_serialize(
            symbol=symbol,
            tag=tag,
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            limit=limit,
            tag_type=tag_type,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_historical_attributes_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")],
        tag: Annotated[StrictStr, Field(description="Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio.")],
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="The frequency of the data.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        tag_type: Annotated[Optional[StrictStr], Field(description="Filter by type, when applicable.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical Attributes

        Get the historical values of a data tag from Intrinio.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type symbol: str
        :param tag: Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type tag: str
        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param frequency: The frequency of the data.
        :type frequency: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param tag_type: Filter by type, when applicable.
        :type tag_type: str
        :param sort: Sort order.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_attributes_serialize(
            symbol=symbol,
            tag=tag,
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            limit=limit,
            tag_type=tag_type,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_historical_attributes_serialize(
        self,
        symbol,
        tag,
        provider,
        start_date,
        end_date,
        frequency,
        limit,
        tag_type,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if frequency is not None:
            
            _query_params.append(('frequency', frequency))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if tag_type is not None:
            
            _query_params.append(('tag_type', tag_type))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/historical_attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_historical_eps(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectHistoricalEps:
        """Historical Eps

        Get historical earnings per share data for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_eps_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalEps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_historical_eps_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectHistoricalEps]:
        """Historical Eps

        Get historical earnings per share data for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_eps_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalEps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_historical_eps_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical Eps

        Get historical earnings per share data for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. (provider: fmp)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_eps_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalEps",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_historical_eps_serialize(
        self,
        symbol,
        provider,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/historical_eps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_historical_splits(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectHistoricalSplits:
        """Historical Splits

        Get historical stock splits for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_splits_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalSplits",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_historical_splits_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectHistoricalSplits]:
        """Historical Splits

        Get historical stock splits for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_splits_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalSplits",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_historical_splits_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical Splits

        Get historical stock splits for a given company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_historical_splits_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalSplits",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_historical_splits_serialize(
        self,
        symbol,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/historical_splits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_income(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectIncomeStatement:
        """Income

        Get the income statement for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: FmpIntrinioPolygonYfinance1
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_income_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectIncomeStatement",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_income_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectIncomeStatement]:
        """Income

        Get the income statement for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: FmpIntrinioPolygonYfinance1
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_income_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectIncomeStatement",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_income_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        filing_date: Annotated[Optional[date], Field(description="Filing date of the financial statement. (provider: polygon)")] = None,
        filing_date_lt: Annotated[Optional[date], Field(description="Filing date less than the given date. (provider: polygon)")] = None,
        filing_date_lte: Annotated[Optional[date], Field(description="Filing date less than or equal to the given date. (provider: polygon)")] = None,
        filing_date_gt: Annotated[Optional[date], Field(description="Filing date greater than the given date. (provider: polygon)")] = None,
        filing_date_gte: Annotated[Optional[date], Field(description="Filing date greater than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date: Annotated[Optional[date], Field(description="Period of report date of the financial statement. (provider: polygon)")] = None,
        period_of_report_date_lt: Annotated[Optional[date], Field(description="Period of report date less than the given date. (provider: polygon)")] = None,
        period_of_report_date_lte: Annotated[Optional[date], Field(description="Period of report date less than or equal to the given date. (provider: polygon)")] = None,
        period_of_report_date_gt: Annotated[Optional[date], Field(description="Period of report date greater than the given date. (provider: polygon)")] = None,
        period_of_report_date_gte: Annotated[Optional[date], Field(description="Period of report date greater than or equal to the given date. (provider: polygon)")] = None,
        include_sources: Annotated[Optional[StrictBool], Field(description="Whether to include the sources of the financial statement. (provider: polygon)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order of the financial statement. (provider: polygon)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort of the financial statement. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Income

        Get the income statement for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio, polygon, yfinance)
        :type period: FmpIntrinioPolygonYfinance1
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param filing_date: Filing date of the financial statement. (provider: polygon)
        :type filing_date: date
        :param filing_date_lt: Filing date less than the given date. (provider: polygon)
        :type filing_date_lt: date
        :param filing_date_lte: Filing date less than or equal to the given date. (provider: polygon)
        :type filing_date_lte: date
        :param filing_date_gt: Filing date greater than the given date. (provider: polygon)
        :type filing_date_gt: date
        :param filing_date_gte: Filing date greater than or equal to the given date. (provider: polygon)
        :type filing_date_gte: date
        :param period_of_report_date: Period of report date of the financial statement. (provider: polygon)
        :type period_of_report_date: date
        :param period_of_report_date_lt: Period of report date less than the given date. (provider: polygon)
        :type period_of_report_date_lt: date
        :param period_of_report_date_lte: Period of report date less than or equal to the given date. (provider: polygon)
        :type period_of_report_date_lte: date
        :param period_of_report_date_gt: Period of report date greater than the given date. (provider: polygon)
        :type period_of_report_date_gt: date
        :param period_of_report_date_gte: Period of report date greater than or equal to the given date. (provider: polygon)
        :type period_of_report_date_gte: date
        :param include_sources: Whether to include the sources of the financial statement. (provider: polygon)
        :type include_sources: bool
        :param order: Order of the financial statement. (provider: polygon)
        :type order: str
        :param sort: Sort of the financial statement. (provider: polygon)
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_income_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            filing_date=filing_date,
            filing_date_lt=filing_date_lt,
            filing_date_lte=filing_date_lte,
            filing_date_gt=filing_date_gt,
            filing_date_gte=filing_date_gte,
            period_of_report_date=period_of_report_date,
            period_of_report_date_lt=period_of_report_date_lt,
            period_of_report_date_lte=period_of_report_date_lte,
            period_of_report_date_gt=period_of_report_date_gt,
            period_of_report_date_gte=period_of_report_date_gte,
            include_sources=include_sources,
            order=order,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectIncomeStatement",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_income_serialize(
        self,
        provider,
        symbol,
        limit,
        period,
        fiscal_year,
        filing_date,
        filing_date_lt,
        filing_date_lte,
        filing_date_gt,
        filing_date_gte,
        period_of_report_date,
        period_of_report_date_lt,
        period_of_report_date_lte,
        period_of_report_date_gt,
        period_of_report_date_gte,
        include_sources,
        order,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        if fiscal_year is not None:
            
            _query_params.append(('fiscal_year', fiscal_year))
            
        if filing_date is not None:
            if isinstance(filing_date, date):
                _query_params.append(
                    (
                        'filing_date',
                        filing_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date', filing_date))
            
        if filing_date_lt is not None:
            if isinstance(filing_date_lt, date):
                _query_params.append(
                    (
                        'filing_date_lt',
                        filing_date_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_lt', filing_date_lt))
            
        if filing_date_lte is not None:
            if isinstance(filing_date_lte, date):
                _query_params.append(
                    (
                        'filing_date_lte',
                        filing_date_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_lte', filing_date_lte))
            
        if filing_date_gt is not None:
            if isinstance(filing_date_gt, date):
                _query_params.append(
                    (
                        'filing_date_gt',
                        filing_date_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_gt', filing_date_gt))
            
        if filing_date_gte is not None:
            if isinstance(filing_date_gte, date):
                _query_params.append(
                    (
                        'filing_date_gte',
                        filing_date_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filing_date_gte', filing_date_gte))
            
        if period_of_report_date is not None:
            if isinstance(period_of_report_date, date):
                _query_params.append(
                    (
                        'period_of_report_date',
                        period_of_report_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date', period_of_report_date))
            
        if period_of_report_date_lt is not None:
            if isinstance(period_of_report_date_lt, date):
                _query_params.append(
                    (
                        'period_of_report_date_lt',
                        period_of_report_date_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_lt', period_of_report_date_lt))
            
        if period_of_report_date_lte is not None:
            if isinstance(period_of_report_date_lte, date):
                _query_params.append(
                    (
                        'period_of_report_date_lte',
                        period_of_report_date_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_lte', period_of_report_date_lte))
            
        if period_of_report_date_gt is not None:
            if isinstance(period_of_report_date_gt, date):
                _query_params.append(
                    (
                        'period_of_report_date_gt',
                        period_of_report_date_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_gt', period_of_report_date_gt))
            
        if period_of_report_date_gte is not None:
            if isinstance(period_of_report_date_gte, date):
                _query_params.append(
                    (
                        'period_of_report_date_gte',
                        period_of_report_date_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('period_of_report_date_gte', period_of_report_date_gte))
            
        if include_sources is not None:
            
            _query_params.append(('include_sources', include_sources))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/income',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_income_growth(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectIncomeStatementGrowth:
        """Income Growth

        Get the growth of a company's income statement items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_income_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectIncomeStatementGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_income_growth_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectIncomeStatementGrowth]:
        """Income Growth

        Get the growth of a company's income statement items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_income_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectIncomeStatementGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_income_growth_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Income Growth

        Get the growth of a company's income statement items over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_income_growth_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectIncomeStatementGrowth",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_income_growth_serialize(
        self,
        symbol,
        provider,
        limit,
        period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/income_growth',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_latest_attributes(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")],
        tag: Annotated[StrictStr, Field(description="Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectLatestAttributes:
        """Latest Attributes

        Get the latest value of a data tag from Intrinio.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type symbol: str
        :param tag: Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type tag: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_latest_attributes_serialize(
            symbol=symbol,
            tag=tag,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectLatestAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_latest_attributes_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")],
        tag: Annotated[StrictStr, Field(description="Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectLatestAttributes]:
        """Latest Attributes

        Get the latest value of a data tag from Intrinio.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type symbol: str
        :param tag: Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type tag: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_latest_attributes_serialize(
            symbol=symbol,
            tag=tag,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectLatestAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_latest_attributes_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio.")],
        tag: Annotated[StrictStr, Field(description="Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Latest Attributes

        Get the latest value of a data tag from Intrinio.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type symbol: str
        :param tag: Intrinio data tag ID or code. Multiple comma separated items allowed for provider(s): intrinio. (required)
        :type tag: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_latest_attributes_serialize(
            symbol=symbol,
            tag=tag,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectLatestAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_latest_attributes_serialize(
        self,
        symbol,
        tag,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/latest_attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_management(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectKeyExecutives:
        """Management

        Get executive management team data for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_management_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectKeyExecutives",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_management_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectKeyExecutives]:
        """Management

        Get executive management team data for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_management_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectKeyExecutives",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_management_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Management

        Get executive management team data for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_management_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectKeyExecutives",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_management_serialize(
        self,
        provider,
        symbol,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/management',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_management_compensation(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        year: Annotated[Optional[StrictInt], Field(description="Year of the compensation. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectExecutiveCompensation:
        """Management Compensation

        Get executive management team compensation for a given company over time.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param year: Year of the compensation. (provider: fmp)
        :type year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_management_compensation_serialize(
            symbol=symbol,
            provider=provider,
            year=year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectExecutiveCompensation",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_management_compensation_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        year: Annotated[Optional[StrictInt], Field(description="Year of the compensation. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectExecutiveCompensation]:
        """Management Compensation

        Get executive management team compensation for a given company over time.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param year: Year of the compensation. (provider: fmp)
        :type year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_management_compensation_serialize(
            symbol=symbol,
            provider=provider,
            year=year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectExecutiveCompensation",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_management_compensation_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        year: Annotated[Optional[StrictInt], Field(description="Year of the compensation. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Management Compensation

        Get executive management team compensation for a given company over time.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param year: Year of the compensation. (provider: fmp)
        :type year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_management_compensation_serialize(
            symbol=symbol,
            provider=provider,
            year=year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectExecutiveCompensation",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_management_compensation_serialize(
        self,
        symbol,
        provider,
        year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if year is not None:
            
            _query_params.append(('year', year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/management_compensation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_metrics(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        with_ttm: Annotated[Optional[StrictBool], Field(description="Include trailing twelve months (TTM) data. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectKeyMetrics:
        """Metrics

        Get fundamental metrics for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param with_ttm: Include trailing twelve months (TTM) data. (provider: fmp)
        :type with_ttm: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_metrics_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            with_ttm=with_ttm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectKeyMetrics",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_metrics_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        with_ttm: Annotated[Optional[StrictBool], Field(description="Include trailing twelve months (TTM) data. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectKeyMetrics]:
        """Metrics

        Get fundamental metrics for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param with_ttm: Include trailing twelve months (TTM) data. (provider: fmp)
        :type with_ttm: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_metrics_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            with_ttm=with_ttm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectKeyMetrics",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_metrics_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        with_ttm: Annotated[Optional[StrictBool], Field(description="Include trailing twelve months (TTM) data. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Metrics

        Get fundamental metrics for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param with_ttm: Include trailing twelve months (TTM) data. (provider: fmp)
        :type with_ttm: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_metrics_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            with_ttm=with_ttm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectKeyMetrics",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_metrics_serialize(
        self,
        provider,
        symbol,
        limit,
        period,
        with_ttm,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        if with_ttm is not None:
            
            _query_params.append(('with_ttm', with_ttm))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_multiples(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityValuationMultiples:
        """Multiples

        Get equity valuation multiples for a given company.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_multiples_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityValuationMultiples",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_multiples_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityValuationMultiples]:
        """Multiples

        Get equity valuation multiples for a given company.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_multiples_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityValuationMultiples",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_multiples_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Multiples

        Get equity valuation multiples for a given company.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_multiples_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityValuationMultiples",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_multiples_serialize(
        self,
        symbol,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/multiples',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_ratios(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectFinancialRatios:
        """Ratios

        Get an extensive set of financial and accounting ratios for a given company over time.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio)
        :type period: FmpIntrinio1
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_ratios_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFinancialRatios",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_ratios_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectFinancialRatios]:
        """Ratios

        Get an extensive set of financial and accounting ratios for a given company over time.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio)
        :type period: FmpIntrinio1
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_ratios_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFinancialRatios",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_ratios_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        period: Annotated[Optional[Any], Field(description="Time period of the data to return. (provider: fmp, intrinio)")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Ratios

        Get an extensive set of financial and accounting ratios for a given company over time.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param period: Time period of the data to return. (provider: fmp, intrinio)
        :type period: FmpIntrinio1
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_ratios_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            period=period,
            fiscal_year=fiscal_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFinancialRatios",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_ratios_serialize(
        self,
        provider,
        symbol,
        limit,
        period,
        fiscal_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        if fiscal_year is not None:
            
            _query_params.append(('fiscal_year', fiscal_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/ratios',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_reported_financials(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return.")] = None,
        statement_type: Annotated[Optional[StrictStr], Field(description="The type of financial statement - i.e, balance, income, cash.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectReportedFinancials:
        """Reported Financials

        Get financial statements as reported by the company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return.
        :type period: str
        :param statement_type: The type of financial statement - i.e, balance, income, cash.
        :type statement_type: str
        :param limit: The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.
        :type limit: int
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_reported_financials_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            statement_type=statement_type,
            limit=limit,
            fiscal_year=fiscal_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectReportedFinancials",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_reported_financials_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return.")] = None,
        statement_type: Annotated[Optional[StrictStr], Field(description="The type of financial statement - i.e, balance, income, cash.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectReportedFinancials]:
        """Reported Financials

        Get financial statements as reported by the company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return.
        :type period: str
        :param statement_type: The type of financial statement - i.e, balance, income, cash.
        :type statement_type: str
        :param limit: The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.
        :type limit: int
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_reported_financials_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            statement_type=statement_type,
            limit=limit,
            fiscal_year=fiscal_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectReportedFinancials",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_reported_financials_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return.")] = None,
        statement_type: Annotated[Optional[StrictStr], Field(description="The type of financial statement - i.e, balance, income, cash.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.")] = None,
        fiscal_year: Annotated[Optional[StrictInt], Field(description="The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reported Financials

        Get financial statements as reported by the company.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return.
        :type period: str
        :param statement_type: The type of financial statement - i.e, balance, income, cash.
        :type statement_type: str
        :param limit: The number of data entries to return. Although the response object contains multiple results, because of the variance in the fields, year-to-year and quarter-to-quarter, it is recommended to view results in small chunks.
        :type limit: int
        :param fiscal_year: The specific fiscal year.  Reports do not go beyond 2008. (provider: intrinio)
        :type fiscal_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_reported_financials_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            statement_type=statement_type,
            limit=limit,
            fiscal_year=fiscal_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectReportedFinancials",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_reported_financials_serialize(
        self,
        symbol,
        provider,
        period,
        statement_type,
        limit,
        fiscal_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        if statement_type is not None:
            
            _query_params.append(('statement_type', statement_type))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if fiscal_year is not None:
            
            _query_params.append(('fiscal_year', fiscal_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/reported_financials',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_revenue_per_geography(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectRevenueGeographic:
        """Revenue Per Geography

        Get the geographic breakdown of revenue for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_revenue_per_geography_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectRevenueGeographic",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_revenue_per_geography_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectRevenueGeographic]:
        """Revenue Per Geography

        Get the geographic breakdown of revenue for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_revenue_per_geography_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectRevenueGeographic",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_revenue_per_geography_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Revenue Per Geography

        Get the geographic breakdown of revenue for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_revenue_per_geography_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectRevenueGeographic",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_revenue_per_geography_serialize(
        self,
        symbol,
        provider,
        period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/revenue_per_geography',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_revenue_per_segment(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectRevenueBusinessLine:
        """Revenue Per Segment

        Get the revenue breakdown by business segment for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_revenue_per_segment_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectRevenueBusinessLine",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_revenue_per_segment_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectRevenueBusinessLine]:
        """Revenue Per Segment

        Get the revenue breakdown by business segment for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_revenue_per_segment_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectRevenueBusinessLine",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_revenue_per_segment_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        period: Annotated[Optional[StrictStr], Field(description="Time period of the data to return. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Revenue Per Segment

        Get the revenue breakdown by business segment for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param period: Time period of the data to return. (provider: fmp)
        :type period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_revenue_per_segment_serialize(
            symbol=symbol,
            provider=provider,
            period=period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectRevenueBusinessLine",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_revenue_per_segment_serialize(
        self,
        symbol,
        provider,
        period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if period is not None:
            
            _query_params.append(('period', period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/revenue_per_segment',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_search_attributes(
        self,
        query: Annotated[StrictStr, Field(description="Query to search for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectSearchAttributes:
        """Search Attributes

        Search Intrinio data tags to search in latest or historical attributes.

        :param query: Query to search for. (required)
        :type query: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_search_attributes_serialize(
            query=query,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectSearchAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_search_attributes_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="Query to search for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectSearchAttributes]:
        """Search Attributes

        Search Intrinio data tags to search in latest or historical attributes.

        :param query: Query to search for. (required)
        :type query: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_search_attributes_serialize(
            query=query,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectSearchAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_search_attributes_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="Query to search for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Attributes

        Search Intrinio data tags to search in latest or historical attributes.

        :param query: Query to search for. (required)
        :type query: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_search_attributes_serialize(
            query=query,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectSearchAttributes",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_search_attributes_serialize(
        self,
        query,
        provider,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/search_attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_trailing_dividend_yield(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Default is 252, the number of trading days in a year.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectTrailingDividendYield:
        """Trailing Dividend Yield

        Get the 1 year trailing dividend yield for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. Default is 252, the number of trading days in a year.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_trailing_dividend_yield_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectTrailingDividendYield",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_trailing_dividend_yield_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Default is 252, the number of trading days in a year.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectTrailingDividendYield]:
        """Trailing Dividend Yield

        Get the 1 year trailing dividend yield for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. Default is 252, the number of trading days in a year.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_trailing_dividend_yield_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectTrailingDividendYield",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_trailing_dividend_yield_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Default is 252, the number of trading days in a year.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Trailing Dividend Yield

        Get the 1 year trailing dividend yield for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. Default is 252, the number of trading days in a year.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_trailing_dividend_yield_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectTrailingDividendYield",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_trailing_dividend_yield_serialize(
        self,
        symbol,
        provider,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/trailing_dividend_yield',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_fundamental_transcript(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        year: Annotated[Any, Field(description="Year of the earnings call transcript. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEarningsCallTranscript:
        """Transcript

        Get earnings call transcripts for a given company.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param year: Year of the earnings call transcript. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type year: Year
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_transcript_serialize(
            symbol=symbol,
            year=year,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEarningsCallTranscript",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_fundamental_transcript_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        year: Annotated[Any, Field(description="Year of the earnings call transcript. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEarningsCallTranscript]:
        """Transcript

        Get earnings call transcripts for a given company.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param year: Year of the earnings call transcript. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type year: Year
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_transcript_serialize(
            symbol=symbol,
            year=year,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEarningsCallTranscript",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_fundamental_transcript_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        year: Annotated[Any, Field(description="Year of the earnings call transcript. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Transcript

        Get earnings call transcripts for a given company.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param year: Year of the earnings call transcript. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type year: Year
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_fundamental_transcript_serialize(
            symbol=symbol,
            year=year,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEarningsCallTranscript",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_fundamental_transcript_serialize(
        self,
        symbol,
        year,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if year is not None:
            
            _query_params.append(('year', year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/fundamental/transcript',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_historical_market_cap(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="None")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectHistoricalMarketCap:
        """Historical Market Cap

        Get the historical market cap of a ticker symbol.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param interval: None
        :type interval: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_historical_market_cap_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            interval=interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalMarketCap",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_historical_market_cap_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="None")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectHistoricalMarketCap]:
        """Historical Market Cap

        Get the historical market cap of a ticker symbol.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param interval: None
        :type interval: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_historical_market_cap_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            interval=interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalMarketCap",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_historical_market_cap_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="None")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical Market Cap

        Get the historical market cap of a ticker symbol.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param interval: None
        :type interval: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_historical_market_cap_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            interval=interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectHistoricalMarketCap",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_historical_market_cap_serialize(
        self,
        provider,
        symbol,
        start_date,
        end_date,
        interval,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/historical_market_cap',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_market_snapshots(
        self,
        provider: StrictStr,
        market: Annotated[Optional[StrictStr], Field(description="The market to fetch data for. (provider: fmp)")] = None,
        var_date: Annotated[Optional[Any], Field(description="The date of the data. Can be a datetime or an ISO datetime string. Historical data appears to go back to mid-June 2022. Example: '2024-03-08T12:15:00+0400' (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectMarketSnapshots:
        """Market Snapshots

        Get an updated equity market snapshot. This includes price data for thousands of stocks.

        :param provider: (required)
        :type provider: str
        :param market: The market to fetch data for. (provider: fmp)
        :type market: str
        :param var_date: The date of the data. Can be a datetime or an ISO datetime string. Historical data appears to go back to mid-June 2022. Example: '2024-03-08T12:15:00+0400' (provider: intrinio)
        :type var_date: Intrinio3
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_market_snapshots_serialize(
            provider=provider,
            market=market,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectMarketSnapshots",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_market_snapshots_with_http_info(
        self,
        provider: StrictStr,
        market: Annotated[Optional[StrictStr], Field(description="The market to fetch data for. (provider: fmp)")] = None,
        var_date: Annotated[Optional[Any], Field(description="The date of the data. Can be a datetime or an ISO datetime string. Historical data appears to go back to mid-June 2022. Example: '2024-03-08T12:15:00+0400' (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectMarketSnapshots]:
        """Market Snapshots

        Get an updated equity market snapshot. This includes price data for thousands of stocks.

        :param provider: (required)
        :type provider: str
        :param market: The market to fetch data for. (provider: fmp)
        :type market: str
        :param var_date: The date of the data. Can be a datetime or an ISO datetime string. Historical data appears to go back to mid-June 2022. Example: '2024-03-08T12:15:00+0400' (provider: intrinio)
        :type var_date: Intrinio3
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_market_snapshots_serialize(
            provider=provider,
            market=market,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectMarketSnapshots",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_market_snapshots_without_preload_content(
        self,
        provider: StrictStr,
        market: Annotated[Optional[StrictStr], Field(description="The market to fetch data for. (provider: fmp)")] = None,
        var_date: Annotated[Optional[Any], Field(description="The date of the data. Can be a datetime or an ISO datetime string. Historical data appears to go back to mid-June 2022. Example: '2024-03-08T12:15:00+0400' (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Market Snapshots

        Get an updated equity market snapshot. This includes price data for thousands of stocks.

        :param provider: (required)
        :type provider: str
        :param market: The market to fetch data for. (provider: fmp)
        :type market: str
        :param var_date: The date of the data. Can be a datetime or an ISO datetime string. Historical data appears to go back to mid-June 2022. Example: '2024-03-08T12:15:00+0400' (provider: intrinio)
        :type var_date: Intrinio3
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_market_snapshots_serialize(
            provider=provider,
            market=market,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectMarketSnapshots",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_market_snapshots_serialize(
        self,
        provider,
        market,
        var_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if market is not None:
            
            _query_params.append(('market', market))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/market_snapshots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_ownership_form13f(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. A CIK or Symbol can be used.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectForm13FHR:
        """Form 13F

        Get the form 13F.  The Securities and Exchange Commission's (SEC) Form 13F is a quarterly report that is required to be filed by all institutional investment managers with at least $100 million in assets under management. Managers are required to file Form 13F within 45 days after the last day of the calendar quarter. Most funds wait until the end of this period in order to conceal their investment strategy from competitors and the public.

        :param symbol: Symbol to get data for. A CIK or Symbol can be used. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.
        :type var_date: date
        :param limit: The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_form13f_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForm13FHR",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_ownership_form13f_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. A CIK or Symbol can be used.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectForm13FHR]:
        """Form 13F

        Get the form 13F.  The Securities and Exchange Commission's (SEC) Form 13F is a quarterly report that is required to be filed by all institutional investment managers with at least $100 million in assets under management. Managers are required to file Form 13F within 45 days after the last day of the calendar quarter. Most funds wait until the end of this period in order to conceal their investment strategy from competitors and the public.

        :param symbol: Symbol to get data for. A CIK or Symbol can be used. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.
        :type var_date: date
        :param limit: The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_form13f_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForm13FHR",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_ownership_form13f_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. A CIK or Symbol can be used.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Form 13F

        Get the form 13F.  The Securities and Exchange Commission's (SEC) Form 13F is a quarterly report that is required to be filed by all institutional investment managers with at least $100 million in assets under management. Managers are required to file Form 13F within 45 days after the last day of the calendar quarter. Most funds wait until the end of this period in order to conceal their investment strategy from competitors and the public.

        :param symbol: Symbol to get data for. A CIK or Symbol can be used. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. The date represents the end of the reporting period. All form 13F-HR filings are based on the calendar year and are reported quarterly. If a date is not supplied, the most recent filing is returned. Submissions beginning 2013-06-30 are supported.
        :type var_date: date
        :param limit: The number of data entries to return. The number of previous filings to return. The date parameter takes priority over this parameter.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_form13f_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectForm13FHR",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_ownership_form13f_serialize(
        self,
        symbol,
        provider,
        var_date,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/ownership/form_13f',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_ownership_insider_trading(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        transaction_type: Annotated[Optional[StrictStr], Field(description="Type of the transaction. (provider: fmp)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: intrinio);     Start date of the data, in YYYY-MM-DD format. Wide date ranges can result in long download times. Recommended to use a smaller date range, default is 120 days ago. (provider: sec)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        ownership_type: Annotated[Optional[StrictStr], Field(description="Type of ownership. (provider: intrinio)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Field to sort by. (provider: intrinio)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Persist the data locally for future use. Default is True. Each form submission is an individual download and the SEC limits the number of concurrent downloads. This prevents the same file from being downloaded multiple times. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectInsiderTrading:
        """Insider Trading

        Get data about trading by a company's management team and board of directors.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param transaction_type: Type of the transaction. (provider: fmp)
        :type transaction_type: str
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: intrinio);     Start date of the data, in YYYY-MM-DD format. Wide date ranges can result in long download times. Recommended to use a smaller date range, default is 120 days ago. (provider: sec)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type end_date: date
        :param ownership_type: Type of ownership. (provider: intrinio)
        :type ownership_type: str
        :param sort_by: Field to sort by. (provider: intrinio)
        :type sort_by: str
        :param use_cache: Persist the data locally for future use. Default is True. Each form submission is an individual download and the SEC limits the number of concurrent downloads. This prevents the same file from being downloaded multiple times. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_insider_trading_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            transaction_type=transaction_type,
            start_date=start_date,
            end_date=end_date,
            ownership_type=ownership_type,
            sort_by=sort_by,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectInsiderTrading",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_ownership_insider_trading_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        transaction_type: Annotated[Optional[StrictStr], Field(description="Type of the transaction. (provider: fmp)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: intrinio);     Start date of the data, in YYYY-MM-DD format. Wide date ranges can result in long download times. Recommended to use a smaller date range, default is 120 days ago. (provider: sec)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        ownership_type: Annotated[Optional[StrictStr], Field(description="Type of ownership. (provider: intrinio)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Field to sort by. (provider: intrinio)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Persist the data locally for future use. Default is True. Each form submission is an individual download and the SEC limits the number of concurrent downloads. This prevents the same file from being downloaded multiple times. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectInsiderTrading]:
        """Insider Trading

        Get data about trading by a company's management team and board of directors.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param transaction_type: Type of the transaction. (provider: fmp)
        :type transaction_type: str
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: intrinio);     Start date of the data, in YYYY-MM-DD format. Wide date ranges can result in long download times. Recommended to use a smaller date range, default is 120 days ago. (provider: sec)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type end_date: date
        :param ownership_type: Type of ownership. (provider: intrinio)
        :type ownership_type: str
        :param sort_by: Field to sort by. (provider: intrinio)
        :type sort_by: str
        :param use_cache: Persist the data locally for future use. Default is True. Each form submission is an individual download and the SEC limits the number of concurrent downloads. This prevents the same file from being downloaded multiple times. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_insider_trading_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            transaction_type=transaction_type,
            start_date=start_date,
            end_date=end_date,
            ownership_type=ownership_type,
            sort_by=sort_by,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectInsiderTrading",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_ownership_insider_trading_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return.")] = None,
        transaction_type: Annotated[Optional[StrictStr], Field(description="Type of the transaction. (provider: fmp)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. (provider: intrinio);     Start date of the data, in YYYY-MM-DD format. Wide date ranges can result in long download times. Recommended to use a smaller date range, default is 120 days ago. (provider: sec)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)")] = None,
        ownership_type: Annotated[Optional[StrictStr], Field(description="Type of ownership. (provider: intrinio)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Field to sort by. (provider: intrinio)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Persist the data locally for future use. Default is True. Each form submission is an individual download and the SEC limits the number of concurrent downloads. This prevents the same file from being downloaded multiple times. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insider Trading

        Get data about trading by a company's management team and board of directors.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param limit: The number of data entries to return.
        :type limit: int
        :param transaction_type: Type of the transaction. (provider: fmp)
        :type transaction_type: str
        :param start_date: Start date of the data, in YYYY-MM-DD format. (provider: intrinio);     Start date of the data, in YYYY-MM-DD format. Wide date ranges can result in long download times. Recommended to use a smaller date range, default is 120 days ago. (provider: sec)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. (provider: intrinio, sec)
        :type end_date: date
        :param ownership_type: Type of ownership. (provider: intrinio)
        :type ownership_type: str
        :param sort_by: Field to sort by. (provider: intrinio)
        :type sort_by: str
        :param use_cache: Persist the data locally for future use. Default is True. Each form submission is an individual download and the SEC limits the number of concurrent downloads. This prevents the same file from being downloaded multiple times. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_insider_trading_serialize(
            provider=provider,
            symbol=symbol,
            limit=limit,
            transaction_type=transaction_type,
            start_date=start_date,
            end_date=end_date,
            ownership_type=ownership_type,
            sort_by=sort_by,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectInsiderTrading",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_ownership_insider_trading_serialize(
        self,
        provider,
        symbol,
        limit,
        transaction_type,
        start_date,
        end_date,
        ownership_type,
        sort_by,
        use_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if transaction_type is not None:
            
            _query_params.append(('transaction_type', transaction_type))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if ownership_type is not None:
            
            _query_params.append(('ownership_type', ownership_type))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if use_cache is not None:
            
            _query_params.append(('use_cache', use_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/ownership/insider_trading',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_ownership_institutional(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        include_current_quarter: Annotated[Optional[StrictBool], Field(description="Include current quarter data. (provider: fmp)")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectInstitutionalOwnership:
        """Institutional

        Get data about institutional ownership for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param include_current_quarter: Include current quarter data. (provider: fmp)
        :type include_current_quarter: bool
        :param var_date: A specific date to get data for. (provider: fmp)
        :type var_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_institutional_serialize(
            symbol=symbol,
            provider=provider,
            include_current_quarter=include_current_quarter,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectInstitutionalOwnership",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_ownership_institutional_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        include_current_quarter: Annotated[Optional[StrictBool], Field(description="Include current quarter data. (provider: fmp)")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectInstitutionalOwnership]:
        """Institutional

        Get data about institutional ownership for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param include_current_quarter: Include current quarter data. (provider: fmp)
        :type include_current_quarter: bool
        :param var_date: A specific date to get data for. (provider: fmp)
        :type var_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_institutional_serialize(
            symbol=symbol,
            provider=provider,
            include_current_quarter=include_current_quarter,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectInstitutionalOwnership",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_ownership_institutional_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        include_current_quarter: Annotated[Optional[StrictBool], Field(description="Include current quarter data. (provider: fmp)")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: fmp)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Institutional

        Get data about institutional ownership for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param include_current_quarter: Include current quarter data. (provider: fmp)
        :type include_current_quarter: bool
        :param var_date: A specific date to get data for. (provider: fmp)
        :type var_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_institutional_serialize(
            symbol=symbol,
            provider=provider,
            include_current_quarter=include_current_quarter,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectInstitutionalOwnership",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_ownership_institutional_serialize(
        self,
        symbol,
        provider,
        include_current_quarter,
        var_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if include_current_quarter is not None:
            
            _query_params.append(('include_current_quarter', include_current_quarter))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/ownership/institutional',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_ownership_major_holders(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number of the data to fetch.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityOwnership:
        """Major Holders

        Get data about major holders for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for.
        :type var_date: date
        :param page: Page number of the data to fetch.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_major_holders_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityOwnership",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_ownership_major_holders_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number of the data to fetch.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityOwnership]:
        """Major Holders

        Get data about major holders for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for.
        :type var_date: date
        :param page: Page number of the data to fetch.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_major_holders_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityOwnership",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_ownership_major_holders_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number of the data to fetch.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Major Holders

        Get data about major holders for a given company over time.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for.
        :type var_date: date
        :param page: Page number of the data to fetch.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_major_holders_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityOwnership",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_ownership_major_holders_serialize(
        self,
        symbol,
        provider,
        var_date,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/ownership/major_holders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_ownership_share_statistics(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectShareStatistics:
        """Share Statistics

        Get data about share float for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_share_statistics_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectShareStatistics",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_ownership_share_statistics_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectShareStatistics]:
        """Share Statistics

        Get data about share float for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_share_statistics_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectShareStatistics",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_ownership_share_statistics_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Share Statistics

        Get data about share float for a given company.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_ownership_share_statistics_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectShareStatistics",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_ownership_share_statistics_serialize(
        self,
        provider,
        symbol,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/ownership/share_statistics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_price_historical(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, polygon, tiingo, yfinance.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        interval: Annotated[Optional[Any], Field(description="Time interval of the data to return. (provider: fmp, intrinio, polygon, tiingo, yfinance)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'. (provider: intrinio)")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'. (provider: intrinio)")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone of the data, in the IANA format (Continent/City). (provider: intrinio)")] = None,
        source: Annotated[Optional[StrictStr], Field(description="The source of the data. (provider: intrinio)")] = None,
        adjustment: Annotated[Optional[Any], Field(description="The adjustment factor to apply. Default is splits only. (provider: polygon, yfinance)")] = None,
        extended_hours: Annotated[Optional[StrictBool], Field(description="Include Pre and Post market data. (provider: polygon, yfinance)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date. (provider: polygon)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: polygon)")] = None,
        include_actions: Annotated[Optional[StrictBool], Field(description="Include dividends and stock splits in results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityHistorical:
        """Historical

        Get historical price data for a given stock. This includes open, high, low, close, and volume.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, polygon, tiingo, yfinance. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param interval: Time interval of the data to return. (provider: fmp, intrinio, polygon, tiingo, yfinance)
        :type interval: FmpIntrinioPolygonTiingoYfinance
        :param start_time: Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'. (provider: intrinio)
        :type start_time: str
        :param end_time: Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'. (provider: intrinio)
        :type end_time: str
        :param timezone: Timezone of the data, in the IANA format (Continent/City). (provider: intrinio)
        :type timezone: str
        :param source: The source of the data. (provider: intrinio)
        :type source: str
        :param adjustment: The adjustment factor to apply. Default is splits only. (provider: polygon, yfinance)
        :type adjustment: PolygonYfinance
        :param extended_hours: Include Pre and Post market data. (provider: polygon, yfinance)
        :type extended_hours: bool
        :param sort: Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date. (provider: polygon)
        :type sort: str
        :param limit: The number of data entries to return. (provider: polygon)
        :type limit: int
        :param include_actions: Include dividends and stock splits in results. (provider: yfinance)
        :type include_actions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_historical_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            interval=interval,
            start_time=start_time,
            end_time=end_time,
            timezone=timezone,
            source=source,
            adjustment=adjustment,
            extended_hours=extended_hours,
            sort=sort,
            limit=limit,
            include_actions=include_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityHistorical",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_price_historical_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, polygon, tiingo, yfinance.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        interval: Annotated[Optional[Any], Field(description="Time interval of the data to return. (provider: fmp, intrinio, polygon, tiingo, yfinance)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'. (provider: intrinio)")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'. (provider: intrinio)")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone of the data, in the IANA format (Continent/City). (provider: intrinio)")] = None,
        source: Annotated[Optional[StrictStr], Field(description="The source of the data. (provider: intrinio)")] = None,
        adjustment: Annotated[Optional[Any], Field(description="The adjustment factor to apply. Default is splits only. (provider: polygon, yfinance)")] = None,
        extended_hours: Annotated[Optional[StrictBool], Field(description="Include Pre and Post market data. (provider: polygon, yfinance)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date. (provider: polygon)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: polygon)")] = None,
        include_actions: Annotated[Optional[StrictBool], Field(description="Include dividends and stock splits in results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityHistorical]:
        """Historical

        Get historical price data for a given stock. This includes open, high, low, close, and volume.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, polygon, tiingo, yfinance. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param interval: Time interval of the data to return. (provider: fmp, intrinio, polygon, tiingo, yfinance)
        :type interval: FmpIntrinioPolygonTiingoYfinance
        :param start_time: Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'. (provider: intrinio)
        :type start_time: str
        :param end_time: Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'. (provider: intrinio)
        :type end_time: str
        :param timezone: Timezone of the data, in the IANA format (Continent/City). (provider: intrinio)
        :type timezone: str
        :param source: The source of the data. (provider: intrinio)
        :type source: str
        :param adjustment: The adjustment factor to apply. Default is splits only. (provider: polygon, yfinance)
        :type adjustment: PolygonYfinance
        :param extended_hours: Include Pre and Post market data. (provider: polygon, yfinance)
        :type extended_hours: bool
        :param sort: Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date. (provider: polygon)
        :type sort: str
        :param limit: The number of data entries to return. (provider: polygon)
        :type limit: int
        :param include_actions: Include dividends and stock splits in results. (provider: yfinance)
        :type include_actions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_historical_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            interval=interval,
            start_time=start_time,
            end_time=end_time,
            timezone=timezone,
            source=source,
            adjustment=adjustment,
            extended_hours=extended_hours,
            sort=sort,
            limit=limit,
            include_actions=include_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityHistorical",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_price_historical_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, polygon, tiingo, yfinance.")],
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        interval: Annotated[Optional[Any], Field(description="Time interval of the data to return. (provider: fmp, intrinio, polygon, tiingo, yfinance)")] = None,
        start_time: Annotated[Optional[StrictStr], Field(description="Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'. (provider: intrinio)")] = None,
        end_time: Annotated[Optional[StrictStr], Field(description="Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'. (provider: intrinio)")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone of the data, in the IANA format (Continent/City). (provider: intrinio)")] = None,
        source: Annotated[Optional[StrictStr], Field(description="The source of the data. (provider: intrinio)")] = None,
        adjustment: Annotated[Optional[Any], Field(description="The adjustment factor to apply. Default is splits only. (provider: polygon, yfinance)")] = None,
        extended_hours: Annotated[Optional[StrictBool], Field(description="Include Pre and Post market data. (provider: polygon, yfinance)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date. (provider: polygon)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: polygon)")] = None,
        include_actions: Annotated[Optional[StrictBool], Field(description="Include dividends and stock splits in results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical

        Get historical price data for a given stock. This includes open, high, low, close, and volume.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, polygon, tiingo, yfinance. (required)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param interval: Time interval of the data to return. (provider: fmp, intrinio, polygon, tiingo, yfinance)
        :type interval: FmpIntrinioPolygonTiingoYfinance
        :param start_time: Return intervals starting at the specified time on the `start_date` formatted as 'HH:MM:SS'. (provider: intrinio)
        :type start_time: str
        :param end_time: Return intervals stopping at the specified time on the `end_date` formatted as 'HH:MM:SS'. (provider: intrinio)
        :type end_time: str
        :param timezone: Timezone of the data, in the IANA format (Continent/City). (provider: intrinio)
        :type timezone: str
        :param source: The source of the data. (provider: intrinio)
        :type source: str
        :param adjustment: The adjustment factor to apply. Default is splits only. (provider: polygon, yfinance)
        :type adjustment: PolygonYfinance
        :param extended_hours: Include Pre and Post market data. (provider: polygon, yfinance)
        :type extended_hours: bool
        :param sort: Sort order of the data. This impacts the results in combination with the 'limit' parameter. The results are always returned in ascending order by date. (provider: polygon)
        :type sort: str
        :param limit: The number of data entries to return. (provider: polygon)
        :type limit: int
        :param include_actions: Include dividends and stock splits in results. (provider: yfinance)
        :type include_actions: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_historical_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            interval=interval,
            start_time=start_time,
            end_time=end_time,
            timezone=timezone,
            source=source,
            adjustment=adjustment,
            extended_hours=extended_hours,
            sort=sort,
            limit=limit,
            include_actions=include_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityHistorical",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_price_historical_serialize(
        self,
        provider,
        symbol,
        start_date,
        end_date,
        interval,
        start_time,
        end_time,
        timezone,
        source,
        adjustment,
        extended_hours,
        sort,
        limit,
        include_actions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        if start_time is not None:
            
            _query_params.append(('start_time', start_time))
            
        if end_time is not None:
            
            _query_params.append(('end_time', end_time))
            
        if timezone is not None:
            
            _query_params.append(('timezone', timezone))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if adjustment is not None:
            
            _query_params.append(('adjustment', adjustment))
            
        if extended_hours is not None:
            
            _query_params.append(('extended_hours', extended_hours))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include_actions is not None:
            
            _query_params.append(('include_actions', include_actions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/price/historical',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_price_nbbo(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Up to ten million records will be returned. Pagination occurs in groups of 50,000. Remaining limit values will always return 50,000 more records unless it is the last page. High volume tickers will require multiple max requests for a single day's NBBO records. Expect stocks, like SPY, to approach 1GB in size, per day, as a raw CSV. Splitting large requests into chunks is recommended for full-day requests of high-volume symbols. (provider: polygon)")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. Use bracketed the timestamp parameters to specify exact time ranges. (provider: polygon)")] = None,
        timestamp_lt: Annotated[Optional[Any], Field(description="Query by datetime, less than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_gt: Annotated[Optional[Any], Field(description="Query by datetime, greater than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_lte: Annotated[Optional[Any], Field(description="Query by datetime, less than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_gte: Annotated[Optional[Any], Field(description="Query by datetime, greater than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityNBBO:
        """Nbbo

        Get the National Best Bid and Offer for a given stock.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. Up to ten million records will be returned. Pagination occurs in groups of 50,000. Remaining limit values will always return 50,000 more records unless it is the last page. High volume tickers will require multiple max requests for a single day's NBBO records. Expect stocks, like SPY, to approach 1GB in size, per day, as a raw CSV. Splitting large requests into chunks is recommended for full-day requests of high-volume symbols. (provider: polygon)
        :type limit: int
        :param var_date: A specific date to get data for. Use bracketed the timestamp parameters to specify exact time ranges. (provider: polygon)
        :type var_date: date
        :param timestamp_lt: Query by datetime, less than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_lt: Polygon
        :param timestamp_gt: Query by datetime, greater than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_gt: Polygon1
        :param timestamp_lte: Query by datetime, less than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_lte: Polygon2
        :param timestamp_gte: Query by datetime, greater than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_gte: Polygon3
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_nbbo_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            var_date=var_date,
            timestamp_lt=timestamp_lt,
            timestamp_gt=timestamp_gt,
            timestamp_lte=timestamp_lte,
            timestamp_gte=timestamp_gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityNBBO",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_price_nbbo_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Up to ten million records will be returned. Pagination occurs in groups of 50,000. Remaining limit values will always return 50,000 more records unless it is the last page. High volume tickers will require multiple max requests for a single day's NBBO records. Expect stocks, like SPY, to approach 1GB in size, per day, as a raw CSV. Splitting large requests into chunks is recommended for full-day requests of high-volume symbols. (provider: polygon)")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. Use bracketed the timestamp parameters to specify exact time ranges. (provider: polygon)")] = None,
        timestamp_lt: Annotated[Optional[Any], Field(description="Query by datetime, less than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_gt: Annotated[Optional[Any], Field(description="Query by datetime, greater than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_lte: Annotated[Optional[Any], Field(description="Query by datetime, less than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_gte: Annotated[Optional[Any], Field(description="Query by datetime, greater than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityNBBO]:
        """Nbbo

        Get the National Best Bid and Offer for a given stock.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. Up to ten million records will be returned. Pagination occurs in groups of 50,000. Remaining limit values will always return 50,000 more records unless it is the last page. High volume tickers will require multiple max requests for a single day's NBBO records. Expect stocks, like SPY, to approach 1GB in size, per day, as a raw CSV. Splitting large requests into chunks is recommended for full-day requests of high-volume symbols. (provider: polygon)
        :type limit: int
        :param var_date: A specific date to get data for. Use bracketed the timestamp parameters to specify exact time ranges. (provider: polygon)
        :type var_date: date
        :param timestamp_lt: Query by datetime, less than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_lt: Polygon
        :param timestamp_gt: Query by datetime, greater than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_gt: Polygon1
        :param timestamp_lte: Query by datetime, less than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_lte: Polygon2
        :param timestamp_gte: Query by datetime, greater than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_gte: Polygon3
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_nbbo_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            var_date=var_date,
            timestamp_lt=timestamp_lt,
            timestamp_gt=timestamp_gt,
            timestamp_lte=timestamp_lte,
            timestamp_gte=timestamp_gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityNBBO",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_price_nbbo_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. Up to ten million records will be returned. Pagination occurs in groups of 50,000. Remaining limit values will always return 50,000 more records unless it is the last page. High volume tickers will require multiple max requests for a single day's NBBO records. Expect stocks, like SPY, to approach 1GB in size, per day, as a raw CSV. Splitting large requests into chunks is recommended for full-day requests of high-volume symbols. (provider: polygon)")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. Use bracketed the timestamp parameters to specify exact time ranges. (provider: polygon)")] = None,
        timestamp_lt: Annotated[Optional[Any], Field(description="Query by datetime, less than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_gt: Annotated[Optional[Any], Field(description="Query by datetime, greater than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_lte: Annotated[Optional[Any], Field(description="Query by datetime, less than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        timestamp_gte: Annotated[Optional[Any], Field(description="Query by datetime, greater than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Nbbo

        Get the National Best Bid and Offer for a given stock.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit: The number of data entries to return. Up to ten million records will be returned. Pagination occurs in groups of 50,000. Remaining limit values will always return 50,000 more records unless it is the last page. High volume tickers will require multiple max requests for a single day's NBBO records. Expect stocks, like SPY, to approach 1GB in size, per day, as a raw CSV. Splitting large requests into chunks is recommended for full-day requests of high-volume symbols. (provider: polygon)
        :type limit: int
        :param var_date: A specific date to get data for. Use bracketed the timestamp parameters to specify exact time ranges. (provider: polygon)
        :type var_date: date
        :param timestamp_lt: Query by datetime, less than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_lt: Polygon
        :param timestamp_gt: Query by datetime, greater than. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_gt: Polygon1
        :param timestamp_lte: Query by datetime, less than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_lte: Polygon2
        :param timestamp_gte: Query by datetime, greater than or equal to. Either a date with the format 'YYYY-MM-DD' or a TZ-aware timestamp string, 'YYYY-MM-DDTH:M:S.000000000-04:00'. Include all nanoseconds and the 'T' between the day and hour. (provider: polygon)
        :type timestamp_gte: Polygon3
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_nbbo_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            var_date=var_date,
            timestamp_lt=timestamp_lt,
            timestamp_gt=timestamp_gt,
            timestamp_lte=timestamp_lte,
            timestamp_gte=timestamp_gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityNBBO",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_price_nbbo_serialize(
        self,
        symbol,
        provider,
        limit,
        var_date,
        timestamp_lt,
        timestamp_gt,
        timestamp_lte,
        timestamp_gte,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if timestamp_lt is not None:
            
            _query_params.append(('timestamp_lt', timestamp_lt))
            
        if timestamp_gt is not None:
            
            _query_params.append(('timestamp_gt', timestamp_gt))
            
        if timestamp_lte is not None:
            
            _query_params.append(('timestamp_lte', timestamp_lte))
            
        if timestamp_gte is not None:
            
            _query_params.append(('timestamp_gte', timestamp_gte))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/price/nbbo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_price_performance(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectPricePerformance:
        """Performance

        Get price performance data for a given stock. This includes price changes for different time periods.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_performance_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPricePerformance",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_price_performance_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectPricePerformance]:
        """Performance

        Get price performance data for a given stock. This includes price changes for different time periods.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_performance_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPricePerformance",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_price_performance_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp.")],
        provider: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Performance

        Get price performance data for a given stock. This includes price changes for different time periods.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_performance_serialize(
            symbol=symbol,
            provider=provider,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPricePerformance",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_price_performance_serialize(
        self,
        symbol,
        provider,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/price/performance',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_price_quote(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        source: Annotated[Optional[StrictStr], Field(description="Source of the data. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityQuote:
        """Quote

        Get the latest quote for a given stock. Quote includes price, volume, and other data.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param source: Source of the data. (provider: intrinio)
        :type source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_quote_serialize(
            provider=provider,
            symbol=symbol,
            source=source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityQuote",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_price_quote_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        source: Annotated[Optional[StrictStr], Field(description="Source of the data. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityQuote]:
        """Quote

        Get the latest quote for a given stock. Quote includes price, volume, and other data.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param source: Source of the data. (provider: intrinio)
        :type source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_quote_serialize(
            provider=provider,
            symbol=symbol,
            source=source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityQuote",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_price_quote_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        source: Annotated[Optional[StrictStr], Field(description="Source of the data. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Quote

        Get the latest quote for a given stock. Quote includes price, volume, and other data.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param source: Source of the data. (provider: intrinio)
        :type source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_price_quote_serialize(
            provider=provider,
            symbol=symbol,
            source=source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityQuote",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_price_quote_serialize(
        self,
        provider,
        symbol,
        source,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/price/quote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_profile(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityInfo:
        """Profile

        Get general information about a company. This includes company name, industry, sector and price data.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_profile_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityInfo",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_profile_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityInfo]:
        """Profile

        Get general information about a company. This includes company name, industry, sector and price data.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_profile_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityInfo",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_profile_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Profile

        Get general information about a company. This includes company name, industry, sector and price data.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): fmp, intrinio, yfinance. (required)
        :type symbol: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_profile_serialize(
            provider=provider,
            symbol=symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityInfo",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_profile_serialize(
        self,
        provider,
        symbol,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/profile',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_screener(
        self,
        provider: StrictStr,
        mktcap_min: Annotated[Optional[StrictInt], Field(description="Filter by market cap greater than this value. (provider: fmp, yfinance)")] = None,
        mktcap_max: Annotated[Optional[StrictInt], Field(description="Filter by market cap less than this value. (provider: fmp, yfinance)")] = None,
        price_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by price greater than this value. (provider: fmp, yfinance)")] = None,
        price_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by price less than this value. (provider: fmp, yfinance)")] = None,
        beta_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by a beta greater than this value. (provider: fmp, yfinance)")] = None,
        beta_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by a beta less than this value. (provider: fmp, yfinance)")] = None,
        volume_min: Annotated[Optional[StrictInt], Field(description="Filter by volume greater than this value. (provider: fmp, yfinance)")] = None,
        volume_max: Annotated[Optional[StrictInt], Field(description="Filter by volume less than this value. (provider: fmp, yfinance)")] = None,
        dividend_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by dividend amount greater than this value. (provider: fmp)")] = None,
        dividend_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by dividend amount less than this value. (provider: fmp)")] = None,
        is_etf: Annotated[Optional[StrictBool], Field(description="If true, returns only ETFs. (provider: fmp)")] = None,
        is_active: Annotated[Optional[StrictBool], Field(description="If false, returns only inactive tickers. (provider: fmp)")] = None,
        sector: Annotated[Optional[Any], Field(description="Filter by sector. (provider: fmp, yfinance)")] = None,
        industry: Annotated[Optional[StrictStr], Field(description="Filter by industry. (provider: fmp, yfinance)")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country, as a two-letter country code. (provider: fmp);     Filter by country, as a two-letter country code. Default is, 'us'. Use, 'all', for all countries. (provider: yfinance)")] = None,
        exchange: Annotated[Optional[Any], Field(description="Filter by exchange. (provider: fmp, yfinance)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results to return. (provider: fmp);     Limit the number of results returned. Default is, 200. Set to, 0, for all results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityScreener:
        """Screener

        Screen for companies meeting various criteria.  These criteria include market cap, price, beta, volume, and dividend yield.

        :param provider: (required)
        :type provider: str
        :param mktcap_min: Filter by market cap greater than this value. (provider: fmp, yfinance)
        :type mktcap_min: int
        :param mktcap_max: Filter by market cap less than this value. (provider: fmp, yfinance)
        :type mktcap_max: int
        :param price_min: Filter by price greater than this value. (provider: fmp, yfinance)
        :type price_min: float
        :param price_max: Filter by price less than this value. (provider: fmp, yfinance)
        :type price_max: float
        :param beta_min: Filter by a beta greater than this value. (provider: fmp, yfinance)
        :type beta_min: float
        :param beta_max: Filter by a beta less than this value. (provider: fmp, yfinance)
        :type beta_max: float
        :param volume_min: Filter by volume greater than this value. (provider: fmp, yfinance)
        :type volume_min: int
        :param volume_max: Filter by volume less than this value. (provider: fmp, yfinance)
        :type volume_max: int
        :param dividend_min: Filter by dividend amount greater than this value. (provider: fmp)
        :type dividend_min: float
        :param dividend_max: Filter by dividend amount less than this value. (provider: fmp)
        :type dividend_max: float
        :param is_etf: If true, returns only ETFs. (provider: fmp)
        :type is_etf: bool
        :param is_active: If false, returns only inactive tickers. (provider: fmp)
        :type is_active: bool
        :param sector: Filter by sector. (provider: fmp, yfinance)
        :type sector: FmpYfinance
        :param industry: Filter by industry. (provider: fmp, yfinance)
        :type industry: str
        :param country: Filter by country, as a two-letter country code. (provider: fmp);     Filter by country, as a two-letter country code. Default is, 'us'. Use, 'all', for all countries. (provider: yfinance)
        :type country: str
        :param exchange: Filter by exchange. (provider: fmp, yfinance)
        :type exchange: FmpYfinance1
        :param limit: Limit the number of results to return. (provider: fmp);     Limit the number of results returned. Default is, 200. Set to, 0, for all results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_screener_serialize(
            provider=provider,
            mktcap_min=mktcap_min,
            mktcap_max=mktcap_max,
            price_min=price_min,
            price_max=price_max,
            beta_min=beta_min,
            beta_max=beta_max,
            volume_min=volume_min,
            volume_max=volume_max,
            dividend_min=dividend_min,
            dividend_max=dividend_max,
            is_etf=is_etf,
            is_active=is_active,
            sector=sector,
            industry=industry,
            country=country,
            exchange=exchange,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityScreener",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_screener_with_http_info(
        self,
        provider: StrictStr,
        mktcap_min: Annotated[Optional[StrictInt], Field(description="Filter by market cap greater than this value. (provider: fmp, yfinance)")] = None,
        mktcap_max: Annotated[Optional[StrictInt], Field(description="Filter by market cap less than this value. (provider: fmp, yfinance)")] = None,
        price_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by price greater than this value. (provider: fmp, yfinance)")] = None,
        price_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by price less than this value. (provider: fmp, yfinance)")] = None,
        beta_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by a beta greater than this value. (provider: fmp, yfinance)")] = None,
        beta_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by a beta less than this value. (provider: fmp, yfinance)")] = None,
        volume_min: Annotated[Optional[StrictInt], Field(description="Filter by volume greater than this value. (provider: fmp, yfinance)")] = None,
        volume_max: Annotated[Optional[StrictInt], Field(description="Filter by volume less than this value. (provider: fmp, yfinance)")] = None,
        dividend_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by dividend amount greater than this value. (provider: fmp)")] = None,
        dividend_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by dividend amount less than this value. (provider: fmp)")] = None,
        is_etf: Annotated[Optional[StrictBool], Field(description="If true, returns only ETFs. (provider: fmp)")] = None,
        is_active: Annotated[Optional[StrictBool], Field(description="If false, returns only inactive tickers. (provider: fmp)")] = None,
        sector: Annotated[Optional[Any], Field(description="Filter by sector. (provider: fmp, yfinance)")] = None,
        industry: Annotated[Optional[StrictStr], Field(description="Filter by industry. (provider: fmp, yfinance)")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country, as a two-letter country code. (provider: fmp);     Filter by country, as a two-letter country code. Default is, 'us'. Use, 'all', for all countries. (provider: yfinance)")] = None,
        exchange: Annotated[Optional[Any], Field(description="Filter by exchange. (provider: fmp, yfinance)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results to return. (provider: fmp);     Limit the number of results returned. Default is, 200. Set to, 0, for all results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityScreener]:
        """Screener

        Screen for companies meeting various criteria.  These criteria include market cap, price, beta, volume, and dividend yield.

        :param provider: (required)
        :type provider: str
        :param mktcap_min: Filter by market cap greater than this value. (provider: fmp, yfinance)
        :type mktcap_min: int
        :param mktcap_max: Filter by market cap less than this value. (provider: fmp, yfinance)
        :type mktcap_max: int
        :param price_min: Filter by price greater than this value. (provider: fmp, yfinance)
        :type price_min: float
        :param price_max: Filter by price less than this value. (provider: fmp, yfinance)
        :type price_max: float
        :param beta_min: Filter by a beta greater than this value. (provider: fmp, yfinance)
        :type beta_min: float
        :param beta_max: Filter by a beta less than this value. (provider: fmp, yfinance)
        :type beta_max: float
        :param volume_min: Filter by volume greater than this value. (provider: fmp, yfinance)
        :type volume_min: int
        :param volume_max: Filter by volume less than this value. (provider: fmp, yfinance)
        :type volume_max: int
        :param dividend_min: Filter by dividend amount greater than this value. (provider: fmp)
        :type dividend_min: float
        :param dividend_max: Filter by dividend amount less than this value. (provider: fmp)
        :type dividend_max: float
        :param is_etf: If true, returns only ETFs. (provider: fmp)
        :type is_etf: bool
        :param is_active: If false, returns only inactive tickers. (provider: fmp)
        :type is_active: bool
        :param sector: Filter by sector. (provider: fmp, yfinance)
        :type sector: FmpYfinance
        :param industry: Filter by industry. (provider: fmp, yfinance)
        :type industry: str
        :param country: Filter by country, as a two-letter country code. (provider: fmp);     Filter by country, as a two-letter country code. Default is, 'us'. Use, 'all', for all countries. (provider: yfinance)
        :type country: str
        :param exchange: Filter by exchange. (provider: fmp, yfinance)
        :type exchange: FmpYfinance1
        :param limit: Limit the number of results to return. (provider: fmp);     Limit the number of results returned. Default is, 200. Set to, 0, for all results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_screener_serialize(
            provider=provider,
            mktcap_min=mktcap_min,
            mktcap_max=mktcap_max,
            price_min=price_min,
            price_max=price_max,
            beta_min=beta_min,
            beta_max=beta_max,
            volume_min=volume_min,
            volume_max=volume_max,
            dividend_min=dividend_min,
            dividend_max=dividend_max,
            is_etf=is_etf,
            is_active=is_active,
            sector=sector,
            industry=industry,
            country=country,
            exchange=exchange,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityScreener",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_screener_without_preload_content(
        self,
        provider: StrictStr,
        mktcap_min: Annotated[Optional[StrictInt], Field(description="Filter by market cap greater than this value. (provider: fmp, yfinance)")] = None,
        mktcap_max: Annotated[Optional[StrictInt], Field(description="Filter by market cap less than this value. (provider: fmp, yfinance)")] = None,
        price_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by price greater than this value. (provider: fmp, yfinance)")] = None,
        price_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by price less than this value. (provider: fmp, yfinance)")] = None,
        beta_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by a beta greater than this value. (provider: fmp, yfinance)")] = None,
        beta_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by a beta less than this value. (provider: fmp, yfinance)")] = None,
        volume_min: Annotated[Optional[StrictInt], Field(description="Filter by volume greater than this value. (provider: fmp, yfinance)")] = None,
        volume_max: Annotated[Optional[StrictInt], Field(description="Filter by volume less than this value. (provider: fmp, yfinance)")] = None,
        dividend_min: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by dividend amount greater than this value. (provider: fmp)")] = None,
        dividend_max: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by dividend amount less than this value. (provider: fmp)")] = None,
        is_etf: Annotated[Optional[StrictBool], Field(description="If true, returns only ETFs. (provider: fmp)")] = None,
        is_active: Annotated[Optional[StrictBool], Field(description="If false, returns only inactive tickers. (provider: fmp)")] = None,
        sector: Annotated[Optional[Any], Field(description="Filter by sector. (provider: fmp, yfinance)")] = None,
        industry: Annotated[Optional[StrictStr], Field(description="Filter by industry. (provider: fmp, yfinance)")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Filter by country, as a two-letter country code. (provider: fmp);     Filter by country, as a two-letter country code. Default is, 'us'. Use, 'all', for all countries. (provider: yfinance)")] = None,
        exchange: Annotated[Optional[Any], Field(description="Filter by exchange. (provider: fmp, yfinance)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of results to return. (provider: fmp);     Limit the number of results returned. Default is, 200. Set to, 0, for all results. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Screener

        Screen for companies meeting various criteria.  These criteria include market cap, price, beta, volume, and dividend yield.

        :param provider: (required)
        :type provider: str
        :param mktcap_min: Filter by market cap greater than this value. (provider: fmp, yfinance)
        :type mktcap_min: int
        :param mktcap_max: Filter by market cap less than this value. (provider: fmp, yfinance)
        :type mktcap_max: int
        :param price_min: Filter by price greater than this value. (provider: fmp, yfinance)
        :type price_min: float
        :param price_max: Filter by price less than this value. (provider: fmp, yfinance)
        :type price_max: float
        :param beta_min: Filter by a beta greater than this value. (provider: fmp, yfinance)
        :type beta_min: float
        :param beta_max: Filter by a beta less than this value. (provider: fmp, yfinance)
        :type beta_max: float
        :param volume_min: Filter by volume greater than this value. (provider: fmp, yfinance)
        :type volume_min: int
        :param volume_max: Filter by volume less than this value. (provider: fmp, yfinance)
        :type volume_max: int
        :param dividend_min: Filter by dividend amount greater than this value. (provider: fmp)
        :type dividend_min: float
        :param dividend_max: Filter by dividend amount less than this value. (provider: fmp)
        :type dividend_max: float
        :param is_etf: If true, returns only ETFs. (provider: fmp)
        :type is_etf: bool
        :param is_active: If false, returns only inactive tickers. (provider: fmp)
        :type is_active: bool
        :param sector: Filter by sector. (provider: fmp, yfinance)
        :type sector: FmpYfinance
        :param industry: Filter by industry. (provider: fmp, yfinance)
        :type industry: str
        :param country: Filter by country, as a two-letter country code. (provider: fmp);     Filter by country, as a two-letter country code. Default is, 'us'. Use, 'all', for all countries. (provider: yfinance)
        :type country: str
        :param exchange: Filter by exchange. (provider: fmp, yfinance)
        :type exchange: FmpYfinance1
        :param limit: Limit the number of results to return. (provider: fmp);     Limit the number of results returned. Default is, 200. Set to, 0, for all results. (provider: yfinance)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_screener_serialize(
            provider=provider,
            mktcap_min=mktcap_min,
            mktcap_max=mktcap_max,
            price_min=price_min,
            price_max=price_max,
            beta_min=beta_min,
            beta_max=beta_max,
            volume_min=volume_min,
            volume_max=volume_max,
            dividend_min=dividend_min,
            dividend_max=dividend_max,
            is_etf=is_etf,
            is_active=is_active,
            sector=sector,
            industry=industry,
            country=country,
            exchange=exchange,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityScreener",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_screener_serialize(
        self,
        provider,
        mktcap_min,
        mktcap_max,
        price_min,
        price_max,
        beta_min,
        beta_max,
        volume_min,
        volume_max,
        dividend_min,
        dividend_max,
        is_etf,
        is_active,
        sector,
        industry,
        country,
        exchange,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if mktcap_min is not None:
            
            _query_params.append(('mktcap_min', mktcap_min))
            
        if mktcap_max is not None:
            
            _query_params.append(('mktcap_max', mktcap_max))
            
        if price_min is not None:
            
            _query_params.append(('price_min', price_min))
            
        if price_max is not None:
            
            _query_params.append(('price_max', price_max))
            
        if beta_min is not None:
            
            _query_params.append(('beta_min', beta_min))
            
        if beta_max is not None:
            
            _query_params.append(('beta_max', beta_max))
            
        if volume_min is not None:
            
            _query_params.append(('volume_min', volume_min))
            
        if volume_max is not None:
            
            _query_params.append(('volume_max', volume_max))
            
        if dividend_min is not None:
            
            _query_params.append(('dividend_min', dividend_min))
            
        if dividend_max is not None:
            
            _query_params.append(('dividend_max', dividend_max))
            
        if is_etf is not None:
            
            _query_params.append(('is_etf', is_etf))
            
        if is_active is not None:
            
            _query_params.append(('is_active', is_active))
            
        if sector is not None:
            
            _query_params.append(('sector', sector))
            
        if industry is not None:
            
            _query_params.append(('industry', industry))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if exchange is not None:
            
            _query_params.append(('exchange', exchange))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/screener',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_search(
        self,
        provider: StrictStr,
        query: Annotated[Optional[StrictStr], Field(description="Search query.")] = None,
        is_symbol: Annotated[Optional[StrictBool], Field(description="Whether to search by ticker symbol.")] = None,
        active: Annotated[Optional[StrictBool], Field(description="When true, return companies that are actively traded (having stock prices within the past 14 days). When false, return companies that are not actively traded or never have been traded. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: intrinio)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether to use the cache or not. (provider: sec)")] = None,
        is_fund: Annotated[Optional[StrictBool], Field(description="Whether to direct the search to the list of mutual funds and ETFs. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquitySearch:
        """Search

        Search for stock symbol, CIK, LEI, or company name.

        :param provider: (required)
        :type provider: str
        :param query: Search query.
        :type query: str
        :param is_symbol: Whether to search by ticker symbol.
        :type is_symbol: bool
        :param active: When true, return companies that are actively traded (having stock prices within the past 14 days). When false, return companies that are not actively traded or never have been traded. (provider: intrinio)
        :type active: bool
        :param limit: The number of data entries to return. (provider: intrinio)
        :type limit: int
        :param use_cache: Whether to use the cache or not. (provider: sec)
        :type use_cache: bool
        :param is_fund: Whether to direct the search to the list of mutual funds and ETFs. (provider: sec)
        :type is_fund: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_search_serialize(
            provider=provider,
            query=query,
            is_symbol=is_symbol,
            active=active,
            limit=limit,
            use_cache=use_cache,
            is_fund=is_fund,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquitySearch",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_search_with_http_info(
        self,
        provider: StrictStr,
        query: Annotated[Optional[StrictStr], Field(description="Search query.")] = None,
        is_symbol: Annotated[Optional[StrictBool], Field(description="Whether to search by ticker symbol.")] = None,
        active: Annotated[Optional[StrictBool], Field(description="When true, return companies that are actively traded (having stock prices within the past 14 days). When false, return companies that are not actively traded or never have been traded. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: intrinio)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether to use the cache or not. (provider: sec)")] = None,
        is_fund: Annotated[Optional[StrictBool], Field(description="Whether to direct the search to the list of mutual funds and ETFs. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquitySearch]:
        """Search

        Search for stock symbol, CIK, LEI, or company name.

        :param provider: (required)
        :type provider: str
        :param query: Search query.
        :type query: str
        :param is_symbol: Whether to search by ticker symbol.
        :type is_symbol: bool
        :param active: When true, return companies that are actively traded (having stock prices within the past 14 days). When false, return companies that are not actively traded or never have been traded. (provider: intrinio)
        :type active: bool
        :param limit: The number of data entries to return. (provider: intrinio)
        :type limit: int
        :param use_cache: Whether to use the cache or not. (provider: sec)
        :type use_cache: bool
        :param is_fund: Whether to direct the search to the list of mutual funds and ETFs. (provider: sec)
        :type is_fund: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_search_serialize(
            provider=provider,
            query=query,
            is_symbol=is_symbol,
            active=active,
            limit=limit,
            use_cache=use_cache,
            is_fund=is_fund,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquitySearch",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_search_without_preload_content(
        self,
        provider: StrictStr,
        query: Annotated[Optional[StrictStr], Field(description="Search query.")] = None,
        is_symbol: Annotated[Optional[StrictBool], Field(description="Whether to search by ticker symbol.")] = None,
        active: Annotated[Optional[StrictBool], Field(description="When true, return companies that are actively traded (having stock prices within the past 14 days). When false, return companies that are not actively traded or never have been traded. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. (provider: intrinio)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether to use the cache or not. (provider: sec)")] = None,
        is_fund: Annotated[Optional[StrictBool], Field(description="Whether to direct the search to the list of mutual funds and ETFs. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search

        Search for stock symbol, CIK, LEI, or company name.

        :param provider: (required)
        :type provider: str
        :param query: Search query.
        :type query: str
        :param is_symbol: Whether to search by ticker symbol.
        :type is_symbol: bool
        :param active: When true, return companies that are actively traded (having stock prices within the past 14 days). When false, return companies that are not actively traded or never have been traded. (provider: intrinio)
        :type active: bool
        :param limit: The number of data entries to return. (provider: intrinio)
        :type limit: int
        :param use_cache: Whether to use the cache or not. (provider: sec)
        :type use_cache: bool
        :param is_fund: Whether to direct the search to the list of mutual funds and ETFs. (provider: sec)
        :type is_fund: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_search_serialize(
            provider=provider,
            query=query,
            is_symbol=is_symbol,
            active=active,
            limit=limit,
            use_cache=use_cache,
            is_fund=is_fund,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquitySearch",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_search_serialize(
        self,
        provider,
        query,
        is_symbol,
        active,
        limit,
        use_cache,
        is_fund,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if is_symbol is not None:
            
            _query_params.append(('is_symbol', is_symbol))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if use_cache is not None:
            
            _query_params.append(('use_cache', use_cache))
            
        if is_fund is not None:
            
            _query_params.append(('is_fund', is_fund))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def equity_shorts_fails_to_deliver(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="         Limit the number of reports to parse, from most recent.         Approximately 24 reports per year, going back to 2009.          (provider: sec)")] = None,
        skip_reports: Annotated[Optional[StrictInt], Field(description="         Skip N number of reports from current. A value of 1 will skip the most recent report.          (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether or not to use cache for the request, default is True. Each reporting period is a separate URL, new reports will be added to the cache. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectEquityFTD:
        """Fails To Deliver

        Get reported Fail-to-deliver (FTD) data.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit:          Limit the number of reports to parse, from most recent.         Approximately 24 reports per year, going back to 2009.          (provider: sec)
        :type limit: int
        :param skip_reports:          Skip N number of reports from current. A value of 1 will skip the most recent report.          (provider: sec)
        :type skip_reports: int
        :param use_cache: Whether or not to use cache for the request, default is True. Each reporting period is a separate URL, new reports will be added to the cache. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_shorts_fails_to_deliver_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            skip_reports=skip_reports,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityFTD",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def equity_shorts_fails_to_deliver_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="         Limit the number of reports to parse, from most recent.         Approximately 24 reports per year, going back to 2009.          (provider: sec)")] = None,
        skip_reports: Annotated[Optional[StrictInt], Field(description="         Skip N number of reports from current. A value of 1 will skip the most recent report.          (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether or not to use cache for the request, default is True. Each reporting period is a separate URL, new reports will be added to the cache. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectEquityFTD]:
        """Fails To Deliver

        Get reported Fail-to-deliver (FTD) data.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit:          Limit the number of reports to parse, from most recent.         Approximately 24 reports per year, going back to 2009.          (provider: sec)
        :type limit: int
        :param skip_reports:          Skip N number of reports from current. A value of 1 will skip the most recent report.          (provider: sec)
        :type skip_reports: int
        :param use_cache: Whether or not to use cache for the request, default is True. Each reporting period is a separate URL, new reports will be added to the cache. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_shorts_fails_to_deliver_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            skip_reports=skip_reports,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityFTD",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def equity_shorts_fails_to_deliver_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        limit: Annotated[Optional[StrictInt], Field(description="         Limit the number of reports to parse, from most recent.         Approximately 24 reports per year, going back to 2009.          (provider: sec)")] = None,
        skip_reports: Annotated[Optional[StrictInt], Field(description="         Skip N number of reports from current. A value of 1 will skip the most recent report.          (provider: sec)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Whether or not to use cache for the request, default is True. Each reporting period is a separate URL, new reports will be added to the cache. (provider: sec)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fails To Deliver

        Get reported Fail-to-deliver (FTD) data.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param limit:          Limit the number of reports to parse, from most recent.         Approximately 24 reports per year, going back to 2009.          (provider: sec)
        :type limit: int
        :param skip_reports:          Skip N number of reports from current. A value of 1 will skip the most recent report.          (provider: sec)
        :type skip_reports: int
        :param use_cache: Whether or not to use cache for the request, default is True. Each reporting period is a separate URL, new reports will be added to the cache. (provider: sec)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._equity_shorts_fails_to_deliver_serialize(
            symbol=symbol,
            provider=provider,
            limit=limit,
            skip_reports=skip_reports,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectEquityFTD",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _equity_shorts_fails_to_deliver_serialize(
        self,
        symbol,
        provider,
        limit,
        skip_reports,
        use_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if skip_reports is not None:
            
            _query_params.append(('skip_reports', skip_reports))
            
        if use_cache is not None:
            
            _query_params.append(('use_cache', use_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/equity/shorts/fails_to_deliver',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


