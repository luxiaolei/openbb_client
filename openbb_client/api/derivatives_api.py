# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, Optional
from typing_extensions import Annotated
from openbb_client.models.ob_bject_futures_curve import OBBjectFuturesCurve
from openbb_client.models.ob_bject_futures_historical import OBBjectFuturesHistorical
from openbb_client.models.ob_bject_options_chains import OBBjectOptionsChains
from openbb_client.models.ob_bject_options_snapshots import OBBjectOptionsSnapshots
from openbb_client.models.ob_bject_options_unusual import OBBjectOptionsUnusual

from openbb_client.api_client import ApiClient, RequestSerialized
from openbb_client.api_response import ApiResponse
from openbb_client.rest import RESTResponseType


class DerivativesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def derivatives_futures_curve(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[Any], Field(description="A specific date to get data for. Multiple comma separated items allowed for provider(s): yfinance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectFuturesCurve:
        """Curve

        Futures Term Structure, current or historical.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. Multiple comma separated items allowed for provider(s): yfinance.
        :type var_date: ModelDate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_futures_curve_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFuturesCurve",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def derivatives_futures_curve_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[Any], Field(description="A specific date to get data for. Multiple comma separated items allowed for provider(s): yfinance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectFuturesCurve]:
        """Curve

        Futures Term Structure, current or historical.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. Multiple comma separated items allowed for provider(s): yfinance.
        :type var_date: ModelDate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_futures_curve_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFuturesCurve",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def derivatives_futures_curve_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[Any], Field(description="A specific date to get data for. Multiple comma separated items allowed for provider(s): yfinance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Curve

        Futures Term Structure, current or historical.

        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param var_date: A specific date to get data for. Multiple comma separated items allowed for provider(s): yfinance.
        :type var_date: ModelDate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_futures_curve_serialize(
            symbol=symbol,
            provider=provider,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFuturesCurve",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _derivatives_futures_curve_serialize(
        self,
        symbol,
        provider,
        var_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/derivatives/futures/curve',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def derivatives_futures_historical(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance.")],
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        expiration: Annotated[Optional[StrictStr], Field(description="Future expiry date with format YYYY-MM")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="Time interval of the data to return. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectFuturesHistorical:
        """Historical

        Historical futures prices.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param expiration: Future expiry date with format YYYY-MM
        :type expiration: str
        :param interval: Time interval of the data to return. (provider: yfinance)
        :type interval: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_futures_historical_serialize(
            symbol=symbol,
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            expiration=expiration,
            interval=interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFuturesHistorical",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def derivatives_futures_historical_with_http_info(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance.")],
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        expiration: Annotated[Optional[StrictStr], Field(description="Future expiry date with format YYYY-MM")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="Time interval of the data to return. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectFuturesHistorical]:
        """Historical

        Historical futures prices.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param expiration: Future expiry date with format YYYY-MM
        :type expiration: str
        :param interval: Time interval of the data to return. (provider: yfinance)
        :type interval: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_futures_historical_serialize(
            symbol=symbol,
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            expiration=expiration,
            interval=interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFuturesHistorical",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def derivatives_futures_historical_without_preload_content(
        self,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance.")],
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        expiration: Annotated[Optional[StrictStr], Field(description="Future expiry date with format YYYY-MM")] = None,
        interval: Annotated[Optional[StrictStr], Field(description="Time interval of the data to return. (provider: yfinance)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical

        Historical futures prices.

        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): yfinance. (required)
        :type symbol: str
        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param expiration: Future expiry date with format YYYY-MM
        :type expiration: str
        :param interval: Time interval of the data to return. (provider: yfinance)
        :type interval: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_futures_historical_serialize(
            symbol=symbol,
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            expiration=expiration,
            interval=interval,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectFuturesHistorical",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _derivatives_futures_historical_serialize(
        self,
        symbol,
        provider,
        start_date,
        end_date,
        expiration,
        interval,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if expiration is not None:
            
            _query_params.append(('expiration', expiration))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/derivatives/futures/historical',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def derivatives_options_chains(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        delay: Annotated[Optional[StrictStr], Field(description="Whether to return delayed, realtime, or eod data. (provider: intrinio)")] = None,
        var_date: Annotated[Optional[date], Field(description="The end-of-day date for options chains data. (provider: intrinio)")] = None,
        option_type: Annotated[Optional[StrictStr], Field(description="The option type, call or put, 'None' is both (default). (provider: intrinio)")] = None,
        moneyness: Annotated[Optional[StrictStr], Field(description="Return only contracts that are in or out of the money, default is 'all'. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        strike_gt: Annotated[Optional[StrictInt], Field(description="Return options with a strike price greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        strike_lt: Annotated[Optional[StrictInt], Field(description="Return options with a strike price less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        volume_gt: Annotated[Optional[StrictInt], Field(description="Return options with a volume greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        volume_lt: Annotated[Optional[StrictInt], Field(description="Return options with a volume less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        oi_gt: Annotated[Optional[StrictInt], Field(description="Return options with an open interest greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        oi_lt: Annotated[Optional[StrictInt], Field(description="Return options with an open interest less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        model: Annotated[Optional[StrictStr], Field(description="The pricing model to use for options chains data, default is 'black_scholes'. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        show_extended_price: Annotated[Optional[StrictBool], Field(description="Whether to include OHLC type fields, default is True. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        include_related_symbols: Annotated[Optional[StrictBool], Field(description="Include related symbols that end in a 1 or 2 because of a corporate action, default is False. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectOptionsChains:
        """Chains

        Get the complete options chain for a ticker.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param delay: Whether to return delayed, realtime, or eod data. (provider: intrinio)
        :type delay: str
        :param var_date: The end-of-day date for options chains data. (provider: intrinio)
        :type var_date: date
        :param option_type: The option type, call or put, 'None' is both (default). (provider: intrinio)
        :type option_type: str
        :param moneyness: Return only contracts that are in or out of the money, default is 'all'. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type moneyness: str
        :param strike_gt: Return options with a strike price greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type strike_gt: int
        :param strike_lt: Return options with a strike price less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type strike_lt: int
        :param volume_gt: Return options with a volume greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type volume_gt: int
        :param volume_lt: Return options with a volume less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type volume_lt: int
        :param oi_gt: Return options with an open interest greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type oi_gt: int
        :param oi_lt: Return options with an open interest less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type oi_lt: int
        :param model: The pricing model to use for options chains data, default is 'black_scholes'. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type model: str
        :param show_extended_price: Whether to include OHLC type fields, default is True. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type show_extended_price: bool
        :param include_related_symbols: Include related symbols that end in a 1 or 2 because of a corporate action, default is False. (provider: intrinio)
        :type include_related_symbols: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_chains_serialize(
            provider=provider,
            symbol=symbol,
            delay=delay,
            var_date=var_date,
            option_type=option_type,
            moneyness=moneyness,
            strike_gt=strike_gt,
            strike_lt=strike_lt,
            volume_gt=volume_gt,
            volume_lt=volume_lt,
            oi_gt=oi_gt,
            oi_lt=oi_lt,
            model=model,
            show_extended_price=show_extended_price,
            include_related_symbols=include_related_symbols,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsChains",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def derivatives_options_chains_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        delay: Annotated[Optional[StrictStr], Field(description="Whether to return delayed, realtime, or eod data. (provider: intrinio)")] = None,
        var_date: Annotated[Optional[date], Field(description="The end-of-day date for options chains data. (provider: intrinio)")] = None,
        option_type: Annotated[Optional[StrictStr], Field(description="The option type, call or put, 'None' is both (default). (provider: intrinio)")] = None,
        moneyness: Annotated[Optional[StrictStr], Field(description="Return only contracts that are in or out of the money, default is 'all'. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        strike_gt: Annotated[Optional[StrictInt], Field(description="Return options with a strike price greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        strike_lt: Annotated[Optional[StrictInt], Field(description="Return options with a strike price less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        volume_gt: Annotated[Optional[StrictInt], Field(description="Return options with a volume greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        volume_lt: Annotated[Optional[StrictInt], Field(description="Return options with a volume less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        oi_gt: Annotated[Optional[StrictInt], Field(description="Return options with an open interest greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        oi_lt: Annotated[Optional[StrictInt], Field(description="Return options with an open interest less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        model: Annotated[Optional[StrictStr], Field(description="The pricing model to use for options chains data, default is 'black_scholes'. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        show_extended_price: Annotated[Optional[StrictBool], Field(description="Whether to include OHLC type fields, default is True. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        include_related_symbols: Annotated[Optional[StrictBool], Field(description="Include related symbols that end in a 1 or 2 because of a corporate action, default is False. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectOptionsChains]:
        """Chains

        Get the complete options chain for a ticker.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param delay: Whether to return delayed, realtime, or eod data. (provider: intrinio)
        :type delay: str
        :param var_date: The end-of-day date for options chains data. (provider: intrinio)
        :type var_date: date
        :param option_type: The option type, call or put, 'None' is both (default). (provider: intrinio)
        :type option_type: str
        :param moneyness: Return only contracts that are in or out of the money, default is 'all'. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type moneyness: str
        :param strike_gt: Return options with a strike price greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type strike_gt: int
        :param strike_lt: Return options with a strike price less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type strike_lt: int
        :param volume_gt: Return options with a volume greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type volume_gt: int
        :param volume_lt: Return options with a volume less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type volume_lt: int
        :param oi_gt: Return options with an open interest greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type oi_gt: int
        :param oi_lt: Return options with an open interest less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type oi_lt: int
        :param model: The pricing model to use for options chains data, default is 'black_scholes'. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type model: str
        :param show_extended_price: Whether to include OHLC type fields, default is True. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type show_extended_price: bool
        :param include_related_symbols: Include related symbols that end in a 1 or 2 because of a corporate action, default is False. (provider: intrinio)
        :type include_related_symbols: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_chains_serialize(
            provider=provider,
            symbol=symbol,
            delay=delay,
            var_date=var_date,
            option_type=option_type,
            moneyness=moneyness,
            strike_gt=strike_gt,
            strike_lt=strike_lt,
            volume_gt=volume_gt,
            volume_lt=volume_lt,
            oi_gt=oi_gt,
            oi_lt=oi_lt,
            model=model,
            show_extended_price=show_extended_price,
            include_related_symbols=include_related_symbols,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsChains",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def derivatives_options_chains_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[StrictStr, Field(description="Symbol to get data for.")],
        delay: Annotated[Optional[StrictStr], Field(description="Whether to return delayed, realtime, or eod data. (provider: intrinio)")] = None,
        var_date: Annotated[Optional[date], Field(description="The end-of-day date for options chains data. (provider: intrinio)")] = None,
        option_type: Annotated[Optional[StrictStr], Field(description="The option type, call or put, 'None' is both (default). (provider: intrinio)")] = None,
        moneyness: Annotated[Optional[StrictStr], Field(description="Return only contracts that are in or out of the money, default is 'all'. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        strike_gt: Annotated[Optional[StrictInt], Field(description="Return options with a strike price greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        strike_lt: Annotated[Optional[StrictInt], Field(description="Return options with a strike price less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        volume_gt: Annotated[Optional[StrictInt], Field(description="Return options with a volume greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        volume_lt: Annotated[Optional[StrictInt], Field(description="Return options with a volume less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        oi_gt: Annotated[Optional[StrictInt], Field(description="Return options with an open interest greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        oi_lt: Annotated[Optional[StrictInt], Field(description="Return options with an open interest less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        model: Annotated[Optional[StrictStr], Field(description="The pricing model to use for options chains data, default is 'black_scholes'. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        show_extended_price: Annotated[Optional[StrictBool], Field(description="Whether to include OHLC type fields, default is True. Parameter is ignored when a date is supplied. (provider: intrinio)")] = None,
        include_related_symbols: Annotated[Optional[StrictBool], Field(description="Include related symbols that end in a 1 or 2 because of a corporate action, default is False. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Chains

        Get the complete options chain for a ticker.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. (required)
        :type symbol: str
        :param delay: Whether to return delayed, realtime, or eod data. (provider: intrinio)
        :type delay: str
        :param var_date: The end-of-day date for options chains data. (provider: intrinio)
        :type var_date: date
        :param option_type: The option type, call or put, 'None' is both (default). (provider: intrinio)
        :type option_type: str
        :param moneyness: Return only contracts that are in or out of the money, default is 'all'. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type moneyness: str
        :param strike_gt: Return options with a strike price greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type strike_gt: int
        :param strike_lt: Return options with a strike price less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type strike_lt: int
        :param volume_gt: Return options with a volume greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type volume_gt: int
        :param volume_lt: Return options with a volume less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type volume_lt: int
        :param oi_gt: Return options with an open interest greater than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type oi_gt: int
        :param oi_lt: Return options with an open interest less than the given value. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type oi_lt: int
        :param model: The pricing model to use for options chains data, default is 'black_scholes'. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type model: str
        :param show_extended_price: Whether to include OHLC type fields, default is True. Parameter is ignored when a date is supplied. (provider: intrinio)
        :type show_extended_price: bool
        :param include_related_symbols: Include related symbols that end in a 1 or 2 because of a corporate action, default is False. (provider: intrinio)
        :type include_related_symbols: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_chains_serialize(
            provider=provider,
            symbol=symbol,
            delay=delay,
            var_date=var_date,
            option_type=option_type,
            moneyness=moneyness,
            strike_gt=strike_gt,
            strike_lt=strike_lt,
            volume_gt=volume_gt,
            volume_lt=volume_lt,
            oi_gt=oi_gt,
            oi_lt=oi_lt,
            model=model,
            show_extended_price=show_extended_price,
            include_related_symbols=include_related_symbols,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsChains",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _derivatives_options_chains_serialize(
        self,
        provider,
        symbol,
        delay,
        var_date,
        option_type,
        moneyness,
        strike_gt,
        strike_lt,
        volume_gt,
        volume_lt,
        oi_gt,
        oi_lt,
        model,
        show_extended_price,
        include_related_symbols,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if delay is not None:
            
            _query_params.append(('delay', delay))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if option_type is not None:
            
            _query_params.append(('option_type', option_type))
            
        if moneyness is not None:
            
            _query_params.append(('moneyness', moneyness))
            
        if strike_gt is not None:
            
            _query_params.append(('strike_gt', strike_gt))
            
        if strike_lt is not None:
            
            _query_params.append(('strike_lt', strike_lt))
            
        if volume_gt is not None:
            
            _query_params.append(('volume_gt', volume_gt))
            
        if volume_lt is not None:
            
            _query_params.append(('volume_lt', volume_lt))
            
        if oi_gt is not None:
            
            _query_params.append(('oi_gt', oi_gt))
            
        if oi_lt is not None:
            
            _query_params.append(('oi_lt', oi_lt))
            
        if model is not None:
            
            _query_params.append(('model', model))
            
        if show_extended_price is not None:
            
            _query_params.append(('show_extended_price', show_extended_price))
            
        if include_related_symbols is not None:
            
            _query_params.append(('include_related_symbols', include_related_symbols))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/derivatives/options/chains',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def derivatives_options_snapshots(
        self,
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[Any], Field(description="The date of the data. Can be a datetime or an ISO datetime string. Data appears to go back to around 2022-06-01 Example: '2024-03-08T12:15:00+0400' (provider: intrinio)")] = None,
        only_traded: Annotated[Optional[StrictBool], Field(description="Only include options that have been traded during the session, default is True. Setting to false will dramatically increase the size of the response - use with caution. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectOptionsSnapshots:
        """Snapshots

        Get a snapshot of the options market universe.

        :param provider:
        :type provider: str
        :param var_date: The date of the data. Can be a datetime or an ISO datetime string. Data appears to go back to around 2022-06-01 Example: '2024-03-08T12:15:00+0400' (provider: intrinio)
        :type var_date: Intrinio2
        :param only_traded: Only include options that have been traded during the session, default is True. Setting to false will dramatically increase the size of the response - use with caution. (provider: intrinio)
        :type only_traded: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_snapshots_serialize(
            provider=provider,
            var_date=var_date,
            only_traded=only_traded,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsSnapshots",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def derivatives_options_snapshots_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[Any], Field(description="The date of the data. Can be a datetime or an ISO datetime string. Data appears to go back to around 2022-06-01 Example: '2024-03-08T12:15:00+0400' (provider: intrinio)")] = None,
        only_traded: Annotated[Optional[StrictBool], Field(description="Only include options that have been traded during the session, default is True. Setting to false will dramatically increase the size of the response - use with caution. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectOptionsSnapshots]:
        """Snapshots

        Get a snapshot of the options market universe.

        :param provider:
        :type provider: str
        :param var_date: The date of the data. Can be a datetime or an ISO datetime string. Data appears to go back to around 2022-06-01 Example: '2024-03-08T12:15:00+0400' (provider: intrinio)
        :type var_date: Intrinio2
        :param only_traded: Only include options that have been traded during the session, default is True. Setting to false will dramatically increase the size of the response - use with caution. (provider: intrinio)
        :type only_traded: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_snapshots_serialize(
            provider=provider,
            var_date=var_date,
            only_traded=only_traded,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsSnapshots",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def derivatives_options_snapshots_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        var_date: Annotated[Optional[Any], Field(description="The date of the data. Can be a datetime or an ISO datetime string. Data appears to go back to around 2022-06-01 Example: '2024-03-08T12:15:00+0400' (provider: intrinio)")] = None,
        only_traded: Annotated[Optional[StrictBool], Field(description="Only include options that have been traded during the session, default is True. Setting to false will dramatically increase the size of the response - use with caution. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Snapshots

        Get a snapshot of the options market universe.

        :param provider:
        :type provider: str
        :param var_date: The date of the data. Can be a datetime or an ISO datetime string. Data appears to go back to around 2022-06-01 Example: '2024-03-08T12:15:00+0400' (provider: intrinio)
        :type var_date: Intrinio2
        :param only_traded: Only include options that have been traded during the session, default is True. Setting to false will dramatically increase the size of the response - use with caution. (provider: intrinio)
        :type only_traded: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_snapshots_serialize(
            provider=provider,
            var_date=var_date,
            only_traded=only_traded,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsSnapshots",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _derivatives_options_snapshots_serialize(
        self,
        provider,
        var_date,
        only_traded,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if only_traded is not None:
            
            _query_params.append(('only_traded', only_traded))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/derivatives/options/snapshots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def derivatives_options_unusual(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. (the underlying symbol)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. If no symbol is supplied, requests are only allowed for a single date. Use the start_date for the target date. Intrinio appears to have data beginning Feb/2022, but is unclear when it actually began. (provider: intrinio)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. If a symbol is not supplied, do not include an end date. (provider: intrinio)")] = None,
        trade_type: Annotated[Optional[StrictStr], Field(description="The type of unusual activity to query for. (provider: intrinio)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="The sentiment type to query for. (provider: intrinio)")] = None,
        min_value: Annotated[Optional[Any], Field(description="The inclusive minimum total value for the unusual activity. (provider: intrinio)")] = None,
        max_value: Annotated[Optional[Any], Field(description="The inclusive maximum total value for the unusual activity. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. A typical day for all symbols will yield 50-80K records. The API will paginate at 1000 records. The high default limit (100K) is to be able to reliably capture the most days. The high absolute limit (1.25M) is to allow for outlier days. Queries at the absolute limit will take a long time, and might be unreliable. Apply filters to improve performance. (provider: intrinio)")] = None,
        source: Annotated[Optional[StrictStr], Field(description="The source of the data. Either realtime or delayed. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectOptionsUnusual:
        """Unusual

        Get the complete options chain for a ticker.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. (the underlying symbol)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format. If no symbol is supplied, requests are only allowed for a single date. Use the start_date for the target date. Intrinio appears to have data beginning Feb/2022, but is unclear when it actually began. (provider: intrinio)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. If a symbol is not supplied, do not include an end date. (provider: intrinio)
        :type end_date: date
        :param trade_type: The type of unusual activity to query for. (provider: intrinio)
        :type trade_type: str
        :param sentiment: The sentiment type to query for. (provider: intrinio)
        :type sentiment: str
        :param min_value: The inclusive minimum total value for the unusual activity. (provider: intrinio)
        :type min_value: Intrinio
        :param max_value: The inclusive maximum total value for the unusual activity. (provider: intrinio)
        :type max_value: Intrinio1
        :param limit: The number of data entries to return. A typical day for all symbols will yield 50-80K records. The API will paginate at 1000 records. The high default limit (100K) is to be able to reliably capture the most days. The high absolute limit (1.25M) is to allow for outlier days. Queries at the absolute limit will take a long time, and might be unreliable. Apply filters to improve performance. (provider: intrinio)
        :type limit: int
        :param source: The source of the data. Either realtime or delayed. (provider: intrinio)
        :type source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_unusual_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            trade_type=trade_type,
            sentiment=sentiment,
            min_value=min_value,
            max_value=max_value,
            limit=limit,
            source=source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsUnusual",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def derivatives_options_unusual_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. (the underlying symbol)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. If no symbol is supplied, requests are only allowed for a single date. Use the start_date for the target date. Intrinio appears to have data beginning Feb/2022, but is unclear when it actually began. (provider: intrinio)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. If a symbol is not supplied, do not include an end date. (provider: intrinio)")] = None,
        trade_type: Annotated[Optional[StrictStr], Field(description="The type of unusual activity to query for. (provider: intrinio)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="The sentiment type to query for. (provider: intrinio)")] = None,
        min_value: Annotated[Optional[Any], Field(description="The inclusive minimum total value for the unusual activity. (provider: intrinio)")] = None,
        max_value: Annotated[Optional[Any], Field(description="The inclusive maximum total value for the unusual activity. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. A typical day for all symbols will yield 50-80K records. The API will paginate at 1000 records. The high default limit (100K) is to be able to reliably capture the most days. The high absolute limit (1.25M) is to allow for outlier days. Queries at the absolute limit will take a long time, and might be unreliable. Apply filters to improve performance. (provider: intrinio)")] = None,
        source: Annotated[Optional[StrictStr], Field(description="The source of the data. Either realtime or delayed. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectOptionsUnusual]:
        """Unusual

        Get the complete options chain for a ticker.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. (the underlying symbol)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format. If no symbol is supplied, requests are only allowed for a single date. Use the start_date for the target date. Intrinio appears to have data beginning Feb/2022, but is unclear when it actually began. (provider: intrinio)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. If a symbol is not supplied, do not include an end date. (provider: intrinio)
        :type end_date: date
        :param trade_type: The type of unusual activity to query for. (provider: intrinio)
        :type trade_type: str
        :param sentiment: The sentiment type to query for. (provider: intrinio)
        :type sentiment: str
        :param min_value: The inclusive minimum total value for the unusual activity. (provider: intrinio)
        :type min_value: Intrinio
        :param max_value: The inclusive maximum total value for the unusual activity. (provider: intrinio)
        :type max_value: Intrinio1
        :param limit: The number of data entries to return. A typical day for all symbols will yield 50-80K records. The API will paginate at 1000 records. The high default limit (100K) is to be able to reliably capture the most days. The high absolute limit (1.25M) is to allow for outlier days. Queries at the absolute limit will take a long time, and might be unreliable. Apply filters to improve performance. (provider: intrinio)
        :type limit: int
        :param source: The source of the data. Either realtime or delayed. (provider: intrinio)
        :type source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_unusual_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            trade_type=trade_type,
            sentiment=sentiment,
            min_value=min_value,
            max_value=max_value,
            limit=limit,
            source=source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsUnusual",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def derivatives_options_unusual_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. (the underlying symbol)")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format. If no symbol is supplied, requests are only allowed for a single date. Use the start_date for the target date. Intrinio appears to have data beginning Feb/2022, but is unclear when it actually began. (provider: intrinio)")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format. If a symbol is not supplied, do not include an end date. (provider: intrinio)")] = None,
        trade_type: Annotated[Optional[StrictStr], Field(description="The type of unusual activity to query for. (provider: intrinio)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="The sentiment type to query for. (provider: intrinio)")] = None,
        min_value: Annotated[Optional[Any], Field(description="The inclusive minimum total value for the unusual activity. (provider: intrinio)")] = None,
        max_value: Annotated[Optional[Any], Field(description="The inclusive maximum total value for the unusual activity. (provider: intrinio)")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. A typical day for all symbols will yield 50-80K records. The API will paginate at 1000 records. The high default limit (100K) is to be able to reliably capture the most days. The high absolute limit (1.25M) is to allow for outlier days. Queries at the absolute limit will take a long time, and might be unreliable. Apply filters to improve performance. (provider: intrinio)")] = None,
        source: Annotated[Optional[StrictStr], Field(description="The source of the data. Either realtime or delayed. (provider: intrinio)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Unusual

        Get the complete options chain for a ticker.

        :param provider:
        :type provider: str
        :param symbol: Symbol to get data for. (the underlying symbol)
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format. If no symbol is supplied, requests are only allowed for a single date. Use the start_date for the target date. Intrinio appears to have data beginning Feb/2022, but is unclear when it actually began. (provider: intrinio)
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format. If a symbol is not supplied, do not include an end date. (provider: intrinio)
        :type end_date: date
        :param trade_type: The type of unusual activity to query for. (provider: intrinio)
        :type trade_type: str
        :param sentiment: The sentiment type to query for. (provider: intrinio)
        :type sentiment: str
        :param min_value: The inclusive minimum total value for the unusual activity. (provider: intrinio)
        :type min_value: Intrinio
        :param max_value: The inclusive maximum total value for the unusual activity. (provider: intrinio)
        :type max_value: Intrinio1
        :param limit: The number of data entries to return. A typical day for all symbols will yield 50-80K records. The API will paginate at 1000 records. The high default limit (100K) is to be able to reliably capture the most days. The high absolute limit (1.25M) is to allow for outlier days. Queries at the absolute limit will take a long time, and might be unreliable. Apply filters to improve performance. (provider: intrinio)
        :type limit: int
        :param source: The source of the data. Either realtime or delayed. (provider: intrinio)
        :type source: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._derivatives_options_unusual_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            trade_type=trade_type,
            sentiment=sentiment,
            min_value=min_value,
            max_value=max_value,
            limit=limit,
            source=source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectOptionsUnusual",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _derivatives_options_unusual_serialize(
        self,
        provider,
        symbol,
        start_date,
        end_date,
        trade_type,
        sentiment,
        min_value,
        max_value,
        limit,
        source,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if trade_type is not None:
            
            _query_params.append(('trade_type', trade_type))
            
        if sentiment is not None:
            
            _query_params.append(('sentiment', sentiment))
            
        if min_value is not None:
            
            _query_params.append(('min_value', min_value))
            
        if max_value is not None:
            
            _query_params.append(('max_value', max_value))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/derivatives/options/unusual',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


