# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, Optional, Union
from typing_extensions import Annotated
from openbb_client.models.ob_bject_company_news import OBBjectCompanyNews
from openbb_client.models.ob_bject_world_news import OBBjectWorldNews

from openbb_client.api_client import ApiClient, RequestSerialized
from openbb_client.api_response import ApiResponse
from openbb_client.rest import RESTResponseType


class NewsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def news_company(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, yfinance.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: benzinga)")] = None,
        display: Annotated[Optional[StrictStr], Field(description="Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)")] = None,
        updated_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was updated. (provider: benzinga)")] = None,
        published_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was published. (provider: benzinga)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Key to sort the news by. (provider: benzinga)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order to sort the news by. (provider: benzinga);     Sort order of the articles. (provider: polygon)")] = None,
        isin: Annotated[Optional[StrictStr], Field(description="The company's ISIN. (provider: benzinga)")] = None,
        cusip: Annotated[Optional[StrictStr], Field(description="The company's CUSIP. (provider: benzinga)")] = None,
        channels: Annotated[Optional[StrictStr], Field(description="Channels of the news to retrieve. (provider: benzinga)")] = None,
        topics: Annotated[Optional[StrictStr], Field(description="Topics of the news to retrieve. (provider: benzinga)")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Authors of the news to retrieve. (provider: benzinga)")] = None,
        content_types: Annotated[Optional[StrictStr], Field(description="Content types of the news to retrieve. (provider: benzinga)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number of the results. Use in combination with limit. (provider: fmp)")] = None,
        source: Annotated[Optional[Any], Field(description="The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="Return news only from this source. (provider: intrinio)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Filter by language. Unsupported for yahoo source. (provider: intrinio)")] = None,
        topic: Annotated[Optional[StrictStr], Field(description="Filter by topic. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_greater_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_less_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        is_spam: Annotated[Optional[StrictBool], Field(description="Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)")] = None,
        business_relevance_greater_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        business_relevance_less_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Page offset, used in conjunction with limit. (provider: tiingo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCompanyNews:
        """Company

        Company News. Get news for one or more companies.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, yfinance.
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return.
        :type limit: int
        :param var_date: A specific date to get data for. (provider: benzinga)
        :type var_date: date
        :param display: Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)
        :type display: str
        :param updated_since: Number of seconds since the news was updated. (provider: benzinga)
        :type updated_since: int
        :param published_since: Number of seconds since the news was published. (provider: benzinga)
        :type published_since: int
        :param sort: Key to sort the news by. (provider: benzinga)
        :type sort: str
        :param order: Order to sort the news by. (provider: benzinga);     Sort order of the articles. (provider: polygon)
        :type order: str
        :param isin: The company's ISIN. (provider: benzinga)
        :type isin: str
        :param cusip: The company's CUSIP. (provider: benzinga)
        :type cusip: str
        :param channels: Channels of the news to retrieve. (provider: benzinga)
        :type channels: str
        :param topics: Topics of the news to retrieve. (provider: benzinga)
        :type topics: str
        :param authors: Authors of the news to retrieve. (provider: benzinga)
        :type authors: str
        :param content_types: Content types of the news to retrieve. (provider: benzinga)
        :type content_types: str
        :param page: Page number of the results. Use in combination with limit. (provider: fmp)
        :type page: int
        :param source: The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)
        :type source: IntrinioTiingo1
        :param sentiment: Return news only from this source. (provider: intrinio)
        :type sentiment: str
        :param language: Filter by language. Unsupported for yahoo source. (provider: intrinio)
        :type language: str
        :param topic: Filter by topic. Unsupported for yahoo source. (provider: intrinio)
        :type topic: str
        :param word_count_greater_than: News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_greater_than: int
        :param word_count_less_than: News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_less_than: int
        :param is_spam: Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)
        :type is_spam: bool
        :param business_relevance_greater_than: News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_greater_than: float
        :param business_relevance_less_than: News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_less_than: float
        :param offset: Page offset, used in conjunction with limit. (provider: tiingo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._news_company_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            var_date=var_date,
            display=display,
            updated_since=updated_since,
            published_since=published_since,
            sort=sort,
            order=order,
            isin=isin,
            cusip=cusip,
            channels=channels,
            topics=topics,
            authors=authors,
            content_types=content_types,
            page=page,
            source=source,
            sentiment=sentiment,
            language=language,
            topic=topic,
            word_count_greater_than=word_count_greater_than,
            word_count_less_than=word_count_less_than,
            is_spam=is_spam,
            business_relevance_greater_than=business_relevance_greater_than,
            business_relevance_less_than=business_relevance_less_than,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompanyNews",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def news_company_with_http_info(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, yfinance.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: benzinga)")] = None,
        display: Annotated[Optional[StrictStr], Field(description="Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)")] = None,
        updated_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was updated. (provider: benzinga)")] = None,
        published_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was published. (provider: benzinga)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Key to sort the news by. (provider: benzinga)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order to sort the news by. (provider: benzinga);     Sort order of the articles. (provider: polygon)")] = None,
        isin: Annotated[Optional[StrictStr], Field(description="The company's ISIN. (provider: benzinga)")] = None,
        cusip: Annotated[Optional[StrictStr], Field(description="The company's CUSIP. (provider: benzinga)")] = None,
        channels: Annotated[Optional[StrictStr], Field(description="Channels of the news to retrieve. (provider: benzinga)")] = None,
        topics: Annotated[Optional[StrictStr], Field(description="Topics of the news to retrieve. (provider: benzinga)")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Authors of the news to retrieve. (provider: benzinga)")] = None,
        content_types: Annotated[Optional[StrictStr], Field(description="Content types of the news to retrieve. (provider: benzinga)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number of the results. Use in combination with limit. (provider: fmp)")] = None,
        source: Annotated[Optional[Any], Field(description="The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="Return news only from this source. (provider: intrinio)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Filter by language. Unsupported for yahoo source. (provider: intrinio)")] = None,
        topic: Annotated[Optional[StrictStr], Field(description="Filter by topic. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_greater_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_less_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        is_spam: Annotated[Optional[StrictBool], Field(description="Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)")] = None,
        business_relevance_greater_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        business_relevance_less_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Page offset, used in conjunction with limit. (provider: tiingo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCompanyNews]:
        """Company

        Company News. Get news for one or more companies.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, yfinance.
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return.
        :type limit: int
        :param var_date: A specific date to get data for. (provider: benzinga)
        :type var_date: date
        :param display: Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)
        :type display: str
        :param updated_since: Number of seconds since the news was updated. (provider: benzinga)
        :type updated_since: int
        :param published_since: Number of seconds since the news was published. (provider: benzinga)
        :type published_since: int
        :param sort: Key to sort the news by. (provider: benzinga)
        :type sort: str
        :param order: Order to sort the news by. (provider: benzinga);     Sort order of the articles. (provider: polygon)
        :type order: str
        :param isin: The company's ISIN. (provider: benzinga)
        :type isin: str
        :param cusip: The company's CUSIP. (provider: benzinga)
        :type cusip: str
        :param channels: Channels of the news to retrieve. (provider: benzinga)
        :type channels: str
        :param topics: Topics of the news to retrieve. (provider: benzinga)
        :type topics: str
        :param authors: Authors of the news to retrieve. (provider: benzinga)
        :type authors: str
        :param content_types: Content types of the news to retrieve. (provider: benzinga)
        :type content_types: str
        :param page: Page number of the results. Use in combination with limit. (provider: fmp)
        :type page: int
        :param source: The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)
        :type source: IntrinioTiingo1
        :param sentiment: Return news only from this source. (provider: intrinio)
        :type sentiment: str
        :param language: Filter by language. Unsupported for yahoo source. (provider: intrinio)
        :type language: str
        :param topic: Filter by topic. Unsupported for yahoo source. (provider: intrinio)
        :type topic: str
        :param word_count_greater_than: News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_greater_than: int
        :param word_count_less_than: News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_less_than: int
        :param is_spam: Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)
        :type is_spam: bool
        :param business_relevance_greater_than: News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_greater_than: float
        :param business_relevance_less_than: News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_less_than: float
        :param offset: Page offset, used in conjunction with limit. (provider: tiingo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._news_company_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            var_date=var_date,
            display=display,
            updated_since=updated_since,
            published_since=published_since,
            sort=sort,
            order=order,
            isin=isin,
            cusip=cusip,
            channels=channels,
            topics=topics,
            authors=authors,
            content_types=content_types,
            page=page,
            source=source,
            sentiment=sentiment,
            language=language,
            topic=topic,
            word_count_greater_than=word_count_greater_than,
            word_count_less_than=word_count_less_than,
            is_spam=is_spam,
            business_relevance_greater_than=business_relevance_greater_than,
            business_relevance_less_than=business_relevance_less_than,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompanyNews",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def news_company_without_preload_content(
        self,
        provider: StrictStr,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, yfinance.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of data entries to return.")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: benzinga)")] = None,
        display: Annotated[Optional[StrictStr], Field(description="Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)")] = None,
        updated_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was updated. (provider: benzinga)")] = None,
        published_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was published. (provider: benzinga)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Key to sort the news by. (provider: benzinga)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order to sort the news by. (provider: benzinga);     Sort order of the articles. (provider: polygon)")] = None,
        isin: Annotated[Optional[StrictStr], Field(description="The company's ISIN. (provider: benzinga)")] = None,
        cusip: Annotated[Optional[StrictStr], Field(description="The company's CUSIP. (provider: benzinga)")] = None,
        channels: Annotated[Optional[StrictStr], Field(description="Channels of the news to retrieve. (provider: benzinga)")] = None,
        topics: Annotated[Optional[StrictStr], Field(description="Topics of the news to retrieve. (provider: benzinga)")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Authors of the news to retrieve. (provider: benzinga)")] = None,
        content_types: Annotated[Optional[StrictStr], Field(description="Content types of the news to retrieve. (provider: benzinga)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number of the results. Use in combination with limit. (provider: fmp)")] = None,
        source: Annotated[Optional[Any], Field(description="The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="Return news only from this source. (provider: intrinio)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Filter by language. Unsupported for yahoo source. (provider: intrinio)")] = None,
        topic: Annotated[Optional[StrictStr], Field(description="Filter by topic. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_greater_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_less_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        is_spam: Annotated[Optional[StrictBool], Field(description="Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)")] = None,
        business_relevance_greater_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        business_relevance_less_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Page offset, used in conjunction with limit. (provider: tiingo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Company

        Company News. Get news for one or more companies.

        :param provider: (required)
        :type provider: str
        :param symbol: Symbol to get data for. Multiple comma separated items allowed for provider(s): benzinga, fmp, intrinio, polygon, tiingo, yfinance.
        :type symbol: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param limit: The number of data entries to return.
        :type limit: int
        :param var_date: A specific date to get data for. (provider: benzinga)
        :type var_date: date
        :param display: Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)
        :type display: str
        :param updated_since: Number of seconds since the news was updated. (provider: benzinga)
        :type updated_since: int
        :param published_since: Number of seconds since the news was published. (provider: benzinga)
        :type published_since: int
        :param sort: Key to sort the news by. (provider: benzinga)
        :type sort: str
        :param order: Order to sort the news by. (provider: benzinga);     Sort order of the articles. (provider: polygon)
        :type order: str
        :param isin: The company's ISIN. (provider: benzinga)
        :type isin: str
        :param cusip: The company's CUSIP. (provider: benzinga)
        :type cusip: str
        :param channels: Channels of the news to retrieve. (provider: benzinga)
        :type channels: str
        :param topics: Topics of the news to retrieve. (provider: benzinga)
        :type topics: str
        :param authors: Authors of the news to retrieve. (provider: benzinga)
        :type authors: str
        :param content_types: Content types of the news to retrieve. (provider: benzinga)
        :type content_types: str
        :param page: Page number of the results. Use in combination with limit. (provider: fmp)
        :type page: int
        :param source: The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)
        :type source: IntrinioTiingo1
        :param sentiment: Return news only from this source. (provider: intrinio)
        :type sentiment: str
        :param language: Filter by language. Unsupported for yahoo source. (provider: intrinio)
        :type language: str
        :param topic: Filter by topic. Unsupported for yahoo source. (provider: intrinio)
        :type topic: str
        :param word_count_greater_than: News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_greater_than: int
        :param word_count_less_than: News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_less_than: int
        :param is_spam: Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)
        :type is_spam: bool
        :param business_relevance_greater_than: News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_greater_than: float
        :param business_relevance_less_than: News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_less_than: float
        :param offset: Page offset, used in conjunction with limit. (provider: tiingo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._news_company_serialize(
            provider=provider,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            var_date=var_date,
            display=display,
            updated_since=updated_since,
            published_since=published_since,
            sort=sort,
            order=order,
            isin=isin,
            cusip=cusip,
            channels=channels,
            topics=topics,
            authors=authors,
            content_types=content_types,
            page=page,
            source=source,
            sentiment=sentiment,
            language=language,
            topic=topic,
            word_count_greater_than=word_count_greater_than,
            word_count_less_than=word_count_less_than,
            is_spam=is_spam,
            business_relevance_greater_than=business_relevance_greater_than,
            business_relevance_less_than=business_relevance_less_than,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCompanyNews",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _news_company_serialize(
        self,
        provider,
        symbol,
        start_date,
        end_date,
        limit,
        var_date,
        display,
        updated_since,
        published_since,
        sort,
        order,
        isin,
        cusip,
        channels,
        topics,
        authors,
        content_types,
        page,
        source,
        sentiment,
        language,
        topic,
        word_count_greater_than,
        word_count_less_than,
        is_spam,
        business_relevance_greater_than,
        business_relevance_less_than,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if display is not None:
            
            _query_params.append(('display', display))
            
        if updated_since is not None:
            
            _query_params.append(('updated_since', updated_since))
            
        if published_since is not None:
            
            _query_params.append(('published_since', published_since))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if isin is not None:
            
            _query_params.append(('isin', isin))
            
        if cusip is not None:
            
            _query_params.append(('cusip', cusip))
            
        if channels is not None:
            
            _query_params.append(('channels', channels))
            
        if topics is not None:
            
            _query_params.append(('topics', topics))
            
        if authors is not None:
            
            _query_params.append(('authors', authors))
            
        if content_types is not None:
            
            _query_params.append(('content_types', content_types))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if sentiment is not None:
            
            _query_params.append(('sentiment', sentiment))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if topic is not None:
            
            _query_params.append(('topic', topic))
            
        if word_count_greater_than is not None:
            
            _query_params.append(('word_count_greater_than', word_count_greater_than))
            
        if word_count_less_than is not None:
            
            _query_params.append(('word_count_less_than', word_count_less_than))
            
        if is_spam is not None:
            
            _query_params.append(('is_spam', is_spam))
            
        if business_relevance_greater_than is not None:
            
            _query_params.append(('business_relevance_greater_than', business_relevance_greater_than))
            
        if business_relevance_less_than is not None:
            
            _query_params.append(('business_relevance_less_than', business_relevance_less_than))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/news/company',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def news_world(
        self,
        provider: StrictStr,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. The number of articles to return.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: benzinga)")] = None,
        display: Annotated[Optional[StrictStr], Field(description="Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)")] = None,
        updated_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was updated. (provider: benzinga)")] = None,
        published_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was published. (provider: benzinga)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Key to sort the news by. (provider: benzinga)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order to sort the news by. (provider: benzinga)")] = None,
        isin: Annotated[Optional[StrictStr], Field(description="The ISIN of the news to retrieve. (provider: benzinga)")] = None,
        cusip: Annotated[Optional[StrictStr], Field(description="The CUSIP of the news to retrieve. (provider: benzinga)")] = None,
        channels: Annotated[Optional[StrictStr], Field(description="Channels of the news to retrieve. (provider: benzinga)")] = None,
        topics: Annotated[Optional[StrictStr], Field(description="Topics of the news to retrieve. (provider: benzinga)")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Authors of the news to retrieve. (provider: benzinga)")] = None,
        content_types: Annotated[Optional[StrictStr], Field(description="Content types of the news to retrieve. (provider: benzinga)")] = None,
        source: Annotated[Optional[Any], Field(description="The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="Return news only from this source. (provider: intrinio)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Filter by language. Unsupported for yahoo source. (provider: intrinio)")] = None,
        topic: Annotated[Optional[StrictStr], Field(description="Filter by topic. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_greater_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_less_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        is_spam: Annotated[Optional[StrictBool], Field(description="Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)")] = None,
        business_relevance_greater_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        business_relevance_less_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Page offset, used in conjunction with limit. (provider: tiingo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectWorldNews:
        """World

        World News. Global news data.

        :param provider: (required)
        :type provider: str
        :param limit: The number of data entries to return. The number of articles to return.
        :type limit: int
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param var_date: A specific date to get data for. (provider: benzinga)
        :type var_date: date
        :param display: Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)
        :type display: str
        :param updated_since: Number of seconds since the news was updated. (provider: benzinga)
        :type updated_since: int
        :param published_since: Number of seconds since the news was published. (provider: benzinga)
        :type published_since: int
        :param sort: Key to sort the news by. (provider: benzinga)
        :type sort: str
        :param order: Order to sort the news by. (provider: benzinga)
        :type order: str
        :param isin: The ISIN of the news to retrieve. (provider: benzinga)
        :type isin: str
        :param cusip: The CUSIP of the news to retrieve. (provider: benzinga)
        :type cusip: str
        :param channels: Channels of the news to retrieve. (provider: benzinga)
        :type channels: str
        :param topics: Topics of the news to retrieve. (provider: benzinga)
        :type topics: str
        :param authors: Authors of the news to retrieve. (provider: benzinga)
        :type authors: str
        :param content_types: Content types of the news to retrieve. (provider: benzinga)
        :type content_types: str
        :param source: The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)
        :type source: IntrinioTiingo
        :param sentiment: Return news only from this source. (provider: intrinio)
        :type sentiment: str
        :param language: Filter by language. Unsupported for yahoo source. (provider: intrinio)
        :type language: str
        :param topic: Filter by topic. Unsupported for yahoo source. (provider: intrinio)
        :type topic: str
        :param word_count_greater_than: News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_greater_than: int
        :param word_count_less_than: News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_less_than: int
        :param is_spam: Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)
        :type is_spam: bool
        :param business_relevance_greater_than: News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_greater_than: float
        :param business_relevance_less_than: News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_less_than: float
        :param offset: Page offset, used in conjunction with limit. (provider: tiingo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._news_world_serialize(
            provider=provider,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            var_date=var_date,
            display=display,
            updated_since=updated_since,
            published_since=published_since,
            sort=sort,
            order=order,
            isin=isin,
            cusip=cusip,
            channels=channels,
            topics=topics,
            authors=authors,
            content_types=content_types,
            source=source,
            sentiment=sentiment,
            language=language,
            topic=topic,
            word_count_greater_than=word_count_greater_than,
            word_count_less_than=word_count_less_than,
            is_spam=is_spam,
            business_relevance_greater_than=business_relevance_greater_than,
            business_relevance_less_than=business_relevance_less_than,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectWorldNews",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def news_world_with_http_info(
        self,
        provider: StrictStr,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. The number of articles to return.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: benzinga)")] = None,
        display: Annotated[Optional[StrictStr], Field(description="Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)")] = None,
        updated_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was updated. (provider: benzinga)")] = None,
        published_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was published. (provider: benzinga)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Key to sort the news by. (provider: benzinga)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order to sort the news by. (provider: benzinga)")] = None,
        isin: Annotated[Optional[StrictStr], Field(description="The ISIN of the news to retrieve. (provider: benzinga)")] = None,
        cusip: Annotated[Optional[StrictStr], Field(description="The CUSIP of the news to retrieve. (provider: benzinga)")] = None,
        channels: Annotated[Optional[StrictStr], Field(description="Channels of the news to retrieve. (provider: benzinga)")] = None,
        topics: Annotated[Optional[StrictStr], Field(description="Topics of the news to retrieve. (provider: benzinga)")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Authors of the news to retrieve. (provider: benzinga)")] = None,
        content_types: Annotated[Optional[StrictStr], Field(description="Content types of the news to retrieve. (provider: benzinga)")] = None,
        source: Annotated[Optional[Any], Field(description="The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="Return news only from this source. (provider: intrinio)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Filter by language. Unsupported for yahoo source. (provider: intrinio)")] = None,
        topic: Annotated[Optional[StrictStr], Field(description="Filter by topic. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_greater_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_less_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        is_spam: Annotated[Optional[StrictBool], Field(description="Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)")] = None,
        business_relevance_greater_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        business_relevance_less_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Page offset, used in conjunction with limit. (provider: tiingo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectWorldNews]:
        """World

        World News. Global news data.

        :param provider: (required)
        :type provider: str
        :param limit: The number of data entries to return. The number of articles to return.
        :type limit: int
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param var_date: A specific date to get data for. (provider: benzinga)
        :type var_date: date
        :param display: Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)
        :type display: str
        :param updated_since: Number of seconds since the news was updated. (provider: benzinga)
        :type updated_since: int
        :param published_since: Number of seconds since the news was published. (provider: benzinga)
        :type published_since: int
        :param sort: Key to sort the news by. (provider: benzinga)
        :type sort: str
        :param order: Order to sort the news by. (provider: benzinga)
        :type order: str
        :param isin: The ISIN of the news to retrieve. (provider: benzinga)
        :type isin: str
        :param cusip: The CUSIP of the news to retrieve. (provider: benzinga)
        :type cusip: str
        :param channels: Channels of the news to retrieve. (provider: benzinga)
        :type channels: str
        :param topics: Topics of the news to retrieve. (provider: benzinga)
        :type topics: str
        :param authors: Authors of the news to retrieve. (provider: benzinga)
        :type authors: str
        :param content_types: Content types of the news to retrieve. (provider: benzinga)
        :type content_types: str
        :param source: The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)
        :type source: IntrinioTiingo
        :param sentiment: Return news only from this source. (provider: intrinio)
        :type sentiment: str
        :param language: Filter by language. Unsupported for yahoo source. (provider: intrinio)
        :type language: str
        :param topic: Filter by topic. Unsupported for yahoo source. (provider: intrinio)
        :type topic: str
        :param word_count_greater_than: News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_greater_than: int
        :param word_count_less_than: News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_less_than: int
        :param is_spam: Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)
        :type is_spam: bool
        :param business_relevance_greater_than: News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_greater_than: float
        :param business_relevance_less_than: News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_less_than: float
        :param offset: Page offset, used in conjunction with limit. (provider: tiingo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._news_world_serialize(
            provider=provider,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            var_date=var_date,
            display=display,
            updated_since=updated_since,
            published_since=published_since,
            sort=sort,
            order=order,
            isin=isin,
            cusip=cusip,
            channels=channels,
            topics=topics,
            authors=authors,
            content_types=content_types,
            source=source,
            sentiment=sentiment,
            language=language,
            topic=topic,
            word_count_greater_than=word_count_greater_than,
            word_count_less_than=word_count_less_than,
            is_spam=is_spam,
            business_relevance_greater_than=business_relevance_greater_than,
            business_relevance_less_than=business_relevance_less_than,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectWorldNews",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def news_world_without_preload_content(
        self,
        provider: StrictStr,
        limit: Annotated[Optional[StrictInt], Field(description="The number of data entries to return. The number of articles to return.")] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        var_date: Annotated[Optional[date], Field(description="A specific date to get data for. (provider: benzinga)")] = None,
        display: Annotated[Optional[StrictStr], Field(description="Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)")] = None,
        updated_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was updated. (provider: benzinga)")] = None,
        published_since: Annotated[Optional[StrictInt], Field(description="Number of seconds since the news was published. (provider: benzinga)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Key to sort the news by. (provider: benzinga)")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Order to sort the news by. (provider: benzinga)")] = None,
        isin: Annotated[Optional[StrictStr], Field(description="The ISIN of the news to retrieve. (provider: benzinga)")] = None,
        cusip: Annotated[Optional[StrictStr], Field(description="The CUSIP of the news to retrieve. (provider: benzinga)")] = None,
        channels: Annotated[Optional[StrictStr], Field(description="Channels of the news to retrieve. (provider: benzinga)")] = None,
        topics: Annotated[Optional[StrictStr], Field(description="Topics of the news to retrieve. (provider: benzinga)")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Authors of the news to retrieve. (provider: benzinga)")] = None,
        content_types: Annotated[Optional[StrictStr], Field(description="Content types of the news to retrieve. (provider: benzinga)")] = None,
        source: Annotated[Optional[Any], Field(description="The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)")] = None,
        sentiment: Annotated[Optional[StrictStr], Field(description="Return news only from this source. (provider: intrinio)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Filter by language. Unsupported for yahoo source. (provider: intrinio)")] = None,
        topic: Annotated[Optional[StrictStr], Field(description="Filter by topic. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_greater_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        word_count_less_than: Annotated[Optional[StrictInt], Field(description="News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)")] = None,
        is_spam: Annotated[Optional[StrictBool], Field(description="Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)")] = None,
        business_relevance_greater_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        business_relevance_less_than: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Page offset, used in conjunction with limit. (provider: tiingo)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """World

        World News. Global news data.

        :param provider: (required)
        :type provider: str
        :param limit: The number of data entries to return. The number of articles to return.
        :type limit: int
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param var_date: A specific date to get data for. (provider: benzinga)
        :type var_date: date
        :param display: Specify headline only (headline), headline + teaser (abstract), or headline + full body (full). (provider: benzinga)
        :type display: str
        :param updated_since: Number of seconds since the news was updated. (provider: benzinga)
        :type updated_since: int
        :param published_since: Number of seconds since the news was published. (provider: benzinga)
        :type published_since: int
        :param sort: Key to sort the news by. (provider: benzinga)
        :type sort: str
        :param order: Order to sort the news by. (provider: benzinga)
        :type order: str
        :param isin: The ISIN of the news to retrieve. (provider: benzinga)
        :type isin: str
        :param cusip: The CUSIP of the news to retrieve. (provider: benzinga)
        :type cusip: str
        :param channels: Channels of the news to retrieve. (provider: benzinga)
        :type channels: str
        :param topics: Topics of the news to retrieve. (provider: benzinga)
        :type topics: str
        :param authors: Authors of the news to retrieve. (provider: benzinga)
        :type authors: str
        :param content_types: Content types of the news to retrieve. (provider: benzinga)
        :type content_types: str
        :param source: The source of the news article. (provider: intrinio);     A comma-separated list of the domains requested. Multiple comma separated items allowed. (provider: tiingo)
        :type source: IntrinioTiingo
        :param sentiment: Return news only from this source. (provider: intrinio)
        :type sentiment: str
        :param language: Filter by language. Unsupported for yahoo source. (provider: intrinio)
        :type language: str
        :param topic: Filter by topic. Unsupported for yahoo source. (provider: intrinio)
        :type topic: str
        :param word_count_greater_than: News stories will have a word count greater than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_greater_than: int
        :param word_count_less_than: News stories will have a word count less than this value. Unsupported for yahoo source. (provider: intrinio)
        :type word_count_less_than: int
        :param is_spam: Filter whether it is marked as spam or not. Unsupported for yahoo source. (provider: intrinio)
        :type is_spam: bool
        :param business_relevance_greater_than: News stories will have a business relevance score more than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_greater_than: float
        :param business_relevance_less_than: News stories will have a business relevance score less than this value. Unsupported for yahoo source. Value is a decimal between 0 and 1. (provider: intrinio)
        :type business_relevance_less_than: float
        :param offset: Page offset, used in conjunction with limit. (provider: tiingo)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._news_world_serialize(
            provider=provider,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            var_date=var_date,
            display=display,
            updated_since=updated_since,
            published_since=published_since,
            sort=sort,
            order=order,
            isin=isin,
            cusip=cusip,
            channels=channels,
            topics=topics,
            authors=authors,
            content_types=content_types,
            source=source,
            sentiment=sentiment,
            language=language,
            topic=topic,
            word_count_greater_than=word_count_greater_than,
            word_count_less_than=word_count_less_than,
            is_spam=is_spam,
            business_relevance_greater_than=business_relevance_greater_than,
            business_relevance_less_than=business_relevance_less_than,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectWorldNews",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _news_world_serialize(
        self,
        provider,
        limit,
        start_date,
        end_date,
        var_date,
        display,
        updated_since,
        published_since,
        sort,
        order,
        isin,
        cusip,
        channels,
        topics,
        authors,
        content_types,
        source,
        sentiment,
        language,
        topic,
        word_count_greater_than,
        word_count_less_than,
        is_spam,
        business_relevance_greater_than,
        business_relevance_less_than,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if display is not None:
            
            _query_params.append(('display', display))
            
        if updated_since is not None:
            
            _query_params.append(('updated_since', updated_since))
            
        if published_since is not None:
            
            _query_params.append(('published_since', published_since))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if isin is not None:
            
            _query_params.append(('isin', isin))
            
        if cusip is not None:
            
            _query_params.append(('cusip', cusip))
            
        if channels is not None:
            
            _query_params.append(('channels', channels))
            
        if topics is not None:
            
            _query_params.append(('topics', topics))
            
        if authors is not None:
            
            _query_params.append(('authors', authors))
            
        if content_types is not None:
            
            _query_params.append(('content_types', content_types))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if sentiment is not None:
            
            _query_params.append(('sentiment', sentiment))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if topic is not None:
            
            _query_params.append(('topic', topic))
            
        if word_count_greater_than is not None:
            
            _query_params.append(('word_count_greater_than', word_count_greater_than))
            
        if word_count_less_than is not None:
            
            _query_params.append(('word_count_less_than', word_count_less_than))
            
        if is_spam is not None:
            
            _query_params.append(('is_spam', is_spam))
            
        if business_relevance_greater_than is not None:
            
            _query_params.append(('business_relevance_greater_than', business_relevance_greater_than))
            
        if business_relevance_less_than is not None:
            
            _query_params.append(('business_relevance_less_than', business_relevance_less_than))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/news/world',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


