# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openbb_client.models.ob_bject_commodity_spot_prices import OBBjectCommoditySpotPrices
from openbb_client.models.ob_bject_petroleum_status_report import OBBjectPetroleumStatusReport
from openbb_client.models.ob_bject_short_term_energy_outlook import OBBjectShortTermEnergyOutlook

from openbb_client.api_client import ApiClient, RequestSerialized
from openbb_client.api_response import ApiResponse
from openbb_client.rest import RESTResponseType


class CommodityApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def commodity_petroleum_status_report(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="The group of data to be returned. The default is the balance sheet. (provider: eia)")] = None,
        table: Annotated[Optional[StrictStr], Field(description="The specific table element within the category to be returned, default is 'stocks', if the category is 'weekly_estimates', else 'all'.     Note: Choices represent all available tables from the entire collection and are not all available for every category.     Invalid choices will raise a ValidationError with a message indicating the valid choices for the selected category.     Choices are:         all         conventional_gas         crude         crude_production         crude_production_avg         diesel         ethanol_plant_production         ethanol_plant_production_avg         exports         exports_avg         heating_oil         imports         imports_avg         imports_by_country         imports_by_country_avg         inputs_and_utilization         inputs_and_utilization_avg         jet_fuel         monthly         net_imports_inc_spr_avg         net_imports_incl_spr         net_production         net_production_avg         net_production_by_product         net_production_by_production_avg         product_by_region         product_by_region_avg         product_supplied         product_supplied_avg         propane         rbob         refiner_blender_net_production         refiner_blender_net_production_avg         stocks         supply         supply_avg         ulta_low_sulfur_distillate_reclassification         ulta_low_sulfur_distillate_reclassification_avg         weekly     Multiple comma separated items allowed. (provider: eia)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Subsequent requests for the same source data are cached for the session using ALRU cache. (provider: eia)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectPetroleumStatusReport:
        """Petroleum Status Report

        EIA Weekly Petroleum Status Report.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param category: The group of data to be returned. The default is the balance sheet. (provider: eia)
        :type category: str
        :param table: The specific table element within the category to be returned, default is 'stocks', if the category is 'weekly_estimates', else 'all'.     Note: Choices represent all available tables from the entire collection and are not all available for every category.     Invalid choices will raise a ValidationError with a message indicating the valid choices for the selected category.     Choices are:         all         conventional_gas         crude         crude_production         crude_production_avg         diesel         ethanol_plant_production         ethanol_plant_production_avg         exports         exports_avg         heating_oil         imports         imports_avg         imports_by_country         imports_by_country_avg         inputs_and_utilization         inputs_and_utilization_avg         jet_fuel         monthly         net_imports_inc_spr_avg         net_imports_incl_spr         net_production         net_production_avg         net_production_by_product         net_production_by_production_avg         product_by_region         product_by_region_avg         product_supplied         product_supplied_avg         propane         rbob         refiner_blender_net_production         refiner_blender_net_production_avg         stocks         supply         supply_avg         ulta_low_sulfur_distillate_reclassification         ulta_low_sulfur_distillate_reclassification_avg         weekly     Multiple comma separated items allowed. (provider: eia)
        :type table: str
        :param use_cache: Subsequent requests for the same source data are cached for the session using ALRU cache. (provider: eia)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_petroleum_status_report_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            category=category,
            table=table,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPetroleumStatusReport",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commodity_petroleum_status_report_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="The group of data to be returned. The default is the balance sheet. (provider: eia)")] = None,
        table: Annotated[Optional[StrictStr], Field(description="The specific table element within the category to be returned, default is 'stocks', if the category is 'weekly_estimates', else 'all'.     Note: Choices represent all available tables from the entire collection and are not all available for every category.     Invalid choices will raise a ValidationError with a message indicating the valid choices for the selected category.     Choices are:         all         conventional_gas         crude         crude_production         crude_production_avg         diesel         ethanol_plant_production         ethanol_plant_production_avg         exports         exports_avg         heating_oil         imports         imports_avg         imports_by_country         imports_by_country_avg         inputs_and_utilization         inputs_and_utilization_avg         jet_fuel         monthly         net_imports_inc_spr_avg         net_imports_incl_spr         net_production         net_production_avg         net_production_by_product         net_production_by_production_avg         product_by_region         product_by_region_avg         product_supplied         product_supplied_avg         propane         rbob         refiner_blender_net_production         refiner_blender_net_production_avg         stocks         supply         supply_avg         ulta_low_sulfur_distillate_reclassification         ulta_low_sulfur_distillate_reclassification_avg         weekly     Multiple comma separated items allowed. (provider: eia)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Subsequent requests for the same source data are cached for the session using ALRU cache. (provider: eia)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectPetroleumStatusReport]:
        """Petroleum Status Report

        EIA Weekly Petroleum Status Report.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param category: The group of data to be returned. The default is the balance sheet. (provider: eia)
        :type category: str
        :param table: The specific table element within the category to be returned, default is 'stocks', if the category is 'weekly_estimates', else 'all'.     Note: Choices represent all available tables from the entire collection and are not all available for every category.     Invalid choices will raise a ValidationError with a message indicating the valid choices for the selected category.     Choices are:         all         conventional_gas         crude         crude_production         crude_production_avg         diesel         ethanol_plant_production         ethanol_plant_production_avg         exports         exports_avg         heating_oil         imports         imports_avg         imports_by_country         imports_by_country_avg         inputs_and_utilization         inputs_and_utilization_avg         jet_fuel         monthly         net_imports_inc_spr_avg         net_imports_incl_spr         net_production         net_production_avg         net_production_by_product         net_production_by_production_avg         product_by_region         product_by_region_avg         product_supplied         product_supplied_avg         propane         rbob         refiner_blender_net_production         refiner_blender_net_production_avg         stocks         supply         supply_avg         ulta_low_sulfur_distillate_reclassification         ulta_low_sulfur_distillate_reclassification_avg         weekly     Multiple comma separated items allowed. (provider: eia)
        :type table: str
        :param use_cache: Subsequent requests for the same source data are cached for the session using ALRU cache. (provider: eia)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_petroleum_status_report_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            category=category,
            table=table,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPetroleumStatusReport",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commodity_petroleum_status_report_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        category: Annotated[Optional[StrictStr], Field(description="The group of data to be returned. The default is the balance sheet. (provider: eia)")] = None,
        table: Annotated[Optional[StrictStr], Field(description="The specific table element within the category to be returned, default is 'stocks', if the category is 'weekly_estimates', else 'all'.     Note: Choices represent all available tables from the entire collection and are not all available for every category.     Invalid choices will raise a ValidationError with a message indicating the valid choices for the selected category.     Choices are:         all         conventional_gas         crude         crude_production         crude_production_avg         diesel         ethanol_plant_production         ethanol_plant_production_avg         exports         exports_avg         heating_oil         imports         imports_avg         imports_by_country         imports_by_country_avg         inputs_and_utilization         inputs_and_utilization_avg         jet_fuel         monthly         net_imports_inc_spr_avg         net_imports_incl_spr         net_production         net_production_avg         net_production_by_product         net_production_by_production_avg         product_by_region         product_by_region_avg         product_supplied         product_supplied_avg         propane         rbob         refiner_blender_net_production         refiner_blender_net_production_avg         stocks         supply         supply_avg         ulta_low_sulfur_distillate_reclassification         ulta_low_sulfur_distillate_reclassification_avg         weekly     Multiple comma separated items allowed. (provider: eia)")] = None,
        use_cache: Annotated[Optional[StrictBool], Field(description="Subsequent requests for the same source data are cached for the session using ALRU cache. (provider: eia)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Petroleum Status Report

        EIA Weekly Petroleum Status Report.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param category: The group of data to be returned. The default is the balance sheet. (provider: eia)
        :type category: str
        :param table: The specific table element within the category to be returned, default is 'stocks', if the category is 'weekly_estimates', else 'all'.     Note: Choices represent all available tables from the entire collection and are not all available for every category.     Invalid choices will raise a ValidationError with a message indicating the valid choices for the selected category.     Choices are:         all         conventional_gas         crude         crude_production         crude_production_avg         diesel         ethanol_plant_production         ethanol_plant_production_avg         exports         exports_avg         heating_oil         imports         imports_avg         imports_by_country         imports_by_country_avg         inputs_and_utilization         inputs_and_utilization_avg         jet_fuel         monthly         net_imports_inc_spr_avg         net_imports_incl_spr         net_production         net_production_avg         net_production_by_product         net_production_by_production_avg         product_by_region         product_by_region_avg         product_supplied         product_supplied_avg         propane         rbob         refiner_blender_net_production         refiner_blender_net_production_avg         stocks         supply         supply_avg         ulta_low_sulfur_distillate_reclassification         ulta_low_sulfur_distillate_reclassification_avg         weekly     Multiple comma separated items allowed. (provider: eia)
        :type table: str
        :param use_cache: Subsequent requests for the same source data are cached for the session using ALRU cache. (provider: eia)
        :type use_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_petroleum_status_report_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            category=category,
            table=table,
            use_cache=use_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectPetroleumStatusReport",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commodity_petroleum_status_report_serialize(
        self,
        provider,
        start_date,
        end_date,
        category,
        table,
        use_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if category is not None:
            
            _query_params.append(('category', category))
            
        if table is not None:
            
            _query_params.append(('table', table))
            
        if use_cache is not None:
            
            _query_params.append(('use_cache', use_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/commodity/petroleum_status_report',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def commodity_price_spot(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        commodity: Annotated[Optional[StrictStr], Field(description="Commodity name associated with the EIA spot price commodity data, default is 'all'. (provider: fred)")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="Frequency aggregation to convert high frequency data to lower frequency.         None = No change         a = Annual         q = Quarterly         m = Monthly         w = Weekly         d = Daily         wef = Weekly, Ending Friday         weth = Weekly, Ending Thursday         wew = Weekly, Ending Wednesday         wetu = Weekly, Ending Tuesday         wem = Weekly, Ending Monday         wesu = Weekly, Ending Sunday         wesa = Weekly, Ending Saturday         bwew = Biweekly, Ending Wednesday         bwem = Biweekly, Ending Monday          (provider: fred)")] = None,
        aggregation_method: Annotated[Optional[StrictStr], Field(description="A key that indicates the aggregation method used for frequency aggregation.         This parameter has no affect if the frequency parameter is not set.         avg = Average         sum = Sum         eop = End of Period          (provider: fred)")] = None,
        transform: Annotated[Optional[StrictStr], Field(description="Transformation type         None = No transformation         chg = Change         ch1 = Change from Year Ago         pch = Percent Change         pc1 = Percent Change from Year Ago         pca = Compounded Annual Rate of Change         cch = Continuously Compounded Rate of Change         cca = Continuously Compounded Annual Rate of Change         log = Natural Log          (provider: fred)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectCommoditySpotPrices:
        """Spot

        Commodity Spot Prices.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param commodity: Commodity name associated with the EIA spot price commodity data, default is 'all'. (provider: fred)
        :type commodity: str
        :param frequency: Frequency aggregation to convert high frequency data to lower frequency.         None = No change         a = Annual         q = Quarterly         m = Monthly         w = Weekly         d = Daily         wef = Weekly, Ending Friday         weth = Weekly, Ending Thursday         wew = Weekly, Ending Wednesday         wetu = Weekly, Ending Tuesday         wem = Weekly, Ending Monday         wesu = Weekly, Ending Sunday         wesa = Weekly, Ending Saturday         bwew = Biweekly, Ending Wednesday         bwem = Biweekly, Ending Monday          (provider: fred)
        :type frequency: str
        :param aggregation_method: A key that indicates the aggregation method used for frequency aggregation.         This parameter has no affect if the frequency parameter is not set.         avg = Average         sum = Sum         eop = End of Period          (provider: fred)
        :type aggregation_method: str
        :param transform: Transformation type         None = No transformation         chg = Change         ch1 = Change from Year Ago         pch = Percent Change         pc1 = Percent Change from Year Ago         pca = Compounded Annual Rate of Change         cch = Continuously Compounded Rate of Change         cca = Continuously Compounded Annual Rate of Change         log = Natural Log          (provider: fred)
        :type transform: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_price_spot_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            commodity=commodity,
            frequency=frequency,
            aggregation_method=aggregation_method,
            transform=transform,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCommoditySpotPrices",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commodity_price_spot_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        commodity: Annotated[Optional[StrictStr], Field(description="Commodity name associated with the EIA spot price commodity data, default is 'all'. (provider: fred)")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="Frequency aggregation to convert high frequency data to lower frequency.         None = No change         a = Annual         q = Quarterly         m = Monthly         w = Weekly         d = Daily         wef = Weekly, Ending Friday         weth = Weekly, Ending Thursday         wew = Weekly, Ending Wednesday         wetu = Weekly, Ending Tuesday         wem = Weekly, Ending Monday         wesu = Weekly, Ending Sunday         wesa = Weekly, Ending Saturday         bwew = Biweekly, Ending Wednesday         bwem = Biweekly, Ending Monday          (provider: fred)")] = None,
        aggregation_method: Annotated[Optional[StrictStr], Field(description="A key that indicates the aggregation method used for frequency aggregation.         This parameter has no affect if the frequency parameter is not set.         avg = Average         sum = Sum         eop = End of Period          (provider: fred)")] = None,
        transform: Annotated[Optional[StrictStr], Field(description="Transformation type         None = No transformation         chg = Change         ch1 = Change from Year Ago         pch = Percent Change         pc1 = Percent Change from Year Ago         pca = Compounded Annual Rate of Change         cch = Continuously Compounded Rate of Change         cca = Continuously Compounded Annual Rate of Change         log = Natural Log          (provider: fred)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectCommoditySpotPrices]:
        """Spot

        Commodity Spot Prices.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param commodity: Commodity name associated with the EIA spot price commodity data, default is 'all'. (provider: fred)
        :type commodity: str
        :param frequency: Frequency aggregation to convert high frequency data to lower frequency.         None = No change         a = Annual         q = Quarterly         m = Monthly         w = Weekly         d = Daily         wef = Weekly, Ending Friday         weth = Weekly, Ending Thursday         wew = Weekly, Ending Wednesday         wetu = Weekly, Ending Tuesday         wem = Weekly, Ending Monday         wesu = Weekly, Ending Sunday         wesa = Weekly, Ending Saturday         bwew = Biweekly, Ending Wednesday         bwem = Biweekly, Ending Monday          (provider: fred)
        :type frequency: str
        :param aggregation_method: A key that indicates the aggregation method used for frequency aggregation.         This parameter has no affect if the frequency parameter is not set.         avg = Average         sum = Sum         eop = End of Period          (provider: fred)
        :type aggregation_method: str
        :param transform: Transformation type         None = No transformation         chg = Change         ch1 = Change from Year Ago         pch = Percent Change         pc1 = Percent Change from Year Ago         pca = Compounded Annual Rate of Change         cch = Continuously Compounded Rate of Change         cca = Continuously Compounded Annual Rate of Change         log = Natural Log          (provider: fred)
        :type transform: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_price_spot_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            commodity=commodity,
            frequency=frequency,
            aggregation_method=aggregation_method,
            transform=transform,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCommoditySpotPrices",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commodity_price_spot_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        commodity: Annotated[Optional[StrictStr], Field(description="Commodity name associated with the EIA spot price commodity data, default is 'all'. (provider: fred)")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="Frequency aggregation to convert high frequency data to lower frequency.         None = No change         a = Annual         q = Quarterly         m = Monthly         w = Weekly         d = Daily         wef = Weekly, Ending Friday         weth = Weekly, Ending Thursday         wew = Weekly, Ending Wednesday         wetu = Weekly, Ending Tuesday         wem = Weekly, Ending Monday         wesu = Weekly, Ending Sunday         wesa = Weekly, Ending Saturday         bwew = Biweekly, Ending Wednesday         bwem = Biweekly, Ending Monday          (provider: fred)")] = None,
        aggregation_method: Annotated[Optional[StrictStr], Field(description="A key that indicates the aggregation method used for frequency aggregation.         This parameter has no affect if the frequency parameter is not set.         avg = Average         sum = Sum         eop = End of Period          (provider: fred)")] = None,
        transform: Annotated[Optional[StrictStr], Field(description="Transformation type         None = No transformation         chg = Change         ch1 = Change from Year Ago         pch = Percent Change         pc1 = Percent Change from Year Ago         pca = Compounded Annual Rate of Change         cch = Continuously Compounded Rate of Change         cca = Continuously Compounded Annual Rate of Change         log = Natural Log          (provider: fred)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Spot

        Commodity Spot Prices.

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param commodity: Commodity name associated with the EIA spot price commodity data, default is 'all'. (provider: fred)
        :type commodity: str
        :param frequency: Frequency aggregation to convert high frequency data to lower frequency.         None = No change         a = Annual         q = Quarterly         m = Monthly         w = Weekly         d = Daily         wef = Weekly, Ending Friday         weth = Weekly, Ending Thursday         wew = Weekly, Ending Wednesday         wetu = Weekly, Ending Tuesday         wem = Weekly, Ending Monday         wesu = Weekly, Ending Sunday         wesa = Weekly, Ending Saturday         bwew = Biweekly, Ending Wednesday         bwem = Biweekly, Ending Monday          (provider: fred)
        :type frequency: str
        :param aggregation_method: A key that indicates the aggregation method used for frequency aggregation.         This parameter has no affect if the frequency parameter is not set.         avg = Average         sum = Sum         eop = End of Period          (provider: fred)
        :type aggregation_method: str
        :param transform: Transformation type         None = No transformation         chg = Change         ch1 = Change from Year Ago         pch = Percent Change         pc1 = Percent Change from Year Ago         pca = Compounded Annual Rate of Change         cch = Continuously Compounded Rate of Change         cca = Continuously Compounded Annual Rate of Change         log = Natural Log          (provider: fred)
        :type transform: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_price_spot_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            commodity=commodity,
            frequency=frequency,
            aggregation_method=aggregation_method,
            transform=transform,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectCommoditySpotPrices",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commodity_price_spot_serialize(
        self,
        provider,
        start_date,
        end_date,
        commodity,
        frequency,
        aggregation_method,
        transform,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if commodity is not None:
            
            _query_params.append(('commodity', commodity))
            
        if frequency is not None:
            
            _query_params.append(('frequency', frequency))
            
        if aggregation_method is not None:
            
            _query_params.append(('aggregation_method', aggregation_method))
            
        if transform is not None:
            
            _query_params.append(('transform', transform))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/commodity/price/spot',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def commodity_short_term_energy_outlook(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. If provided, overrides the 'table' parameter to return only the specified symbol from the STEO API. Multiple comma separated items allowed. (provider: eia)")] = None,
        table: Annotated[Optional[StrictStr], Field(description="The specific table within the STEO dataset. Default is '01'. When 'symbol' is provided, this parameter is ignored.         01: US Energy Markets Summary         02: Nominal Energy Prices         03a: World Petroleum and Other Liquid Fuels Production, Consumption, and Inventories         03b: Non-OPEC Petroleum and Other Liquid Fuels Production         03c: World Petroleum and Other Liquid Fuels Production         03d: World Crude Oil Production         03e: World Petroleum and Other Liquid Fuels Consumption         04a: US Petroleum and Other Liquid Fuels Supply, Consumption, and Inventories         04b: US Hydrocarbon Gas Liquids (HGL) and Petroleum Refinery Balances         04c: US Regional Motor Gasoline Prices and Inventories         04d: US Biofuel Supply, Consumption, and Inventories         05a: US Natural Gas Supply, Consumption, and Inventories         05b: US Regional Natural Gas Prices         06: US Coal Supply, Consumption, and Inventories         07a: US Electricity Industry Overview         07b: US Regional Electricity Retail Sales         07c: US Regional Electricity Prices         07d1: US Regional Electricity Generation, Electric Power Sector         07d2: US Regional Electricity Generation, Electric Power Sector, continued         07e: US Electricity Generating Capacity         08: US Renewable Energy Consumption         09a: US Macroeconomic Indicators and CO2 Emissions         09b: US Regional Macroeconomic Data         09c: US Regional Weather Data         10a: Drilling Productivity Metrics         10b: Crude Oil and Natural Gas Production from Shale and Tight Formations (provider: eia)")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="The frequency of the data. Default is 'month'. (provider: eia)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OBBjectShortTermEnergyOutlook:
        """Short Term Energy Outlook

        Monthly short term (18 month) projections using EIA's STEO model.  Source: www.eia.gov/steo/

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param symbol: Symbol to get data for. If provided, overrides the 'table' parameter to return only the specified symbol from the STEO API. Multiple comma separated items allowed. (provider: eia)
        :type symbol: str
        :param table: The specific table within the STEO dataset. Default is '01'. When 'symbol' is provided, this parameter is ignored.         01: US Energy Markets Summary         02: Nominal Energy Prices         03a: World Petroleum and Other Liquid Fuels Production, Consumption, and Inventories         03b: Non-OPEC Petroleum and Other Liquid Fuels Production         03c: World Petroleum and Other Liquid Fuels Production         03d: World Crude Oil Production         03e: World Petroleum and Other Liquid Fuels Consumption         04a: US Petroleum and Other Liquid Fuels Supply, Consumption, and Inventories         04b: US Hydrocarbon Gas Liquids (HGL) and Petroleum Refinery Balances         04c: US Regional Motor Gasoline Prices and Inventories         04d: US Biofuel Supply, Consumption, and Inventories         05a: US Natural Gas Supply, Consumption, and Inventories         05b: US Regional Natural Gas Prices         06: US Coal Supply, Consumption, and Inventories         07a: US Electricity Industry Overview         07b: US Regional Electricity Retail Sales         07c: US Regional Electricity Prices         07d1: US Regional Electricity Generation, Electric Power Sector         07d2: US Regional Electricity Generation, Electric Power Sector, continued         07e: US Electricity Generating Capacity         08: US Renewable Energy Consumption         09a: US Macroeconomic Indicators and CO2 Emissions         09b: US Regional Macroeconomic Data         09c: US Regional Weather Data         10a: Drilling Productivity Metrics         10b: Crude Oil and Natural Gas Production from Shale and Tight Formations (provider: eia)
        :type table: str
        :param frequency: The frequency of the data. Default is 'month'. (provider: eia)
        :type frequency: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_short_term_energy_outlook_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            symbol=symbol,
            table=table,
            frequency=frequency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectShortTermEnergyOutlook",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commodity_short_term_energy_outlook_with_http_info(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. If provided, overrides the 'table' parameter to return only the specified symbol from the STEO API. Multiple comma separated items allowed. (provider: eia)")] = None,
        table: Annotated[Optional[StrictStr], Field(description="The specific table within the STEO dataset. Default is '01'. When 'symbol' is provided, this parameter is ignored.         01: US Energy Markets Summary         02: Nominal Energy Prices         03a: World Petroleum and Other Liquid Fuels Production, Consumption, and Inventories         03b: Non-OPEC Petroleum and Other Liquid Fuels Production         03c: World Petroleum and Other Liquid Fuels Production         03d: World Crude Oil Production         03e: World Petroleum and Other Liquid Fuels Consumption         04a: US Petroleum and Other Liquid Fuels Supply, Consumption, and Inventories         04b: US Hydrocarbon Gas Liquids (HGL) and Petroleum Refinery Balances         04c: US Regional Motor Gasoline Prices and Inventories         04d: US Biofuel Supply, Consumption, and Inventories         05a: US Natural Gas Supply, Consumption, and Inventories         05b: US Regional Natural Gas Prices         06: US Coal Supply, Consumption, and Inventories         07a: US Electricity Industry Overview         07b: US Regional Electricity Retail Sales         07c: US Regional Electricity Prices         07d1: US Regional Electricity Generation, Electric Power Sector         07d2: US Regional Electricity Generation, Electric Power Sector, continued         07e: US Electricity Generating Capacity         08: US Renewable Energy Consumption         09a: US Macroeconomic Indicators and CO2 Emissions         09b: US Regional Macroeconomic Data         09c: US Regional Weather Data         10a: Drilling Productivity Metrics         10b: Crude Oil and Natural Gas Production from Shale and Tight Formations (provider: eia)")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="The frequency of the data. Default is 'month'. (provider: eia)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OBBjectShortTermEnergyOutlook]:
        """Short Term Energy Outlook

        Monthly short term (18 month) projections using EIA's STEO model.  Source: www.eia.gov/steo/

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param symbol: Symbol to get data for. If provided, overrides the 'table' parameter to return only the specified symbol from the STEO API. Multiple comma separated items allowed. (provider: eia)
        :type symbol: str
        :param table: The specific table within the STEO dataset. Default is '01'. When 'symbol' is provided, this parameter is ignored.         01: US Energy Markets Summary         02: Nominal Energy Prices         03a: World Petroleum and Other Liquid Fuels Production, Consumption, and Inventories         03b: Non-OPEC Petroleum and Other Liquid Fuels Production         03c: World Petroleum and Other Liquid Fuels Production         03d: World Crude Oil Production         03e: World Petroleum and Other Liquid Fuels Consumption         04a: US Petroleum and Other Liquid Fuels Supply, Consumption, and Inventories         04b: US Hydrocarbon Gas Liquids (HGL) and Petroleum Refinery Balances         04c: US Regional Motor Gasoline Prices and Inventories         04d: US Biofuel Supply, Consumption, and Inventories         05a: US Natural Gas Supply, Consumption, and Inventories         05b: US Regional Natural Gas Prices         06: US Coal Supply, Consumption, and Inventories         07a: US Electricity Industry Overview         07b: US Regional Electricity Retail Sales         07c: US Regional Electricity Prices         07d1: US Regional Electricity Generation, Electric Power Sector         07d2: US Regional Electricity Generation, Electric Power Sector, continued         07e: US Electricity Generating Capacity         08: US Renewable Energy Consumption         09a: US Macroeconomic Indicators and CO2 Emissions         09b: US Regional Macroeconomic Data         09c: US Regional Weather Data         10a: Drilling Productivity Metrics         10b: Crude Oil and Natural Gas Production from Shale and Tight Formations (provider: eia)
        :type table: str
        :param frequency: The frequency of the data. Default is 'month'. (provider: eia)
        :type frequency: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_short_term_energy_outlook_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            symbol=symbol,
            table=table,
            frequency=frequency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectShortTermEnergyOutlook",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commodity_short_term_energy_outlook_without_preload_content(
        self,
        provider: Optional[StrictStr] = None,
        start_date: Annotated[Optional[date], Field(description="Start date of the data, in YYYY-MM-DD format.")] = None,
        end_date: Annotated[Optional[date], Field(description="End date of the data, in YYYY-MM-DD format.")] = None,
        symbol: Annotated[Optional[StrictStr], Field(description="Symbol to get data for. If provided, overrides the 'table' parameter to return only the specified symbol from the STEO API. Multiple comma separated items allowed. (provider: eia)")] = None,
        table: Annotated[Optional[StrictStr], Field(description="The specific table within the STEO dataset. Default is '01'. When 'symbol' is provided, this parameter is ignored.         01: US Energy Markets Summary         02: Nominal Energy Prices         03a: World Petroleum and Other Liquid Fuels Production, Consumption, and Inventories         03b: Non-OPEC Petroleum and Other Liquid Fuels Production         03c: World Petroleum and Other Liquid Fuels Production         03d: World Crude Oil Production         03e: World Petroleum and Other Liquid Fuels Consumption         04a: US Petroleum and Other Liquid Fuels Supply, Consumption, and Inventories         04b: US Hydrocarbon Gas Liquids (HGL) and Petroleum Refinery Balances         04c: US Regional Motor Gasoline Prices and Inventories         04d: US Biofuel Supply, Consumption, and Inventories         05a: US Natural Gas Supply, Consumption, and Inventories         05b: US Regional Natural Gas Prices         06: US Coal Supply, Consumption, and Inventories         07a: US Electricity Industry Overview         07b: US Regional Electricity Retail Sales         07c: US Regional Electricity Prices         07d1: US Regional Electricity Generation, Electric Power Sector         07d2: US Regional Electricity Generation, Electric Power Sector, continued         07e: US Electricity Generating Capacity         08: US Renewable Energy Consumption         09a: US Macroeconomic Indicators and CO2 Emissions         09b: US Regional Macroeconomic Data         09c: US Regional Weather Data         10a: Drilling Productivity Metrics         10b: Crude Oil and Natural Gas Production from Shale and Tight Formations (provider: eia)")] = None,
        frequency: Annotated[Optional[StrictStr], Field(description="The frequency of the data. Default is 'month'. (provider: eia)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Short Term Energy Outlook

        Monthly short term (18 month) projections using EIA's STEO model.  Source: www.eia.gov/steo/

        :param provider:
        :type provider: str
        :param start_date: Start date of the data, in YYYY-MM-DD format.
        :type start_date: date
        :param end_date: End date of the data, in YYYY-MM-DD format.
        :type end_date: date
        :param symbol: Symbol to get data for. If provided, overrides the 'table' parameter to return only the specified symbol from the STEO API. Multiple comma separated items allowed. (provider: eia)
        :type symbol: str
        :param table: The specific table within the STEO dataset. Default is '01'. When 'symbol' is provided, this parameter is ignored.         01: US Energy Markets Summary         02: Nominal Energy Prices         03a: World Petroleum and Other Liquid Fuels Production, Consumption, and Inventories         03b: Non-OPEC Petroleum and Other Liquid Fuels Production         03c: World Petroleum and Other Liquid Fuels Production         03d: World Crude Oil Production         03e: World Petroleum and Other Liquid Fuels Consumption         04a: US Petroleum and Other Liquid Fuels Supply, Consumption, and Inventories         04b: US Hydrocarbon Gas Liquids (HGL) and Petroleum Refinery Balances         04c: US Regional Motor Gasoline Prices and Inventories         04d: US Biofuel Supply, Consumption, and Inventories         05a: US Natural Gas Supply, Consumption, and Inventories         05b: US Regional Natural Gas Prices         06: US Coal Supply, Consumption, and Inventories         07a: US Electricity Industry Overview         07b: US Regional Electricity Retail Sales         07c: US Regional Electricity Prices         07d1: US Regional Electricity Generation, Electric Power Sector         07d2: US Regional Electricity Generation, Electric Power Sector, continued         07e: US Electricity Generating Capacity         08: US Renewable Energy Consumption         09a: US Macroeconomic Indicators and CO2 Emissions         09b: US Regional Macroeconomic Data         09c: US Regional Weather Data         10a: Drilling Productivity Metrics         10b: Crude Oil and Natural Gas Production from Shale and Tight Formations (provider: eia)
        :type table: str
        :param frequency: The frequency of the data. Default is 'month'. (provider: eia)
        :type frequency: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commodity_short_term_energy_outlook_serialize(
            provider=provider,
            start_date=start_date,
            end_date=end_date,
            symbol=symbol,
            table=table,
            frequency=frequency,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OBBjectShortTermEnergyOutlook",
            '404': None,
            '204': None,
            '400': "OpenBBErrorResponse",
            '500': "OpenBBErrorResponse",
            '502': "OpenBBErrorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commodity_short_term_energy_outlook_serialize(
        self,
        provider,
        start_date,
        end_date,
        symbol,
        table,
        frequency,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if provider is not None:
            
            _query_params.append(('provider', provider))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'start_date',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'end_date',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end_date', end_date))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if table is not None:
            
            _query_params.append(('table', table))
            
        if frequency is not None:
            
            _query_params.append(('frequency', frequency))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/commodity/short_term_energy_outlook',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


