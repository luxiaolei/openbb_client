# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openbb_client.models.benzinga_analyst_search_data import BenzingaAnalystSearchData

class TestBenzingaAnalystSearchData(unittest.TestCase):
    """BenzingaAnalystSearchData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BenzingaAnalystSearchData:
        """Test BenzingaAnalystSearchData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BenzingaAnalystSearchData`
        """
        model = BenzingaAnalystSearchData()
        if include_optional:
            return BenzingaAnalystSearchData(
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                firm_name = '',
                name_first = '',
                name_last = '',
                name_full = '',
                analyst_id = '',
                firm_id = '',
                smart_score = 1.337,
                overall_success_rate = 1.337,
                overall_avg_return_percentile = 1.337,
                total_ratings_percentile = 1.337,
                total_ratings = 56,
                overall_gain_count = 56,
                overall_loss_count = 56,
                overall_average_return = 1.337,
                overall_std_dev = 1.337,
                gain_count_1m = 56,
                loss_count_1m = 56,
                average_return_1m = 1.337,
                std_dev_1m = 1.337,
                smart_score_1m = 1.337,
                success_rate_1m = 1.337,
                gain_count_3m = 56,
                loss_count_3m = 56,
                average_return_3m = 1.337,
                std_dev_3m = 1.337,
                smart_score_3m = 1.337,
                success_rate_3m = 1.337,
                gain_count_6m = 56,
                loss_count_6m = 56,
                average_return_6m = 1.337,
                std_dev_6m = 1.337,
                gain_count_9m = 56,
                loss_count_9m = 56,
                average_return_9m = 1.337,
                std_dev_9m = 1.337,
                smart_score_9m = 1.337,
                success_rate_9m = 1.337,
                gain_count_1y = 56,
                loss_count_1y = 56,
                average_return_1y = 1.337,
                std_dev_1y = 1.337,
                smart_score_1y = 1.337,
                success_rate_1y = 1.337,
                gain_count_2y = 56,
                loss_count_2y = 56,
                average_return_2y = 1.337,
                std_dev_2y = 1.337,
                smart_score_2y = 1.337,
                success_rate_2y = 1.337,
                gain_count_3y = 56,
                loss_count_3y = 56,
                average_return_3y = 1.337,
                std_dev_3y = 1.337,
                smart_score_3y = 1.337,
                success_rate_3y = 1.337
            )
        else:
            return BenzingaAnalystSearchData(
                name_full = '',
        )
        """

    def testBenzingaAnalystSearchData(self):
        """Test BenzingaAnalystSearchData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
