# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openbb_client.models.fmp_income_statement_data import FMPIncomeStatementData

class TestFMPIncomeStatementData(unittest.TestCase):
    """FMPIncomeStatementData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FMPIncomeStatementData:
        """Test FMPIncomeStatementData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FMPIncomeStatementData`
        """
        model = FMPIncomeStatementData()
        if include_optional:
            return FMPIncomeStatementData(
                period_ending = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                fiscal_period = '',
                fiscal_year = 56,
                filing_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                accepted_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                reported_currency = '',
                revenue = 1.337,
                cost_of_revenue = 1.337,
                gross_profit = 1.337,
                gross_profit_margin = 1.337,
                general_and_admin_expense = 1.337,
                research_and_development_expense = 1.337,
                selling_and_marketing_expense = 1.337,
                selling_general_and_admin_expense = 1.337,
                other_expenses = 1.337,
                total_operating_expenses = 1.337,
                cost_and_expenses = 1.337,
                interest_income = 1.337,
                total_interest_expense = 1.337,
                depreciation_and_amortization = 1.337,
                ebitda = 1.337,
                ebitda_margin = 1.337,
                total_operating_income = 1.337,
                operating_income_margin = 1.337,
                total_other_income_expenses = 1.337,
                total_pre_tax_income = 1.337,
                pre_tax_income_margin = 1.337,
                income_tax_expense = 1.337,
                consolidated_net_income = 1.337,
                net_income_margin = 1.337,
                basic_earnings_per_share = 1.337,
                diluted_earnings_per_share = 1.337,
                weighted_average_basic_shares_outstanding = 1.337,
                weighted_average_diluted_shares_outstanding = 1.337,
                link = '',
                final_link = ''
            )
        else:
            return FMPIncomeStatementData(
                period_ending = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
        )
        """

    def testFMPIncomeStatementData(self):
        """Test FMPIncomeStatementData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
