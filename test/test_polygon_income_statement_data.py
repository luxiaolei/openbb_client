# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openbb_client.models.polygon_income_statement_data import PolygonIncomeStatementData

class TestPolygonIncomeStatementData(unittest.TestCase):
    """PolygonIncomeStatementData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PolygonIncomeStatementData:
        """Test PolygonIncomeStatementData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PolygonIncomeStatementData`
        """
        model = PolygonIncomeStatementData()
        if include_optional:
            return PolygonIncomeStatementData(
                period_ending = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                fiscal_period = '',
                fiscal_year = 56,
                revenue = 1.337,
                cost_of_revenue_goods = 1.337,
                cost_of_revenue_services = 1.337,
                cost_of_revenue = 1.337,
                gross_profit = 1.337,
                provisions_for_loan_lease_and_other_losses = 1.337,
                depreciation_and_amortization = 1.337,
                income_tax_expense_benefit_current = 1.337,
                deferred_tax_benefit = 1.337,
                benefits_costs_expenses = 1.337,
                selling_general_and_administrative_expense = 1.337,
                research_and_development = 1.337,
                costs_and_expenses = 1.337,
                other_operating_expenses = 1.337,
                operating_expenses = 1.337,
                operating_income = 1.337,
                non_operating_income = 1.337,
                interest_and_dividend_income = 1.337,
                total_interest_expense = 1.337,
                interest_and_debt_expense = 1.337,
                net_interest_income = 1.337,
                interest_income_after_provision_for_losses = 1.337,
                non_interest_expense = 1.337,
                non_interest_income = 1.337,
                income_from_discontinued_operations_net_of_tax_on_disposal = 1.337,
                income_from_discontinued_operations_net_of_tax = 1.337,
                income_before_equity_method_investments = 1.337,
                income_from_equity_method_investments = 1.337,
                total_pre_tax_income = 1.337,
                income_tax_expense = 1.337,
                income_after_tax = 1.337,
                consolidated_net_income = 1.337,
                net_income_attributable_noncontrolling_interest = 1.337,
                net_income_attributable_to_parent = 1.337,
                net_income_attributable_to_common_shareholders = 1.337,
                participating_securities_earnings = 1.337,
                undistributed_earnings_allocated_to_participating_securities = 1.337,
                common_stock_dividends = 1.337,
                preferred_stock_dividends_and_other_adjustments = 1.337,
                basic_earnings_per_share = 1.337,
                diluted_earnings_per_share = 1.337,
                weighted_average_basic_shares_outstanding = 1.337,
                weighted_average_diluted_shares_outstanding = 1.337
            )
        else:
            return PolygonIncomeStatementData(
                period_ending = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
        )
        """

    def testPolygonIncomeStatementData(self):
        """Test PolygonIncomeStatementData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
