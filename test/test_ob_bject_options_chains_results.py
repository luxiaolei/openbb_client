# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openbb_client.models.ob_bject_options_chains_results import OBBjectOptionsChainsResults

class TestOBBjectOptionsChainsResults(unittest.TestCase):
    """OBBjectOptionsChainsResults unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OBBjectOptionsChainsResults:
        """Test OBBjectOptionsChainsResults
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OBBjectOptionsChainsResults`
        """
        model = OBBjectOptionsChainsResults()
        if include_optional:
            return OBBjectOptionsChainsResults(
                underlying_symbol = [
                    ''
                    ],
                underlying_price = [
                    1.337
                    ],
                contract_symbol = [
                    ''
                    ],
                eod_date = [
                    datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
                    ],
                expiration = [
                    datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
                    ],
                dte = [
                    56
                    ],
                strike = [
                    1.337
                    ],
                option_type = [
                    ''
                    ],
                open_interest = [
                    56
                    ],
                volume = [
                    56
                    ],
                theoretical_price = [
                    1.337
                    ],
                last_trade_price = [
                    1.337
                    ],
                last_trade_size = [
                    56
                    ],
                last_trade_time = [
                    datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                    ],
                tick = [
                    ''
                    ],
                bid = [
                    1.337
                    ],
                bid_size = [
                    56
                    ],
                bid_time = [
                    datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                    ],
                bid_exchange = [
                    ''
                    ],
                ask = [
                    1.337
                    ],
                ask_size = [
                    56
                    ],
                ask_time = [
                    datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                    ],
                ask_exchange = [
                    ''
                    ],
                mark = [
                    1.337
                    ],
                open = [
                    1.337
                    ],
                open_bid = [
                    1.337
                    ],
                open_ask = [
                    1.337
                    ],
                high = [
                    1.337
                    ],
                bid_high = [
                    1.337
                    ],
                ask_high = [
                    1.337
                    ],
                low = [
                    1.337
                    ],
                bid_low = [
                    1.337
                    ],
                ask_low = [
                    1.337
                    ],
                close = [
                    1.337
                    ],
                close_size = [
                    56
                    ],
                close_time = [
                    datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                    ],
                close_bid = [
                    1.337
                    ],
                close_bid_size = [
                    56
                    ],
                close_bid_time = [
                    datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                    ],
                close_ask = [
                    1.337
                    ],
                close_ask_size = [
                    56
                    ],
                close_ask_time = [
                    datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                    ],
                prev_close = [
                    1.337
                    ],
                change = [
                    1.337
                    ],
                change_percent = [
                    1.337
                    ],
                implied_volatility = [
                    1.337
                    ],
                delta = [
                    1.337
                    ],
                gamma = [
                    1.337
                    ],
                theta = [
                    1.337
                    ],
                vega = [
                    1.337
                    ],
                rho = [
                    1.337
                    ],
                in_the_money = [
                    True
                    ],
                currency = [
                    ''
                    ]
            )
        else:
            return OBBjectOptionsChainsResults(
                contract_symbol = [
                    ''
                    ],
                expiration = [
                    datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
                    ],
                strike = [
                    1.337
                    ],
                option_type = [
                    ''
                    ],
        )
        """

    def testOBBjectOptionsChainsResults(self):
        """Test OBBjectOptionsChainsResults"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
