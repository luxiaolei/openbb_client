# coding: utf-8

"""
    OpenBB Platform API

    Investment research for everyone, anywhere.

    The version of the OpenAPI document: 1
    Contact: hello@openbb.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openbb_client.models.intrinio_balance_sheet_data import IntrinioBalanceSheetData

class TestIntrinioBalanceSheetData(unittest.TestCase):
    """IntrinioBalanceSheetData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IntrinioBalanceSheetData:
        """Test IntrinioBalanceSheetData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IntrinioBalanceSheetData`
        """
        model = IntrinioBalanceSheetData()
        if include_optional:
            return IntrinioBalanceSheetData(
                period_ending = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                fiscal_period = '',
                fiscal_year = 56,
                reported_currency = '',
                cash_and_cash_equivalents = 1.337,
                cash_and_due_from_banks = 1.337,
                restricted_cash = 1.337,
                short_term_investments = 1.337,
                federal_funds_sold = 1.337,
                accounts_receivable = 1.337,
                note_and_lease_receivable = 1.337,
                inventories = 1.337,
                customer_and_other_receivables = 1.337,
                interest_bearing_deposits_at_other_banks = 1.337,
                time_deposits_placed_and_other_short_term_investments = 1.337,
                trading_account_securities = 1.337,
                loans_and_leases = 1.337,
                allowance_for_loan_and_lease_losses = 1.337,
                current_deferred_refundable_income_taxes = 1.337,
                other_current_assets = 1.337,
                loans_and_leases_net_of_allowance = 1.337,
                accrued_investment_income = 1.337,
                other_current_non_operating_assets = 1.337,
                loans_held_for_sale = 1.337,
                prepaid_expenses = 1.337,
                total_current_assets = 1.337,
                plant_property_equipment_gross = 1.337,
                accumulated_depreciation = 1.337,
                premises_and_equipment_net = 1.337,
                plant_property_equipment_net = 1.337,
                long_term_investments = 1.337,
                mortgage_servicing_rights = 1.337,
                unearned_premiums_asset = 1.337,
                non_current_note_lease_receivables = 1.337,
                deferred_acquisition_cost = 1.337,
                goodwill = 1.337,
                separate_account_business_assets = 1.337,
                non_current_deferred_refundable_income_taxes = 1.337,
                intangible_assets = 1.337,
                employee_benefit_assets = 1.337,
                other_assets = 1.337,
                other_non_current_operating_assets = 1.337,
                other_non_current_non_operating_assets = 1.337,
                interest_bearing_deposits = 1.337,
                total_non_current_assets = 1.337,
                total_assets = 1.337,
                non_interest_bearing_deposits = 1.337,
                federal_funds_purchased_and_securities_sold = 1.337,
                bankers_acceptance_outstanding = 1.337,
                short_term_debt = 1.337,
                accounts_payable = 1.337,
                current_deferred_revenue = 1.337,
                current_deferred_payable_income_tax_liabilities = 1.337,
                accrued_interest_payable = 1.337,
                accrued_expenses = 1.337,
                other_short_term_payables = 1.337,
                customer_deposits = 1.337,
                dividends_payable = 1.337,
                claims_and_claim_expense = 1.337,
                future_policy_benefits = 1.337,
                current_employee_benefit_liabilities = 1.337,
                unearned_premiums_liability = 1.337,
                other_taxes_payable = 1.337,
                policy_holder_funds = 1.337,
                other_current_liabilities = 1.337,
                other_current_non_operating_liabilities = 1.337,
                separate_account_business_liabilities = 1.337,
                total_current_liabilities = 1.337,
                long_term_debt = 1.337,
                other_long_term_liabilities = 1.337,
                non_current_deferred_revenue = 1.337,
                non_current_deferred_payable_income_tax_liabilities = 1.337,
                non_current_employee_benefit_liabilities = 1.337,
                other_non_current_operating_liabilities = 1.337,
                other_non_current_non_operating_liabilities = 1.337,
                total_non_current_liabilities = 1.337,
                capital_lease_obligations = 1.337,
                asset_retirement_reserve_litigation_obligation = 1.337,
                total_liabilities = 1.337,
                commitments_contingencies = 1.337,
                redeemable_non_controlling_interest = 1.337,
                preferred_stock = 1.337,
                common_stock = 1.337,
                retained_earnings = 1.337,
                treasury_stock = 1.337,
                accumulated_other_comprehensive_income = 1.337,
                participating_policy_holder_equity = 1.337,
                other_equity_adjustments = 1.337,
                total_common_equity = 1.337,
                total_preferred_common_equity = 1.337,
                non_controlling_interest = 1.337,
                total_equity_non_controlling_interests = 1.337,
                total_liabilities_shareholders_equity = 1.337
            )
        else:
            return IntrinioBalanceSheetData(
                period_ending = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
        )
        """

    def testIntrinioBalanceSheetData(self):
        """Test IntrinioBalanceSheetData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
